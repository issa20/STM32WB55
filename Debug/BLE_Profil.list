
BLE_Profil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a44  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08007b80  08007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000004  08007e0c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  2000002c  08007e34  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000042  200000c8  08007ecd  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000010c  08007f0f  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000084  20000120  08007f20  00020120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000001bc  200001a4  08007fa4  000201a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  08007fa4  00020360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   000356a9  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006126  00000000  00000000  0005587d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000022b0  00000000  00000000  0005b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002038  00000000  00000000  0005dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b2d4  00000000  00000000  0005fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000244c1  00000000  00000000  0008af64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000eff5b  00000000  00000000  000af425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  0019f380  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008eb0  00000000  00000000  0019f3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001a4 	.word	0x200001a4
 8000158:	00000000 	.word	0x00000000
 800015c:	08007b68 	.word	0x08007b68

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001a8 	.word	0x200001a8
 8000178:	08007b68 	.word	0x08007b68

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 fe95 	bl	8005ed8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f005 f930 	bl	8005416 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08007b80 	.word	0x08007b80

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001fe:	4905      	ldr	r1, [pc, #20]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000800 	.word	0x58000800

08000218 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000232:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	cafecafe 	.word	0xcafecafe

08000254 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800025c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	608b      	str	r3, [r1, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800028c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80002a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80002d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80002d4:	d101      	bne.n	80002da <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e000      	b.n	80002dc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80002ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80002fa:	d101      	bne.n	8000300 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800031a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000330:	68fb      	ldr	r3, [r7, #12]
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <LL_DBGMCU_GetRevisionID+0x18>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	0c1b      	lsrs	r3, r3, #16
 800034a:	b29b      	uxth	r3, r3
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e0042000 	.word	0xe0042000

0800035c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685a      	ldr	r2, [r3, #4]
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	041b      	lsls	r3, r3, #16
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	605a      	str	r2, [r3, #4]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685a      	ldr	r2, [r3, #4]
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	431a      	orrs	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	605a      	str	r2, [r3, #4]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	041b      	lsls	r3, r3, #16
 80003b4:	431a      	orrs	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	615a      	str	r2, [r3, #20]
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	431a      	orrs	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	615a      	str	r2, [r3, #20]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	609a      	str	r2, [r3, #8]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	619a      	str	r2, [r3, #24]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	22ff      	movs	r2, #255	; 0xff
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	22ca      	movs	r2, #202	; 0xca
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2253      	movs	r2, #83	; 0x53
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f023 0207 	bic.w	r2, r3, #7
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <MX_APPE_Config+0x18>)
 8000486:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800048a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 800048c:	f000 f824 	bl	80004d8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000490:	f000 f864 	bl	800055c <Config_HSE>

  return;
 8000494:	bf00      	nop
}
 8000496:	bd80      	pop	{r7, pc}
 8000498:	58004000 	.word	0x58004000

0800049c <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 80004a0:	f000 f870 	bl	8000584 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80004a4:	f000 f888 	bl	80005b8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004a8:	4903      	ldr	r1, [pc, #12]	; (80004b8 <MX_APPE_Init+0x1c>)
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 fdc0 	bl	8001030 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004b0:	f000 f890 	bl	80005d4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004b4:	bf00      	nop
}
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000334 	.word	0x20000334

080004bc <Init_Smps>:

void Init_Smps( void )
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 80004c0:	bf00      	nop
}
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <Init_Exti>:

void Init_Exti( void )
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fe8e 	bl	80001f0 <LL_EXTI_EnableIT_32_63>

  return;
 80004d4:	bf00      	nop
}
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80004dc:	f000 f804 	bl	80004e8 <Reset_BackupDomain>

  Reset_IPCC();
 80004e0:	f000 f81a 	bl	8000518 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80004ec:	f7ff fee8 	bl	80002c0 <LL_RCC_IsActiveFlag_PINRST>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d00d      	beq.n	8000512 <Reset_BackupDomain+0x2a>
 80004f6:	f7ff fef6 	bl	80002e6 <LL_RCC_IsActiveFlag_SFTRST>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d108      	bne.n	8000512 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000500:	f001 febc 	bl	800227c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000504:	f001 feba 	bl	800227c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000508:	f7ff feb8 	bl	800027c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800050c:	f7ff fec7 	bl	800029e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000510:	bf00      	nop
 8000512:	bf00      	nop
}
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800051c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000520:	f7ff fef4 	bl	800030c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000524:	213f      	movs	r1, #63	; 0x3f
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <Reset_IPCC+0x40>)
 8000528:	f7ff ff5e 	bl	80003e8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800052c:	213f      	movs	r1, #63	; 0x3f
 800052e:	480a      	ldr	r0, [pc, #40]	; (8000558 <Reset_IPCC+0x40>)
 8000530:	f7ff ff68 	bl	8000404 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000534:	213f      	movs	r1, #63	; 0x3f
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <Reset_IPCC+0x40>)
 8000538:	f7ff ff10 	bl	800035c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800053c:	213f      	movs	r1, #63	; 0x3f
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <Reset_IPCC+0x40>)
 8000540:	f7ff ff2f 	bl	80003a2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000544:	213f      	movs	r1, #63	; 0x3f
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <Reset_IPCC+0x40>)
 8000548:	f7ff ff1a 	bl	8000380 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800054c:	213f      	movs	r1, #63	; 0x3f
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <Reset_IPCC+0x40>)
 8000550:	f7ff ff39 	bl	80003c6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000554:	bf00      	nop
}
 8000556:	bd80      	pop	{r7, pc}
 8000558:	58000c00 	.word	0x58000c00

0800055c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000562:	2000      	movs	r0, #0
 8000564:	f005 fd44 	bl	8005ff0 <OTP_Read>
 8000568:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d005      	beq.n	800057c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	799b      	ldrb	r3, [r3, #6]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe4f 	bl	8000218 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800057a:	bf00      	nop
 800057c:	bf00      	nop
}
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <System_Init>:

static void System_Init( void )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000588:	f7ff ff98 	bl	80004bc <Init_Smps>

  Init_Exti( );
 800058c:	f7ff ff9d 	bl	80004ca <Init_Exti>

  Init_Rtc( );
 8000590:	f000 f802 	bl	8000598 <Init_Rtc>

  return;
 8000594:	bf00      	nop
}
 8000596:	bd80      	pop	{r7, pc}

08000598 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <Init_Rtc+0x1c>)
 800059e:	f7ff ff4c 	bl	800043a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80005a2:	2100      	movs	r1, #0
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <Init_Rtc+0x1c>)
 80005a6:	f7ff ff58 	bl	800045a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <Init_Rtc+0x1c>)
 80005ac:	f7ff ff38 	bl	8000420 <LL_RTC_EnableWriteProtection>

  return;
 80005b0:	bf00      	nop
}
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40002800 	.word	0x40002800

080005b8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80005bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005c0:	f7ff fe48 	bl	8000254 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80005c4:	f007 f826 	bl	8007614 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80005c8:	2004      	movs	r0, #4
 80005ca:	f7ff fdfb 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80005ce:	bf00      	nop
}
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005da:	f005 fac7 	bl	8005b6c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <appe_Tl_Init+0x50>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	2004      	movs	r0, #4
 80005e4:	f007 f942 	bl	800786c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <appe_Tl_Init+0x54>)
 80005ea:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <appe_Tl_Init+0x58>)
 80005ee:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	480e      	ldr	r0, [pc, #56]	; (8000630 <appe_Tl_Init+0x5c>)
 80005f6:	f005 f97f 	bl	80058f8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <appe_Tl_Init+0x60>)
 80005fc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <appe_Tl_Init+0x64>)
 8000600:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <appe_Tl_Init+0x68>)
 8000604:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000606:	f240 533c 	movw	r3, #1340	; 0x53c
 800060a:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fbed 	bl	8005df0 <TL_MM_Init>

  TL_Enable();
 8000616:	f005 faa3 	bl	8005b60 <TL_Enable>

  return;
 800061a:	bf00      	nop
}
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08005931 	.word	0x08005931
 8000628:	20030724 	.word	0x20030724
 800062c:	08000641 	.word	0x08000641
 8000630:	08000659 	.word	0x08000659
 8000634:	2003093c 	.word	0x2003093c
 8000638:	20030830 	.word	0x20030830
 800063c:	200301e8 	.word	0x200301e8

08000640 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800064a:	bf00      	nop
}
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	330b      	adds	r3, #11
 8000666:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4618      	mov	r0, r3
 800066e:	f004 feff 	bl	8005470 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800067c:	2b07      	cmp	r3, #7
 800067e:	d81b      	bhi.n	80006b8 <APPE_SysUserEvtRx+0x60>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <APPE_SysUserEvtRx+0x30>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006a9 	.word	0x080006a9
 800068c:	080006b1 	.word	0x080006b1
 8000690:	080006b9 	.word	0x080006b9
 8000694:	080006b9 	.word	0x080006b9
 8000698:	080006b9 	.word	0x080006b9
 800069c:	080006b9 	.word	0x080006b9
 80006a0:	080006b9 	.word	0x080006b9
 80006a4:	080006b9 	.word	0x080006b9
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f81c 	bl	80006e6 <APPE_SysEvtReadyProcessing>
    break;
 80006ae:	e004      	b.n	80006ba <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f807 	bl	80006c4 <APPE_SysEvtError>
    break;
 80006b6:	e000      	b.n	80006ba <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 80006b8:	bf00      	nop
  }

  return;
 80006ba:	bf00      	nop
}
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop

080006c4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	330b      	adds	r3, #11
 80006d2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3302      	adds	r3, #2
 80006d8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80006da:	bf00      	nop
}
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b08a      	sub	sp, #40	; 0x28
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	330b      	adds	r3, #11
 8000706:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	3302      	adds	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d117      	bne.n	8000746 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000716:	f7ff fd39 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800071a:	230d      	movs	r3, #13
 800071c:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800071e:	237f      	movs	r3, #127	; 0x7f
 8000720:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000722:	f7ff fe0d 	bl	8000340 <LL_DBGMCU_GetRevisionID>
 8000726:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	b29b      	uxth	r3, r3
 800072c:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fe86 	bl	8005444 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000738:	f005 fd64 	bl	8006204 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800073c:	2100      	movs	r1, #0
 800073e:	2001      	movs	r0, #1
 8000740:	f006 ff7a 	bl	8007638 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000744:	e007      	b.n	8000756 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d103      	bne.n	8000756 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  return;
 8000754:	bf00      	nop
 8000756:	bf00      	nop
}
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000762:	f04f 30ff 	mov.w	r0, #4294967295
 8000766:	f006 ff97 	bl	8007698 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}

0800076e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000772:	bf00      	nop
}
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000786:	f04f 30ff 	mov.w	r0, #4294967295
 800078a:	f006 ff85 	bl	8007698 <UTIL_SEQ_Run>

  return;
 800078e:	bf00      	nop
}
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2004      	movs	r0, #4
 80007a2:	f007 f885 	bl	80078b0 <UTIL_SEQ_SetTask>
  return;
 80007a6:	bf00      	nop
}
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80007b6:	2002      	movs	r0, #2
 80007b8:	f007 f8e6 	bl	8007988 <UTIL_SEQ_SetEvt>
  return;
 80007bc:	bf00      	nop
}
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80007cc:	2002      	movs	r0, #2
 80007ce:	f007 f8fb 	bl	80079c8 <UTIL_SEQ_WaitEvt>
  return;
 80007d2:	bf00      	nop
}
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <LL_EXTI_EnableIT_0_31>:
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <LL_EXTI_EnableIT_0_31+0x24>)
 80007e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80007ea:	4905      	ldr	r1, [pc, #20]	; (8000800 <LL_EXTI_EnableIT_0_31+0x24>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	58000800 	.word	0x58000800

08000804 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4904      	ldr	r1, [pc, #16]	; (8000824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	600b      	str	r3, [r1, #0]

}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	58000800 	.word	0x58000800

08000828 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <ReadRtcSsrValue+0x3c>)
 8000830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000832:	b29b      	uxth	r3, r3
 8000834:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <ReadRtcSsrValue+0x3c>)
 8000838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083a:	b29b      	uxth	r3, r3
 800083c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800083e:	e005      	b.n	800084c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <ReadRtcSsrValue+0x3c>)
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	b29b      	uxth	r3, r3
 800084a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d1f5      	bne.n	8000840 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000854:	683b      	ldr	r3, [r7, #0]
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40002800 	.word	0x40002800

08000868 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	491d      	ldr	r1, [pc, #116]	; (80008f0 <LinkTimerAfter+0x88>)
 800087c:	4613      	mov	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	4413      	add	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	440b      	add	r3, r1
 8000886:	3315      	adds	r3, #21
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	2b06      	cmp	r3, #6
 8000890:	d009      	beq.n	80008a6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	4916      	ldr	r1, [pc, #88]	; (80008f0 <LinkTimerAfter+0x88>)
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	440b      	add	r3, r1
 80008a0:	3314      	adds	r3, #20
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <LinkTimerAfter+0x88>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	440b      	add	r3, r1
 80008b4:	3315      	adds	r3, #21
 80008b6:	7bfa      	ldrb	r2, [r7, #15]
 80008b8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <LinkTimerAfter+0x88>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	440b      	add	r3, r1
 80008c8:	3314      	adds	r3, #20
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <LinkTimerAfter+0x88>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	3315      	adds	r3, #21
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	701a      	strb	r2, [r3, #0]

  return;
 80008e2:	bf00      	nop
}
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2000002c 	.word	0x2000002c

080008f4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	4613      	mov	r3, r2
 8000902:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <LinkTimerBefore+0xb8>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	79ba      	ldrb	r2, [r7, #6]
 800090c:	429a      	cmp	r2, r3
 800090e:	d032      	beq.n	8000976 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000910:	79ba      	ldrb	r2, [r7, #6]
 8000912:	4927      	ldr	r1, [pc, #156]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3314      	adds	r3, #20
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000924:	7bfa      	ldrb	r2, [r7, #15]
 8000926:	4922      	ldr	r1, [pc, #136]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	440b      	add	r3, r1
 8000932:	3315      	adds	r3, #21
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	491d      	ldr	r1, [pc, #116]	; (80009b0 <LinkTimerBefore+0xbc>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3315      	adds	r3, #21
 8000948:	79ba      	ldrb	r2, [r7, #6]
 800094a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	4918      	ldr	r1, [pc, #96]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	3314      	adds	r3, #20
 800095c:	7bfa      	ldrb	r2, [r7, #15]
 800095e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000960:	79ba      	ldrb	r2, [r7, #6]
 8000962:	4913      	ldr	r1, [pc, #76]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	440b      	add	r3, r1
 800096e:	3314      	adds	r3, #20
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000974:	e014      	b.n	80009a0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LinkTimerBefore+0xbc>)
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	440b      	add	r3, r1
 8000984:	3315      	adds	r3, #21
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	4908      	ldr	r1, [pc, #32]	; (80009b0 <LinkTimerBefore+0xbc>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3314      	adds	r3, #20
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	701a      	strb	r2, [r3, #0]
  return;
 800099e:	bf00      	nop
}
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200000bc 	.word	0x200000bc
 80009b0:	2000002c 	.word	0x2000002c

080009b4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009be:	4b4e      	ldr	r3, [pc, #312]	; (8000af8 <linkTimer+0x144>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b06      	cmp	r3, #6
 80009c6:	d118      	bne.n	80009fa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009c8:	4b4b      	ldr	r3, [pc, #300]	; (8000af8 <linkTimer+0x144>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <linkTimer+0x148>)
 80009d0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80009d2:	4a49      	ldr	r2, [pc, #292]	; (8000af8 <linkTimer+0x144>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	4949      	ldr	r1, [pc, #292]	; (8000b00 <linkTimer+0x14c>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	3315      	adds	r3, #21
 80009e8:	2206      	movs	r2, #6
 80009ea:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009ec:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <linkTimer+0x150>)
 80009ee:	f04f 32ff 	mov.w	r2, #4294967295
 80009f2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	e078      	b.n	8000aec <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80009fa:	f000 f909 	bl	8000c10 <ReturnTimeElapsed>
 80009fe:	4603      	mov	r3, r0
 8000a00:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	493e      	ldr	r1, [pc, #248]	; (8000b00 <linkTimer+0x14c>)
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	6819      	ldr	r1, [r3, #0]
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	4419      	add	r1, r3
 8000a1a:	4839      	ldr	r0, [pc, #228]	; (8000b00 <linkTimer+0x14c>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	4403      	add	r3, r0
 8000a26:	3308      	adds	r3, #8
 8000a28:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	4934      	ldr	r1, [pc, #208]	; (8000b00 <linkTimer+0x14c>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <linkTimer+0x144>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4619      	mov	r1, r3
 8000a46:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <linkTimer+0x14c>)
 8000a48:	460b      	mov	r3, r1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	440b      	add	r3, r1
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	4413      	add	r3, r2
 8000a52:	3308      	adds	r3, #8
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d337      	bcc.n	8000acc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <linkTimer+0x144>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a62:	7b7a      	ldrb	r2, [r7, #13]
 8000a64:	4926      	ldr	r1, [pc, #152]	; (8000b00 <linkTimer+0x14c>)
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	440b      	add	r3, r1
 8000a70:	3315      	adds	r3, #21
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a76:	e013      	b.n	8000aa0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a78:	7b7a      	ldrb	r2, [r7, #13]
 8000a7a:	4921      	ldr	r1, [pc, #132]	; (8000b00 <linkTimer+0x14c>)
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	440b      	add	r3, r1
 8000a86:	3315      	adds	r3, #21
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a8c:	7b7a      	ldrb	r2, [r7, #13]
 8000a8e:	491c      	ldr	r1, [pc, #112]	; (8000b00 <linkTimer+0x14c>)
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	440b      	add	r3, r1
 8000a9a:	3315      	adds	r3, #21
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000aa0:	7b3b      	ldrb	r3, [r7, #12]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d00b      	beq.n	8000abe <linkTimer+0x10a>
 8000aa6:	7b3a      	ldrb	r2, [r7, #12]
 8000aa8:	4915      	ldr	r1, [pc, #84]	; (8000b00 <linkTimer+0x14c>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d2dc      	bcs.n	8000a78 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000abe:	7b7a      	ldrb	r2, [r7, #13]
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fecf 	bl	8000868 <LinkTimerAfter>
 8000aca:	e00f      	b.n	8000aec <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <linkTimer+0x144>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff0c 	bl	80008f4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <linkTimer+0x144>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <linkTimer+0x148>)
 8000ae4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <linkTimer+0x144>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000aec:	89fb      	ldrh	r3, [r7, #14]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000bc 	.word	0x200000bc
 8000afc:	200000bd 	.word	0x200000bd
 8000b00:	2000002c 	.word	0x2000002c
 8000b04:	200000c0 	.word	0x200000c0

08000b08 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	460a      	mov	r2, r1
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b18:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <UnlinkTimer+0xf8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d111      	bne.n	8000b48 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <UnlinkTimer+0xf8>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <UnlinkTimer+0xfc>)
 8000b2c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	4935      	ldr	r1, [pc, #212]	; (8000c08 <UnlinkTimer+0x100>)
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	440b      	add	r3, r1
 8000b3c:	3315      	adds	r3, #21
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <UnlinkTimer+0xf8>)
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e03e      	b.n	8000bc6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	492f      	ldr	r1, [pc, #188]	; (8000c08 <UnlinkTimer+0x100>)
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4413      	add	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	440b      	add	r3, r1
 8000b56:	3314      	adds	r3, #20
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b5c:	79fa      	ldrb	r2, [r7, #7]
 8000b5e:	492a      	ldr	r1, [pc, #168]	; (8000c08 <UnlinkTimer+0x100>)
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	440b      	add	r3, r1
 8000b6a:	3315      	adds	r3, #21
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b70:	79f9      	ldrb	r1, [r7, #7]
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	4824      	ldr	r0, [pc, #144]	; (8000c08 <UnlinkTimer+0x100>)
 8000b76:	460b      	mov	r3, r1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	440b      	add	r3, r1
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4403      	add	r3, r0
 8000b80:	3315      	adds	r3, #21
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b2d8      	uxtb	r0, r3
 8000b86:	4920      	ldr	r1, [pc, #128]	; (8000c08 <UnlinkTimer+0x100>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	440b      	add	r3, r1
 8000b92:	3315      	adds	r3, #21
 8000b94:	4602      	mov	r2, r0
 8000b96:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d013      	beq.n	8000bc6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b9e:	79f9      	ldrb	r1, [r7, #7]
 8000ba0:	7bba      	ldrb	r2, [r7, #14]
 8000ba2:	4819      	ldr	r0, [pc, #100]	; (8000c08 <UnlinkTimer+0x100>)
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	440b      	add	r3, r1
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	4403      	add	r3, r0
 8000bae:	3314      	adds	r3, #20
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b2d8      	uxtb	r0, r3
 8000bb4:	4914      	ldr	r1, [pc, #80]	; (8000c08 <UnlinkTimer+0x100>)
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	440b      	add	r3, r1
 8000bc0:	3314      	adds	r3, #20
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	490f      	ldr	r1, [pc, #60]	; (8000c08 <UnlinkTimer+0x100>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	330c      	adds	r3, #12
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <UnlinkTimer+0xf8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b06      	cmp	r3, #6
 8000be2:	d107      	bne.n	8000bf4 <UnlinkTimer+0xec>
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d104      	bne.n	8000bf4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <UnlinkTimer+0x104>)
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
}
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	200000bc 	.word	0x200000bc
 8000c04:	200000bd 	.word	0x200000bd
 8000c08:	2000002c 	.word	0x2000002c
 8000c0c:	200000c0 	.word	0x200000c0

08000c10 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1e:	d026      	beq.n	8000c6e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c20:	f7ff fe02 	bl	8000828 <ReadRtcSsrValue>
 8000c24:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d805      	bhi.n	8000c3c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e00a      	b.n	8000c52 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <ReturnTimeElapsed+0x74>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <ReturnTimeElapsed+0x78>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <ReturnTimeElapsed+0x7c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	40d3      	lsrs	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	e001      	b.n	8000c72 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	b29b      	uxth	r3, r3
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000c0 	.word	0x200000c0
 8000c84:	200001c6 	.word	0x200001c6
 8000c88:	200001c5 	.word	0x200001c5
 8000c8c:	200001c4 	.word	0x200001c4

08000c90 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d108      	bne.n	8000cb2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ca0:	f7ff fdc2 	bl	8000828 <ReadRtcSsrValue>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <RestartWakeupCounter+0xa8>)
 8000ca8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000caa:	2003      	movs	r0, #3
 8000cac:	f001 f897 	bl	8001dde <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000cb0:	e03e      	b.n	8000d30 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d803      	bhi.n	8000cc0 <RestartWakeupCounter+0x30>
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <RestartWakeupCounter+0xac>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d002      	beq.n	8000cc6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000cc6:	bf00      	nop
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f7      	beq.n	8000cc8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000cec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <RestartWakeupCounter+0xb4>)
 8000cf0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cf4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f001 f87f 	bl	8001dfa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <RestartWakeupCounter+0xb8>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	0c1b      	lsrs	r3, r3, #16
 8000d02:	041b      	lsls	r3, r3, #16
 8000d04:	88fa      	ldrh	r2, [r7, #6]
 8000d06:	4910      	ldr	r1, [pc, #64]	; (8000d48 <RestartWakeupCounter+0xb8>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d0c:	f7ff fd8c 	bl	8000828 <ReadRtcSsrValue>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <RestartWakeupCounter+0xa8>)
 8000d14:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d28:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d2a:	f3af 8000 	nop.w
  return ;
 8000d2e:	bf00      	nop
}
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000c0 	.word	0x200000c0
 8000d3c:	200001c4 	.word	0x200001c4
 8000d40:	200001c0 	.word	0x200001c0
 8000d44:	58000800 	.word	0x58000800
 8000d48:	40002800 	.word	0x40002800

08000d4c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <RescheduleTimerList+0x124>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d5e:	d108      	bne.n	8000d72 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d60:	bf00      	nop
 8000d62:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <RescheduleTimerList+0x128>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f7      	bne.n	8000d62 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <RescheduleTimerList+0x128>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <RescheduleTimerList+0x128>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d84:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <RescheduleTimerList+0x12c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	493b      	ldr	r1, [pc, #236]	; (8000e7c <RescheduleTimerList+0x130>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	3308      	adds	r3, #8
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000da0:	f7ff ff36 	bl	8000c10 <ReturnTimeElapsed>
 8000da4:	4603      	mov	r3, r0
 8000da6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d205      	bcs.n	8000dbc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <RescheduleTimerList+0x134>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e04d      	b.n	8000e58 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <RescheduleTimerList+0x138>)
 8000dc0:	8812      	ldrh	r2, [r2, #0]
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d906      	bls.n	8000ddc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <RescheduleTimerList+0x138>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <RescheduleTimerList+0x134>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e03d      	b.n	8000e58 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <RescheduleTimerList+0x134>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dec:	e034      	b.n	8000e58 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000dee:	7bfa      	ldrb	r2, [r7, #15]
 8000df0:	4922      	ldr	r1, [pc, #136]	; (8000e7c <RescheduleTimerList+0x130>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d20a      	bcs.n	8000e1c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	491c      	ldr	r1, [pc, #112]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	440b      	add	r3, r1
 8000e14:	3308      	adds	r3, #8
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e013      	b.n	8000e44 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	4917      	ldr	r1, [pc, #92]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	440b      	add	r3, r1
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4403      	add	r3, r0
 8000e40:	3308      	adds	r3, #8
 8000e42:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	440b      	add	r3, r1
 8000e52:	3315      	adds	r3, #21
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d1c7      	bne.n	8000dee <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e5e:	89bb      	ldrh	r3, [r7, #12]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff15 	bl	8000c90 <RestartWakeupCounter>

  return ;
 8000e66:	bf00      	nop
}
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40002800 	.word	0x40002800
 8000e74:	200001c0 	.word	0x200001c0
 8000e78:	200000bc 	.word	0x200000bc
 8000e7c:	2000002c 	.word	0x2000002c
 8000e80:	200000c4 	.word	0x200000c4
 8000e84:	200001c8 	.word	0x200001c8

08000e88 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8000e92:	617b      	str	r3, [r7, #20]
  return(result);
 8000e94:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e9c:	4b5f      	ldr	r3, [pc, #380]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	22ca      	movs	r2, #202	; 0xca
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2253      	movs	r2, #83	; 0x53
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000eb0:	4b5a      	ldr	r3, [pc, #360]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	4b58      	ldr	r3, [pc, #352]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ec2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000ec4:	4b56      	ldr	r3, [pc, #344]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ecc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ed0:	4954      	ldr	r1, [pc, #336]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	330c      	adds	r3, #12
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d172      	bne.n	8000fcc <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ee6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000eea:	494e      	ldr	r1, [pc, #312]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	440b      	add	r3, r1
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000efa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000efe:	4949      	ldr	r1, [pc, #292]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	440b      	add	r3, r1
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f10:	4b45      	ldr	r3, [pc, #276]	; (8001028 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d050      	beq.n	8000fbc <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f1a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f1e:	4941      	ldr	r1, [pc, #260]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	330d      	adds	r3, #13
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d126      	bne.n	8000f82 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fde4 	bl	8000b08 <UnlinkTimer>
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	f383 8810 	msr	PRIMASK, r3
}
 8000f4a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f4c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f50:	4934      	ldr	r1, [pc, #208]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f9d4 	bl	8001314 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	22ca      	movs	r2, #202	; 0xca
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2253      	movs	r2, #83	; 0x53
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8000f80:	e014      	b.n	8000fac <HW_TS_RTC_Wakeup_Handler+0x124>
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f383 8810 	msr	PRIMASK, r3
}
 8000f8c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f932 	bl	80011fc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	22ca      	movs	r2, #202	; 0xca
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2253      	movs	r2, #83	; 0x53
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	69b8      	ldr	r0, [r7, #24]
 8000fb6:	f000 fa35 	bl	8001424 <HW_TS_RTC_Int_AppNot>
 8000fba:	e025      	b.n	8001008 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000fbc:	f7ff fec6 	bl	8000d4c <RescheduleTimerList>
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f383 8810 	msr	PRIMASK, r3
}
 8000fca:	e01d      	b.n	8001008 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fcc:	bf00      	nop
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f7      	beq.n	8000fce <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ff2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000ff6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f383 8810 	msr	PRIMASK, r3
}
 8001006:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001012:	bf00      	nop
}
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001c0 	.word	0x200001c0
 8001020:	200000bc 	.word	0x200000bc
 8001024:	2000002c 	.word	0x2000002c
 8001028:	200000c4 	.word	0x200000c4
 800102c:	58000800 	.word	0x58000800

08001030 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800103c:	4a64      	ldr	r2, [pc, #400]	; (80011d0 <HW_TS_Init+0x1a0>)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <HW_TS_Init+0x1a0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	22ca      	movs	r2, #202	; 0xca
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
 800104c:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <HW_TS_Init+0x1a0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2253      	movs	r2, #83	; 0x53
 8001054:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001056:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HW_TS_Init+0x1a4>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HW_TS_Init+0x1a4>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001062:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <HW_TS_Init+0x1a4>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f1c3 0304 	rsb	r3, r3, #4
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <HW_TS_Init+0x1a8>)
 8001076:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001078:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <HW_TS_Init+0x1a4>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001080:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001084:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	fa92 f2a2 	rbit	r2, r2
 800108c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	2a00      	cmp	r2, #0
 8001096:	d101      	bne.n	800109c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001098:	2220      	movs	r2, #32
 800109a:	e003      	b.n	80010a4 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	fab2 f282 	clz	r2, r2
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	40d3      	lsrs	r3, r2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <HW_TS_Init+0x1ac>)
 80010ae:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80010b0:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <HW_TS_Init+0x1a4>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <HW_TS_Init+0x1b0>)
 80010c2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HW_TS_Init+0x1b0>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	4a44      	ldr	r2, [pc, #272]	; (80011dc <HW_TS_Init+0x1ac>)
 80010cc:	7812      	ldrb	r2, [r2, #0]
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010d6:	4a40      	ldr	r2, [pc, #256]	; (80011d8 <HW_TS_Init+0x1a8>)
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	40d3      	lsrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d904      	bls.n	80010f2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80010e8:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <HW_TS_Init+0x1b4>)
 80010ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ee:	801a      	strh	r2, [r3, #0]
 80010f0:	e003      	b.n	80010fa <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HW_TS_Init+0x1b4>)
 80010f8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010fe:	f7ff fb81 	bl	8000804 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001102:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001106:	f7ff fb69 	bl	80007dc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d143      	bne.n	8001198 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <HW_TS_Init+0x1b8>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HW_TS_Init+0x1bc>)
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800111e:	2300      	movs	r3, #0
 8001120:	77fb      	strb	r3, [r7, #31]
 8001122:	e00c      	b.n	800113e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001124:	7ffa      	ldrb	r2, [r7, #31]
 8001126:	4932      	ldr	r1, [pc, #200]	; (80011f0 <HW_TS_Init+0x1c0>)
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	440b      	add	r3, r1
 8001132:	330c      	adds	r3, #12
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	3301      	adds	r3, #1
 800113c:	77fb      	strb	r3, [r7, #31]
 800113e:	7ffb      	ldrb	r3, [r7, #31]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d9ef      	bls.n	8001124 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HW_TS_Init+0x1c4>)
 8001146:	2206      	movs	r2, #6
 8001148:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HW_TS_Init+0x1a0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HW_TS_Init+0x1a0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800115c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HW_TS_Init+0x1a0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HW_TS_Init+0x1a0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001172:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HW_TS_Init+0x1c8>)
 8001176:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800117a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800117c:	2003      	movs	r0, #3
 800117e:	f000 fe3c 	bl	8001dfa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HW_TS_Init+0x1a0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HW_TS_Init+0x1a0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	e00a      	b.n	80011ae <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HW_TS_Init+0x1a0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 fe18 	bl	8001dde <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HW_TS_Init+0x1a0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	22ff      	movs	r2, #255	; 0xff
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80011b8:	2200      	movs	r2, #0
 80011ba:	2103      	movs	r1, #3
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 fdcc 	bl	8001d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 fde3 	bl	8001d8e <HAL_NVIC_EnableIRQ>

  return;
 80011c8:	bf00      	nop
}
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200001c0 	.word	0x200001c0
 80011d4:	40002800 	.word	0x40002800
 80011d8:	200001c4 	.word	0x200001c4
 80011dc:	200001c5 	.word	0x200001c5
 80011e0:	200001c6 	.word	0x200001c6
 80011e4:	200001c8 	.word	0x200001c8
 80011e8:	200000c4 	.word	0x200000c4
 80011ec:	200000c0 	.word	0x200000c0
 80011f0:	2000002c 	.word	0x2000002c
 80011f4:	200000bc 	.word	0x200000bc
 80011f8:	58000800 	.word	0x58000800

080011fc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001206:	f3ef 8310 	mrs	r3, PRIMASK
 800120a:	60fb      	str	r3, [r7, #12]
  return(result);
 800120c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800120e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001214:	2003      	movs	r0, #3
 8001216:	f000 fdc8 	bl	8001daa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HW_TS_Stop+0x100>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	22ca      	movs	r2, #202	; 0xca
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
 8001224:	4b35      	ldr	r3, [pc, #212]	; (80012fc <HW_TS_Stop+0x100>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2253      	movs	r2, #83	; 0x53
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	4933      	ldr	r1, [pc, #204]	; (8001300 <HW_TS_Stop+0x104>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	330c      	adds	r3, #12
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d148      	bne.n	80012d8 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fc5c 	bl	8000b08 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HW_TS_Stop+0x108>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001256:	7cfb      	ldrb	r3, [r7, #19]
 8001258:	2b06      	cmp	r3, #6
 800125a:	d135      	bne.n	80012c8 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HW_TS_Stop+0x10c>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001268:	d108      	bne.n	800127c <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800126a:	bf00      	nop
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HW_TS_Stop+0x100>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f7      	bne.n	800126c <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <HW_TS_Stop+0x100>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HW_TS_Stop+0x100>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800128e:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001290:	bf00      	nop
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HW_TS_Stop+0x100>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f7      	beq.n	8001292 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HW_TS_Stop+0x100>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HW_TS_Stop+0x100>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80012b6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <HW_TS_Stop+0x110>)
 80012ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012be:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 fd9a 	bl	8001dfa <HAL_NVIC_ClearPendingIRQ>
 80012c6:	e007      	b.n	80012d8 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HW_TS_Stop+0x114>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	7cfa      	ldrb	r2, [r7, #19]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80012d4:	f7ff fd3a 	bl	8000d4c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HW_TS_Stop+0x100>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	22ff      	movs	r2, #255	; 0xff
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012e2:	2003      	movs	r0, #3
 80012e4:	f000 fd53 	bl	8001d8e <HAL_NVIC_EnableIRQ>
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f383 8810 	msr	PRIMASK, r3
}
 80012f2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012f4:	bf00      	nop
}
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200001c0 	.word	0x200001c0
 8001300:	2000002c 	.word	0x2000002c
 8001304:	200000bc 	.word	0x200000bc
 8001308:	40002800 	.word	0x40002800
 800130c:	58000800 	.word	0x58000800
 8001310:	200000bd 	.word	0x200000bd

08001314 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	493c      	ldr	r1, [pc, #240]	; (8001414 <HW_TS_Start+0x100>)
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	330c      	adds	r3, #12
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d103      	bne.n	8001340 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff5e 	bl	80011fc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001340:	f3ef 8310 	mrs	r3, PRIMASK
 8001344:	60fb      	str	r3, [r7, #12]
  return(result);
 8001346:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001348:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800134a:	b672      	cpsid	i
}
 800134c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800134e:	2003      	movs	r0, #3
 8001350:	f000 fd2b 	bl	8001daa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HW_TS_Start+0x104>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	22ca      	movs	r2, #202	; 0xca
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HW_TS_Start+0x104>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2253      	movs	r2, #83	; 0x53
 8001366:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001368:	79fa      	ldrb	r2, [r7, #7]
 800136a:	492a      	ldr	r1, [pc, #168]	; (8001414 <HW_TS_Start+0x100>)
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	330c      	adds	r3, #12
 8001378:	2202      	movs	r2, #2
 800137a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	4925      	ldr	r1, [pc, #148]	; (8001414 <HW_TS_Start+0x100>)
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	3308      	adds	r3, #8
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	4920      	ldr	r1, [pc, #128]	; (8001414 <HW_TS_Start+0x100>)
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3304      	adds	r3, #4
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fb04 	bl	80009b4 <linkTimer>
 80013ac:	4603      	mov	r3, r0
 80013ae:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HW_TS_Start+0x108>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HW_TS_Start+0x10c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	7c7a      	ldrb	r2, [r7, #17]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d002      	beq.n	80013c8 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 80013c2:	f7ff fcc3 	bl	8000d4c <RescheduleTimerList>
 80013c6:	e013      	b.n	80013f0 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	4912      	ldr	r1, [pc, #72]	; (8001414 <HW_TS_Start+0x100>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	3308      	adds	r3, #8
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	8a7b      	ldrh	r3, [r7, #18]
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	1ac9      	subs	r1, r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <HW_TS_Start+0x100>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4403      	add	r3, r0
 80013ec:	3308      	adds	r3, #8
 80013ee:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HW_TS_Start+0x104>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013fa:	2003      	movs	r0, #3
 80013fc:	f000 fcc7 	bl	8001d8e <HAL_NVIC_EnableIRQ>
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f383 8810 	msr	PRIMASK, r3
}
 800140a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800140c:	bf00      	nop
}
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2000002c 	.word	0x2000002c
 8001418:	200001c0 	.word	0x200001c0
 800141c:	200000bc 	.word	0x200000bc
 8001420:	200000bd 	.word	0x200000bd

08001424 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	460b      	mov	r3, r1
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4798      	blx	r3

  return;
 8001436:	bf00      	nop
}
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <LL_RCC_LSE_SetDriveCapability>:
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144e:	f023 0218 	bic.w	r2, r3, #24
 8001452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4313      	orrs	r3, r2
 800145a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_AHB2_GRP1_EnableClock>:
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4313      	orrs	r3, r2
 8001480:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4013      	ands	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 fa9a 	bl	80019d8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80014a4:	f7fe ffec 	bl	8000480 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a8:	f000 f810 	bl	80014cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014ac:	f000 f870 	bl	8001590 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80014b0:	f000 f88e 	bl	80015d0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f000 f8dc 	bl	8001670 <MX_GPIO_Init>
  MX_RF_Init();
 80014b8:	f000 f89e 	bl	80015f8 <MX_RF_Init>
  MX_RTC_Init();
 80014bc:	f000 f8a4 	bl	8001608 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80014c0:	f7fe ffec 	bl	800049c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80014c4:	f7ff f94b 	bl	800075e <MX_APPE_Process>
 80014c8:	e7fc      	b.n	80014c4 <main+0x28>
	...

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b09a      	sub	sp, #104	; 0x68
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2248      	movs	r2, #72	; 0x48
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 fb3c 	bl	8007b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014f2:	f000 fec3 	bl	800227c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ffa1 	bl	800143e <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <SystemClock_Config+0xc0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <SystemClock_Config+0xc0>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <SystemClock_Config+0xc0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001518:	2327      	movs	r3, #39	; 0x27
 800151a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800152c:	2301      	movs	r3, #1
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001530:	2340      	movs	r3, #64	; 0x40
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001534:	2300      	movs	r3, #0
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001538:	23a0      	movs	r3, #160	; 0xa0
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fa15 	bl	8002974 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001550:	f000 f8c6 	bl	80016e0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001554:	236f      	movs	r3, #111	; 0x6f
 8001556:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2101      	movs	r1, #1
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fd89 	bl	800308c <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001580:	f000 f8ae 	bl	80016e0 <Error_Handler>
  }
}
 8001584:	bf00      	nop
 8001586:	3768      	adds	r7, #104	; 0x68
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	58000400 	.word	0x58000400

08001590 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
 8001594:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2250      	movs	r2, #80	; 0x50
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f006 fadb 	bl	8007b58 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80015a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80015a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80015ae:	2300      	movs	r3, #0
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80015b2:	2310      	movs	r3, #16
 80015b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 f97c 	bl	80038b6 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80015c4:	f000 f88c 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80015c8:	bf00      	nop
 80015ca:	3750      	adds	r7, #80	; 0x50
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_IPCC_Init+0x20>)
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <MX_IPCC_Init+0x24>)
 80015d8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_IPCC_Init+0x20>)
 80015dc:	f000 fdc8 	bl	8002170 <HAL_IPCC_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80015e6:	f000 f87b 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200002f8 	.word	0x200002f8
 80015f4:	58000c00 	.word	0x58000c00

080015f8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_RTC_Init+0x60>)
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <MX_RTC_Init+0x64>)
 8001610:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_RTC_Init+0x60>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_RTC_Init+0x60>)
 800161a:	220f      	movs	r2, #15
 800161c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_RTC_Init+0x60>)
 8001620:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001624:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_RTC_Init+0x60>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_RTC_Init+0x60>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <MX_RTC_Init+0x60>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_RTC_Init+0x60>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800163e:	480a      	ldr	r0, [pc, #40]	; (8001668 <MX_RTC_Init+0x60>)
 8001640:	f002 fbc0 	bl	8003dc4 <HAL_RTC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800164a:	f000 f849 	bl	80016e0 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_RTC_Init+0x60>)
 8001654:	f002 fca4 	bl	8003fa0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800165e:	f000 f83f 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000334 	.word	0x20000334
 800166c:	40002800 	.word	0x40002800

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001684:	2004      	movs	r0, #4
 8001686:	f7ff fef0 	bl	800146a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff feed 	bl	800146a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f000 fd2d 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800169e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b6:	f000 fbaf 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f000 fba0 	bl	8001e18 <HAL_GPIO_Init>

}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x8>

080016ea <LL_RCC_EnableRTC>:
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_AHB3_GRP1_EnableClock>:
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001730:	68fb      	ldr	r3, [r7, #12]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800174c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4313      	orrs	r3, r2
 8001754:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001774:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001778:	f7ff ffc8 	bl	800170c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	202e      	movs	r0, #46	; 0x2e
 8001782:	f000 faea 	bl	8001d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001786:	202e      	movs	r0, #46	; 0x2e
 8001788:	f000 fb01 	bl	8001d8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <HAL_IPCC_MspInit+0x44>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d113      	bne.n	80017ca <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80017a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80017a6:	f7ff ffb1 	bl	800170c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	202c      	movs	r0, #44	; 0x2c
 80017b0:	f000 fad3 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80017b4:	202c      	movs	r0, #44	; 0x2c
 80017b6:	f000 faea 	bl	8001d8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	202d      	movs	r0, #45	; 0x2d
 80017c0:	f000 facb 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80017c4:	202d      	movs	r0, #45	; 0x2d
 80017c6:	f000 fae2 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	58000c00 	.word	0x58000c00

080017d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b096      	sub	sp, #88	; 0x58
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	2250      	movs	r2, #80	; 0x50
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f006 f9b5 	bl	8007b58 <memset>
  if(hrtc->Instance==RTC)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <HAL_RTC_MspInit+0x64>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d11d      	bne.n	8001834 <HAL_RTC_MspInit+0x5c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001802:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	4618      	mov	r0, r3
 800180a:	f002 f854 	bl	80038b6 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001814:	f7ff ff64 	bl	80016e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001818:	f7ff ff67 	bl	80016ea <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800181c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001820:	f7ff ff8d 	bl	800173e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2003      	movs	r0, #3
 800182a:	f000 fa96 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800182e:	2003      	movs	r0, #3
 8001830:	f000 faad 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	3758      	adds	r7, #88	; 0x58
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40002800 	.word	0x40002800

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f8fe 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001898:	f7ff faf6 	bl	8000e88 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80018a4:	f005 fd72 	bl	800738c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80018b0:	f005 fda4 	bl	80073fc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80018bc:	f000 fc34 	bl	8002128 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <SystemInit+0x98>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a23      	ldr	r2, [pc, #140]	; (800195c <SystemInit+0x98>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80018f0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <SystemInit+0x9c>)
 80018fe:	4013      	ands	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800190e:	f023 0305 	bic.w	r3, r3, #5
 8001912:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800191e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <SystemInit+0xa0>)
 8001930:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <SystemInit+0xa0>)
 8001938:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	faf6fefb 	.word	0xfaf6fefb
 8001964:	22041000 	.word	0x22041000

08001968 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001968:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800196a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196c:	3304      	adds	r3, #4

0800196e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001970:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001972:	d3f9      	bcc.n	8001968 <CopyDataInit>
  bx lr
 8001974:	4770      	bx	lr

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001976:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001978:	3004      	adds	r0, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800197a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>
  bx lr
 800197e:	4770      	bx	lr

08001980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001982:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001984:	f7ff ff9e 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <LoopForever+0x8>)
 800198a:	490c      	ldr	r1, [pc, #48]	; (80019bc <LoopForever+0xc>)
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <LoopForever+0x10>)
 800198e:	2300      	movs	r3, #0
 8001990:	f7ff ffed 	bl	800196e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <LoopForever+0x14>)
 8001996:	490c      	ldr	r1, [pc, #48]	; (80019c8 <LoopForever+0x18>)
 8001998:	2300      	movs	r3, #0
 800199a:	f7ff ffee 	bl	800197a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800199e:	480b      	ldr	r0, [pc, #44]	; (80019cc <LoopForever+0x1c>)
 80019a0:	490b      	ldr	r1, [pc, #44]	; (80019d0 <LoopForever+0x20>)
 80019a2:	2300      	movs	r3, #0
 80019a4:	f7ff ffe9 	bl	800197a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019a8:	f006 f8a4 	bl	8007af4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80019ac:	f7ff fd76 	bl	800149c <main>

080019b0 <LoopForever>:

LoopForever:
  b LoopForever
 80019b0:	e7fe      	b.n	80019b0 <LoopForever>
 80019b2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80019b4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019b8:	20000004 	.word	0x20000004
 80019bc:	2000002c 	.word	0x2000002c
 80019c0:	08007e0c 	.word	0x08007e0c
  INIT_BSS _sbss, _ebss
 80019c4:	200001a4 	.word	0x200001a4
 80019c8:	20000360 	.word	0x20000360
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80019cc:	200301e0 	.word	0x200301e0
 80019d0:	20030a57 	.word	0x20030a57

080019d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC1_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_Init+0x3c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_Init+0x3c>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ee:	2003      	movs	r0, #3
 80019f0:	f000 f9a8 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f4:	200f      	movs	r0, #15
 80019f6:	f000 f80f 	bl	8001a18 <HAL_InitTick>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	e001      	b.n	8001a0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a06:	f7ff feb3 	bl	8001770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	58004000 	.word	0x58004000

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_InitTick+0x6c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d024      	beq.n	8001a76 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a2c:	f001 fcda 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_InitTick+0x6c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f9be 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10f      	bne.n	8001a70 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	d809      	bhi.n	8001a6a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a56:	2200      	movs	r2, #0
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5e:	f000 f97c 	bl	8001d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_InitTick+0x70>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e004      	b.n	8001a7a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	2000000c 	.word	0x2000000c
 8001ab0:	20000358 	.word	0x20000358

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000358 	.word	0x20000358

08001acc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTickPrio+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	; (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	db12      	blt.n	8001bbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <__NVIC_DisableIRQ+0x44>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8001baa:	3320      	adds	r3, #32
 8001bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb0:	f3bf 8f4f 	dsb	sy
}
 8001bb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bb6:	f3bf 8f6f 	isb	sy
}
 8001bba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	db0c      	blt.n	8001bf8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4907      	ldr	r1, [pc, #28]	; (8001c04 <__NVIC_SetPendingIRQ+0x38>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2001      	movs	r0, #1
 8001bee:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf2:	3340      	adds	r3, #64	; 0x40
 8001bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100

08001c08 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0c      	blt.n	8001c34 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4907      	ldr	r1, [pc, #28]	; (8001c40 <__NVIC_ClearPendingIRQ+0x38>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2e:	3360      	adds	r3, #96	; 0x60
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000e100 	.word	0xe000e100

08001c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0a      	blt.n	8001c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	490c      	ldr	r1, [pc, #48]	; (8001c90 <__NVIC_SetPriority+0x4c>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	440b      	add	r3, r1
 8001c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c6c:	e00a      	b.n	8001c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <__NVIC_SetPriority+0x50>)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	0112      	lsls	r2, r2, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	440b      	add	r3, r1
 8001c82:	761a      	strb	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	bf28      	it	cs
 8001cb6:	2304      	movcs	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d902      	bls.n	8001cc8 <NVIC_EncodePriority+0x30>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	e000      	b.n	8001cca <NVIC_EncodePriority+0x32>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43d9      	mvns	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	4313      	orrs	r3, r2
         );
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff8e 	bl	8001c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fec9 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d68:	f7ff fee0 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7ff ff90 	bl	8001c98 <NVIC_EncodePriority>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff5f 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fed3 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fee3 	bl	8001b84 <__NVIC_DisableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff96 	bl	8001d00 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff feed 	bl	8001bcc <__NVIC_SetPendingIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fefd 	bl	8001c08 <__NVIC_ClearPendingIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e14c      	b.n	80020c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 813e 	beq.w	80020bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d005      	beq.n	8001e58 <HAL_GPIO_Init+0x40>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d130      	bne.n	8001eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8e:	2201      	movs	r2, #1
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	f003 0201 	and.w	r2, r3, #1
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d017      	beq.n	8001ef6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d123      	bne.n	8001f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	6939      	ldr	r1, [r7, #16]
 8001f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0203 	and.w	r2, r3, #3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8098 	beq.w	80020bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f8c:	4a54      	ldr	r2, [pc, #336]	; (80020e0 <HAL_GPIO_Init+0x2c8>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fb6:	d019      	beq.n	8001fec <HAL_GPIO_Init+0x1d4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a4a      	ldr	r2, [pc, #296]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_GPIO_Init+0x1d0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a49      	ldr	r2, [pc, #292]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_GPIO_Init+0x1cc>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a48      	ldr	r2, [pc, #288]	; (80020ec <HAL_GPIO_Init+0x2d4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_Init+0x1c8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a47      	ldr	r2, [pc, #284]	; (80020f0 <HAL_GPIO_Init+0x2d8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_GPIO_Init+0x1c4>
 8001fd8:	2304      	movs	r3, #4
 8001fda:	e008      	b.n	8001fee <HAL_GPIO_Init+0x1d6>
 8001fdc:	2307      	movs	r3, #7
 8001fde:	e006      	b.n	8001fee <HAL_GPIO_Init+0x1d6>
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e004      	b.n	8001fee <HAL_GPIO_Init+0x1d6>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x1d6>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_GPIO_Init+0x1d6>
 8001fec:	2300      	movs	r3, #0
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	f002 0203 	and.w	r2, r2, #3
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ffe:	4938      	ldr	r1, [pc, #224]	; (80020e0 <HAL_GPIO_Init+0x2c8>)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_GPIO_Init+0x2dc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002030:	4a30      	ldr	r2, [pc, #192]	; (80020f4 <HAL_GPIO_Init+0x2dc>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_GPIO_Init+0x2dc>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800205a:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_GPIO_Init+0x2dc>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_GPIO_Init+0x2dc>)
 8002062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002086:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_GPIO_Init+0x2dc>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_GPIO_Init+0x2dc>)
 8002090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020b4:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <HAL_GPIO_Init+0x2dc>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f47f aeab 	bne.w	8001e28 <HAL_GPIO_Init+0x10>
  }
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40010000 	.word	0x40010000
 80020e4:	48000400 	.word	0x48000400
 80020e8:	48000800 	.word	0x48000800
 80020ec:	48000c00 	.word	0x48000c00
 80020f0:	48001000 	.word	0x48001000
 80020f4:	58000800 	.word	0x58000800

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002114:	e002      	b.n	800211c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_HSEM_IRQHandler+0x30>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_HSEM_IRQHandler+0x30>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	43db      	mvns	r3, r3
 800213c:	4906      	ldr	r1, [pc, #24]	; (8002158 <HAL_HSEM_IRQHandler+0x30>)
 800213e:	4013      	ands	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <HAL_HSEM_IRQHandler+0x30>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f807 	bl	800215c <HAL_HSEM_FreeCallback>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	58001500 	.word	0x58001500

0800215c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01e      	beq.n	80021c0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_IPCC_Init+0x60>)
 8002184:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fafc 	bl	8001790 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002198:	68b8      	ldr	r0, [r7, #8]
 800219a:	f000 f85b 	bl	8002254 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f82c 	bl	8002208 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80021be:	e001      	b.n	80021c4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	58000c00 	.word	0x58000c00

080021d4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e00f      	b.n	8002236 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	4a0b      	ldr	r2, [pc, #44]	; (800224c <IPCC_SetDefaultCallbacks+0x44>)
 8002220:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3306      	adds	r3, #6
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	4a08      	ldr	r2, [pc, #32]	; (8002250 <IPCC_SetDefaultCallbacks+0x48>)
 800222e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3301      	adds	r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b05      	cmp	r3, #5
 800223a:	d9ec      	bls.n	8002216 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	080021d5 	.word	0x080021d5
 8002250:	080021ef 	.word	0x080021ef

08002254 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002268:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223f      	movs	r2, #63	; 0x3f
 800226e:	609a      	str	r2, [r3, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	58000400 	.word	0x58000400

0800229c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	58000400 	.word	0x58000400

080022b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ca:	d101      	bne.n	80022d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_RCC_HSE_Enable>:
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_RCC_HSE_Disable>:
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_RCC_HSE_IsReady>:
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800232a:	d101      	bne.n	8002330 <LL_RCC_HSE_IsReady+0x18>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <LL_RCC_HSE_IsReady+0x1a>
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_RCC_HSI_Enable>:
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800234a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_RCC_HSI_Disable>:
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_RCC_HSI_IsReady>:
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238a:	d101      	bne.n	8002390 <LL_RCC_HSI_IsReady+0x18>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <LL_RCC_HSI_IsReady+0x1a>
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_HSI_SetCalibTrimming>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_RCC_HSI48_Enable>:
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_RCC_HSI48_Disable>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_RCC_HSI48_IsReady>:
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d101      	bne.n	8002422 <LL_RCC_HSI48_IsReady+0x18>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <LL_RCC_HSI48_IsReady+0x1a>
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_RCC_LSE_Enable>:
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_RCC_LSE_Disable>:
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_RCC_LSE_EnableBypass>:
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_RCC_LSE_DisableBypass>:
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_RCC_LSE_IsReady>:
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d101      	bne.n	80024ce <LL_RCC_LSE_IsReady+0x18>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_RCC_LSE_IsReady+0x1a>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_RCC_LSI1_Enable>:
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_RCC_LSI1_Disable>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_RCC_LSI1_IsReady>:
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d101      	bne.n	8002536 <LL_RCC_LSI1_IsReady+0x18>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <LL_RCC_LSI1_IsReady+0x1a>
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_RCC_LSI2_Enable>:
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_RCC_LSI2_Disable>:
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_RCC_LSI2_IsReady>:
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b08      	cmp	r3, #8
 8002598:	d101      	bne.n	800259e <LL_RCC_LSI2_IsReady+0x18>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_RCC_LSI2_IsReady+0x1a>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_RCC_LSI2_SetTrimming>:
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_RCC_MSI_Enable>:
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_RCC_MSI_Disable>:
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_RCC_MSI_IsReady>:
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d101      	bne.n	800262a <LL_RCC_MSI_IsReady+0x16>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_RCC_MSI_IsReady+0x18>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_RCC_MSI_SetRange>:
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800263e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_RCC_MSI_GetRange>:
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2bb0      	cmp	r3, #176	; 0xb0
 8002674:	d901      	bls.n	800267a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002676:	23b0      	movs	r3, #176	; 0xb0
 8002678:	607b      	str	r3, [r7, #4]
  return msiRange;
 800267a:	687b      	ldr	r3, [r7, #4]
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_RCC_SetSysClkSource>:
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 0203 	bic.w	r2, r3, #3
 80026c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_RCC_GetSysClkSource>:
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_RCC_SetAHBPrescaler>:
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80026fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <LL_C2_RCC_SetAHBPrescaler>:
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800272a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_RCC_SetAHB4Prescaler>:
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002752:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002756:	f023 020f 	bic.w	r2, r3, #15
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_RCC_SetAPB1Prescaler>:
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	608b      	str	r3, [r1, #8]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_RCC_SetAPB2Prescaler>:
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_RCC_GetAHBPrescaler>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_RCC_GetAHB4Prescaler>:
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_RCC_PLL_Enable>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_RCC_PLL_Disable>:
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002828:	6013      	str	r3, [r2, #0]
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_RCC_PLL_IsReady>:
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002846:	d101      	bne.n	800284c <LL_RCC_PLL_IsReady+0x18>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <LL_RCC_PLL_IsReady+0x1a>
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_RCC_PLL_GetN>:
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_RCC_PLL_GetR>:
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_RCC_PLL_GetDivider>:
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_RCC_PLL_GetMainSource>:
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0303 	and.w	r3, r3, #3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_RCC_IsActiveFlag_HPRE>:
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d101      	bne.n	80028d2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f2:	d101      	bne.n	80028f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d101      	bne.n	800291e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800293c:	d101      	bne.n	8002942 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002960:	d101      	bne.n	8002966 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b08d      	sub	sp, #52	; 0x34
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e37e      	b.n	8003084 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8092 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002994:	f7ff fea1 	bl	80026da <LL_RCC_GetSysClkSource>
 8002998:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299a:	f7ff ff82 	bl	80028a2 <LL_RCC_PLL_GetMainSource>
 800299e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3e>
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d14c      	bne.n	8002a46 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d149      	bne.n	8002a46 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029b2:	f7ff fe2f 	bl	8002614 <LL_RCC_MSI_IsReady>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_OscConfig+0x54>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e35d      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80029cc:	f7ff fe47 	bl	800265e <LL_RCC_MSI_GetRange>
 80029d0:	4603      	mov	r3, r0
 80029d2:	429c      	cmp	r4, r3
 80029d4:	d914      	bls.n	8002a00 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fd16 	bl	800340c <RCC_SetFlashLatencyFromMSIRange>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e34c      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fe21 	bl	8002636 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fe45 	bl	8002688 <LL_RCC_MSI_SetCalibTrimming>
 80029fe:	e013      	b.n	8002a28 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fe16 	bl	8002636 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fe3a 	bl	8002688 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fcf7 	bl	800340c <RCC_SetFlashLatencyFromMSIRange>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e32d      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a28:	f000 fcdc 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4ab3      	ldr	r2, [pc, #716]	; (8002cfc <HAL_RCC_OscConfig+0x388>)
 8002a30:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a32:	4bb3      	ldr	r3, [pc, #716]	; (8002d00 <HAL_RCC_OscConfig+0x38c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe ffee 	bl	8001a18 <HAL_InitTick>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d039      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e31e      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01e      	beq.n	8002a8c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a4e:	f7ff fdc3 	bl	80025d8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a52:	f7ff f82f 	bl	8001ab4 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a5a:	f7ff f82b 	bl	8001ab4 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e30b      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a6c:	f7ff fdd2 	bl	8002614 <LL_RCC_MSI_IsReady>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f1      	beq.n	8002a5a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fddb 	bl	8002636 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fdff 	bl	8002688 <LL_RCC_MSI_SetCalibTrimming>
 8002a8a:	e015      	b.n	8002ab8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a8c:	f7ff fdb3 	bl	80025f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a90:	f7ff f810 	bl	8001ab4 <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a98:	f7ff f80c 	bl	8001ab4 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e2ec      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002aaa:	f7ff fdb3 	bl	8002614 <LL_RCC_MSI_IsReady>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f1      	bne.n	8002a98 <HAL_RCC_OscConfig+0x124>
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ab6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d04e      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac4:	f7ff fe09 	bl	80026da <LL_RCC_GetSysClkSource>
 8002ac8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aca:	f7ff feea 	bl	80028a2 <LL_RCC_PLL_GetMainSource>
 8002ace:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d005      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x16e>
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d10d      	bne.n	8002af8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d10a      	bne.n	8002af8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae2:	f7ff fc19 	bl	8002318 <LL_RCC_HSE_IsReady>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d039      	beq.n	8002b60 <HAL_RCC_OscConfig+0x1ec>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d135      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e2c5      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0x194>
 8002b02:	f7ff fbeb 	bl	80022dc <LL_RCC_HSE_Enable>
 8002b06:	e001      	b.n	8002b0c <HAL_RCC_OscConfig+0x198>
 8002b08:	f7ff fbf7 	bl	80022fa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe ffce 	bl	8001ab4 <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe ffca 	bl	8001ab4 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e2aa      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b2e:	f7ff fbf3 	bl	8002318 <LL_RCC_HSE_IsReady>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f1      	beq.n	8002b1c <HAL_RCC_OscConfig+0x1a8>
 8002b38:	e013      	b.n	8002b62 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7fe ffbb 	bl	8001ab4 <HAL_GetTick>
 8002b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b42:	f7fe ffb7 	bl	8001ab4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b64      	cmp	r3, #100	; 0x64
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e297      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b54:	f7ff fbe0 	bl	8002318 <LL_RCC_HSE_IsReady>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f1      	bne.n	8002b42 <HAL_RCC_OscConfig+0x1ce>
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d051      	beq.n	8002c12 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	f7ff fdb4 	bl	80026da <LL_RCC_GetSysClkSource>
 8002b72:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b74:	f7ff fe95 	bl	80028a2 <LL_RCC_PLL_GetMainSource>
 8002b78:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_OscConfig+0x218>
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d113      	bne.n	8002bae <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d110      	bne.n	8002bae <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8c:	f7ff fbf4 	bl	8002378 <LL_RCC_HSI_IsReady>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x22e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e270      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fbf8 	bl	800239c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bac:	e031      	b.n	8002c12 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d019      	beq.n	8002bea <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb6:	f7ff fbc1 	bl	800233c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe ff7b 	bl	8001ab4 <HAL_GetTick>
 8002bbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc2:	f7fe ff77 	bl	8001ab4 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e257      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002bd4:	f7ff fbd0 	bl	8002378 <LL_RCC_HSI_IsReady>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f1      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fbda 	bl	800239c <LL_RCC_HSI_SetCalibTrimming>
 8002be8:	e013      	b.n	8002c12 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	f7ff fbb6 	bl	800235a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe ff61 	bl	8001ab4 <HAL_GetTick>
 8002bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf6:	f7fe ff5d 	bl	8001ab4 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e23d      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c08:	f7ff fbb6 	bl	8002378 <LL_RCC_HSI_IsReady>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f1      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80a3 	beq.w	8002d72 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d076      	beq.n	8002d22 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d046      	beq.n	8002cce <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002c40:	f7ff fc6d 	bl	800251e <LL_RCC_LSI1_IsReady>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d113      	bne.n	8002c72 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002c4a:	f7ff fc46 	bl	80024da <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c4e:	f7fe ff31 	bl	8001ab4 <HAL_GetTick>
 8002c52:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c56:	f7fe ff2d 	bl	8001ab4 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e20d      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c68:	f7ff fc59 	bl	800251e <LL_RCC_LSI1_IsReady>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f1      	beq.n	8002c56 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002c72:	f7ff fc66 	bl	8002542 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe ff1d 	bl	8001ab4 <HAL_GetTick>
 8002c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c7e:	f7fe ff19 	bl	8001ab4 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e1f9      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c90:	f7ff fc79 	bl	8002586 <LL_RCC_LSI2_IsReady>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f1      	beq.n	8002c7e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fc83 	bl	80025aa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002ca4:	f7ff fc2a 	bl	80024fc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe ff04 	bl	8001ab4 <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cb0:	f7fe ff00 	bl	8001ab4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1e0      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002cc2:	f7ff fc2c 	bl	800251e <LL_RCC_LSI1_IsReady>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f1      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x33c>
 8002ccc:	e051      	b.n	8002d72 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002cce:	f7ff fc04 	bl	80024da <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe feef 	bl	8001ab4 <HAL_GetTick>
 8002cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cda:	f7fe feeb 	bl	8001ab4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1cb      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002cec:	f7ff fc17 	bl	800251e <LL_RCC_LSI1_IsReady>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f1      	beq.n	8002cda <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002cf6:	f7ff fc35 	bl	8002564 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002cfa:	e00c      	b.n	8002d16 <HAL_RCC_OscConfig+0x3a2>
 8002cfc:	20000004 	.word	0x20000004
 8002d00:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d04:	f7fe fed6 	bl	8001ab4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1b6      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d16:	f7ff fc36 	bl	8002586 <LL_RCC_LSI2_IsReady>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f1      	bne.n	8002d04 <HAL_RCC_OscConfig+0x390>
 8002d20:	e027      	b.n	8002d72 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002d22:	f7ff fc1f 	bl	8002564 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fe fec5 	bl	8001ab4 <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d2e:	f7fe fec1 	bl	8001ab4 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1a1      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d40:	f7ff fc21 	bl	8002586 <LL_RCC_LSI2_IsReady>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f1      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002d4a:	f7ff fbd7 	bl	80024fc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe feb1 	bl	8001ab4 <HAL_GetTick>
 8002d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d56:	f7fe fead 	bl	8001ab4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e18d      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d68:	f7ff fbd9 	bl	800251e <LL_RCC_LSI1_IsReady>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f1      	bne.n	8002d56 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d05b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7e:	4bb5      	ldr	r3, [pc, #724]	; (8003054 <HAL_RCC_OscConfig+0x6e0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d114      	bne.n	8002db4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d8a:	f7ff fa77 	bl	800227c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fe91 	bl	8001ab4 <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7fe fe8d 	bl	8001ab4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e16d      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da8:	4baa      	ldr	r3, [pc, #680]	; (8003054 <HAL_RCC_OscConfig+0x6e0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x44e>
 8002dbc:	f7ff fb37 	bl	800242e <LL_RCC_LSE_Enable>
 8002dc0:	e00c      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d104      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x460>
 8002dca:	f7ff fb52 	bl	8002472 <LL_RCC_LSE_EnableBypass>
 8002dce:	f7ff fb2e 	bl	800242e <LL_RCC_LSE_Enable>
 8002dd2:	e003      	b.n	8002ddc <HAL_RCC_OscConfig+0x468>
 8002dd4:	f7ff fb3c 	bl	8002450 <LL_RCC_LSE_Disable>
 8002dd8:	f7ff fb5c 	bl	8002494 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d014      	beq.n	8002e0e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe fe66 	bl	8001ab4 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dec:	f7fe fe62 	bl	8001ab4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e140      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e02:	f7ff fb58 	bl	80024b6 <LL_RCC_LSE_IsReady>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ef      	beq.n	8002dec <HAL_RCC_OscConfig+0x478>
 8002e0c:	e013      	b.n	8002e36 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fe51 	bl	8001ab4 <HAL_GetTick>
 8002e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe fe4d 	bl	8001ab4 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e12b      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e2c:	f7ff fb43 	bl	80024b6 <LL_RCC_LSE_IsReady>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1ef      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d02c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d014      	beq.n	8002e74 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e4a:	f7ff fabc 	bl	80023c6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7fe fe31 	bl	8001ab4 <HAL_GetTick>
 8002e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e56:	f7fe fe2d 	bl	8001ab4 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e10d      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002e68:	f7ff facf 	bl	800240a <LL_RCC_HSI48_IsReady>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f1      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4e2>
 8002e72:	e013      	b.n	8002e9c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e74:	f7ff fab8 	bl	80023e8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe fe1c 	bl	8001ab4 <HAL_GetTick>
 8002e7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e80:	f7fe fe18 	bl	8001ab4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0f8      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002e92:	f7ff faba 	bl	800240a <LL_RCC_HSI48_IsReady>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f1      	bne.n	8002e80 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80ee 	beq.w	8003082 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea6:	f7ff fc18 	bl	80026da <LL_RCC_GetSysClkSource>
 8002eaa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f040 80af 	bne.w	800301c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f003 0203 	and.w	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d123      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d114      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d10d      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d05d      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d058      	beq.n	8002fcc <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0ab      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f2c:	f7ff fc73 	bl	8002816 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f30:	f7fe fdc0 	bl	8001ab4 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe fdbc 	bl	8001ab4 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e09c      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ef      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <HAL_RCC_OscConfig+0x6e4>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f70:	0212      	lsls	r2, r2, #8
 8002f72:	4311      	orrs	r1, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f78:	4311      	orrs	r1, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f84:	430a      	orrs	r2, r1
 8002f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f8e:	f7ff fc33 	bl	80027f8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa2:	f7fe fd87 	bl	8001ab4 <HAL_GetTick>
 8002fa6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe fd83 	bl	8001ab4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e063      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0ef      	beq.n	8002faa <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fca:	e05a      	b.n	8003082 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e059      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d151      	bne.n	8003082 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fde:	f7ff fc0b 	bl	80027f8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ff2:	f7fe fd5f 	bl	8001ab4 <HAL_GetTick>
 8002ff6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7fe fd5b 	bl	8001ab4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e03b      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ef      	beq.n	8002ffa <HAL_RCC_OscConfig+0x686>
 800301a:	e032      	b.n	8003082 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d02d      	beq.n	800307e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	f7ff fbf8 	bl	8002816 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003030:	f023 0303 	bic.w	r3, r3, #3
 8003034:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003040:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003048:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe fd33 	bl	8001ab4 <HAL_GetTick>
 800304e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003050:	e00d      	b.n	800306e <HAL_RCC_OscConfig+0x6fa>
 8003052:	bf00      	nop
 8003054:	58000400 	.word	0x58000400
 8003058:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fd2a 	bl	8001ab4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ef      	bne.n	800305c <HAL_RCC_OscConfig+0x6e8>
 800307c:	e001      	b.n	8003082 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3734      	adds	r7, #52	; 0x34
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}

0800308c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e12d      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b98      	ldr	r3, [pc, #608]	; (8003304 <HAL_RCC_ClockConfig+0x278>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d91b      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b95      	ldr	r3, [pc, #596]	; (8003304 <HAL_RCC_ClockConfig+0x278>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	4993      	ldr	r1, [pc, #588]	; (8003304 <HAL_RCC_ClockConfig+0x278>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030be:	f7fe fcf9 	bl	8001ab4 <HAL_GetTick>
 80030c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030c6:	f7fe fcf5 	bl	8001ab4 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e111      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d8:	4b8a      	ldr	r3, [pc, #552]	; (8003304 <HAL_RCC_ClockConfig+0x278>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d1ef      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d016      	beq.n	8003120 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fafb 	bl	80026f2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030fc:	f7fe fcda 	bl	8001ab4 <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003104:	f7fe fcd6 	bl	8001ab4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e0f2      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003116:	f7ff fbd0 	bl	80028ba <LL_RCC_IsActiveFlag_HPRE>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f1      	beq.n	8003104 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d016      	beq.n	800315a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff faf2 	bl	800271a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003136:	f7fe fcbd 	bl	8001ab4 <HAL_GetTick>
 800313a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800313e:	f7fe fcb9 	bl	8001ab4 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0d5      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003150:	f7ff fbc5 	bl	80028de <LL_RCC_IsActiveFlag_C2HPRE>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f1      	beq.n	800313e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff faeb 	bl	8002746 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003170:	f7fe fca0 	bl	8001ab4 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003178:	f7fe fc9c 	bl	8001ab4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0b8      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800318a:	f7ff fbbb 	bl	8002904 <LL_RCC_IsActiveFlag_SHDHPRE>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f1      	beq.n	8003178 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fae5 	bl	8002774 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031aa:	f7fe fc83 	bl	8001ab4 <HAL_GetTick>
 80031ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031b2:	f7fe fc7f 	bl	8001ab4 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e09b      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031c4:	f7ff fbb1 	bl	800292a <LL_RCC_IsActiveFlag_PPRE1>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f1      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d017      	beq.n	800320a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fadb 	bl	800279c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031e6:	f7fe fc65 	bl	8001ab4 <HAL_GetTick>
 80031ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031ee:	f7fe fc61 	bl	8001ab4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e07d      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003200:	f7ff fba5 	bl	800294e <LL_RCC_IsActiveFlag_PPRE2>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f1      	beq.n	80031ee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d043      	beq.n	800329e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d106      	bne.n	800322c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800321e:	f7ff f87b 	bl	8002318 <LL_RCC_HSE_IsReady>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d11e      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e067      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d106      	bne.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003234:	f7ff fafe 	bl	8002834 <LL_RCC_PLL_IsReady>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d113      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e05c      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800324a:	f7ff f9e3 	bl	8002614 <LL_RCC_MSI_IsReady>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e051      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003258:	f7ff f88e 	bl	8002378 <LL_RCC_HSI_IsReady>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e04a      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fa21 	bl	80026b2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003270:	f7fe fc20 	bl	8001ab4 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	e00a      	b.n	800328e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003278:	f7fe fc1c 	bl	8001ab4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e036      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	f7ff fa24 	bl	80026da <LL_RCC_GetSysClkSource>
 8003292:	4602      	mov	r2, r0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	429a      	cmp	r2, r3
 800329c:	d1ec      	bne.n	8003278 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800329e:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_RCC_ClockConfig+0x278>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d21b      	bcs.n	80032e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ac:	4b15      	ldr	r3, [pc, #84]	; (8003304 <HAL_RCC_ClockConfig+0x278>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f023 0207 	bic.w	r2, r3, #7
 80032b4:	4913      	ldr	r1, [pc, #76]	; (8003304 <HAL_RCC_ClockConfig+0x278>)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fe fbfa 	bl	8001ab4 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032c4:	f7fe fbf6 	bl	8001ab4 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e012      	b.n	80032fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_ClockConfig+0x278>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1ef      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80032e4:	f000 f87e 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_RCC_ClockConfig+0x27c>)
 80032ec:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80032ee:	f7fe fbed 	bl	8001acc <HAL_GetTickPrio>
 80032f2:	4603      	mov	r3, r0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fb8f 	bl	8001a18 <HAL_InitTick>
 80032fa:	4603      	mov	r3, r0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	58004000 	.word	0x58004000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	f7ff f9e2 	bl	80026da <LL_RCC_GetSysClkSource>
 8003316:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800331e:	f7ff f99e 	bl	800265e <LL_RCC_MSI_GetRange>
 8003322:	4603      	mov	r3, r0
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e04b      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b04      	cmp	r3, #4
 8003338:	d102      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e045      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d10a      	bne.n	800335c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003346:	f7fe ffb7 	bl	80022b8 <LL_RCC_HSE_IsEnabledDiv2>
 800334a:	4603      	mov	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003350:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e03a      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e037      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800335c:	f7ff faa1 	bl	80028a2 <LL_RCC_PLL_GetMainSource>
 8003360:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d003      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x64>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x6a>
 800336e:	e00d      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003372:	60bb      	str	r3, [r7, #8]
        break;
 8003374:	e015      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003376:	f7fe ff9f 	bl	80022b8 <LL_RCC_HSE_IsEnabledDiv2>
 800337a:	4603      	mov	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d102      	bne.n	8003386 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003380:	4b16      	ldr	r3, [pc, #88]	; (80033dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003382:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003384:	e00d      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003388:	60bb      	str	r3, [r7, #8]
        break;
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800338c:	f7ff f967 	bl	800265e <LL_RCC_MSI_GetRange>
 8003390:	4603      	mov	r3, r0
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339e:	60bb      	str	r3, [r7, #8]
        break;
 80033a0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80033a2:	f7ff fa59 	bl	8002858 <LL_RCC_PLL_GetN>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	fb03 f402 	mul.w	r4, r3, r2
 80033ae:	f7ff fa6c 	bl	800288a <LL_RCC_PLL_GetDivider>
 80033b2:	4603      	mov	r3, r0
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	3301      	adds	r3, #1
 80033b8:	fbb4 f4f3 	udiv	r4, r4, r3
 80033bc:	f7ff fa59 	bl	8002872 <LL_RCC_PLL_GetR>
 80033c0:	4603      	mov	r3, r0
 80033c2:	0f5b      	lsrs	r3, r3, #29
 80033c4:	3301      	adds	r3, #1
 80033c6:	fbb4 f3f3 	udiv	r3, r4, r3
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80033cc:	68fb      	ldr	r3, [r7, #12]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	08007d8c 	.word	0x08007d8c
 80033dc:	00f42400 	.word	0x00f42400
 80033e0:	01e84800 	.word	0x01e84800

080033e4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b598      	push	{r3, r4, r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80033e8:	f7ff ff90 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80033ec:	4604      	mov	r4, r0
 80033ee:	f7ff f9e9 	bl	80027c4 <LL_RCC_GetAHBPrescaler>
 80033f2:	4603      	mov	r3, r0
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	4a03      	ldr	r2, [pc, #12]	; (8003408 <HAL_RCC_GetHCLKFreq+0x24>)
 80033fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003400:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd98      	pop	{r3, r4, r7, pc}
 8003408:	08007d4c 	.word	0x08007d4c

0800340c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2bb0      	cmp	r3, #176	; 0xb0
 8003418:	d903      	bls.n	8003422 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e007      	b.n	8003432 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	4a11      	ldr	r2, [pc, #68]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003432:	f7ff f9d3 	bl	80027dc <LL_RCC_GetAHB4Prescaler>
 8003436:	4603      	mov	r3, r0
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	0c9c      	lsrs	r4, r3, #18
 8003456:	f7fe ff21 	bl	800229c <HAL_PWREx_GetVoltageRange>
 800345a:	4603      	mov	r3, r0
 800345c:	4619      	mov	r1, r3
 800345e:	4620      	mov	r0, r4
 8003460:	f000 f80c 	bl	800347c <RCC_SetFlashLatency>
 8003464:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
 800346e:	bf00      	nop
 8003470:	08007d8c 	.word	0x08007d8c
 8003474:	08007d4c 	.word	0x08007d4c
 8003478:	431bde83 	.word	0x431bde83

0800347c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b093      	sub	sp, #76	; 0x4c
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <RCC_SetFlashLatency+0xf0>)
 8003488:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800348c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800348e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003492:	4a37      	ldr	r2, [pc, #220]	; (8003570 <RCC_SetFlashLatency+0xf4>)
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	ca07      	ldmia	r2, {r0, r1, r2}
 800349a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800349e:	4b35      	ldr	r3, [pc, #212]	; (8003574 <RCC_SetFlashLatency+0xf8>)
 80034a0:	f107 040c 	add.w	r4, r7, #12
 80034a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80034aa:	2300      	movs	r3, #0
 80034ac:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b4:	d11c      	bne.n	80034f0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	643b      	str	r3, [r7, #64]	; 0x40
 80034ba:	e015      	b.n	80034e8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80034bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80034c4:	4413      	add	r3, r2
 80034c6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d808      	bhi.n	80034e2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80034d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80034d8:	4413      	add	r3, r2
 80034da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80034de:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80034e0:	e022      	b.n	8003528 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e4:	3301      	adds	r3, #1
 80034e6:	643b      	str	r3, [r7, #64]	; 0x40
 80034e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d9e6      	bls.n	80034bc <RCC_SetFlashLatency+0x40>
 80034ee:	e01b      	b.n	8003528 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f4:	e015      	b.n	8003522 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80034f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80034fe:	4413      	add	r3, r2
 8003500:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d808      	bhi.n	800351c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800350a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003512:	4413      	add	r3, r2
 8003514:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003518:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800351a:	e005      	b.n	8003528 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351e:	3301      	adds	r3, #1
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003524:	2b02      	cmp	r3, #2
 8003526:	d9e6      	bls.n	80034f6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <RCC_SetFlashLatency+0xfc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 0207 	bic.w	r2, r3, #7
 8003530:	4911      	ldr	r1, [pc, #68]	; (8003578 <RCC_SetFlashLatency+0xfc>)
 8003532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003538:	f7fe fabc 	bl	8001ab4 <HAL_GetTick>
 800353c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800353e:	e008      	b.n	8003552 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003540:	f7fe fab8 	bl	8001ab4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e007      	b.n	8003562 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <RCC_SetFlashLatency+0xfc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800355c:	429a      	cmp	r2, r3
 800355e:	d1ef      	bne.n	8003540 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	374c      	adds	r7, #76	; 0x4c
 8003566:	46bd      	mov	sp, r7
 8003568:	bd90      	pop	{r4, r7, pc}
 800356a:	bf00      	nop
 800356c:	08007b9c 	.word	0x08007b9c
 8003570:	08007bac 	.word	0x08007bac
 8003574:	08007bb8 	.word	0x08007bb8
 8003578:	58004000 	.word	0x58004000

0800357c <LL_RCC_LSE_IsEnabled>:
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <LL_RCC_LSE_IsEnabled+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_RCC_LSE_IsEnabled+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_RCC_LSE_IsReady>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80035a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d101      	bne.n	80035b8 <LL_RCC_LSE_IsReady+0x18>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <LL_RCC_LSE_IsReady+0x1a>
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_RCC_SetRFWKPClockSource>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80035cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_RCC_SetSMPSClockSource>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80035f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4313      	orrs	r3, r2
 800360a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_RCC_SetSMPSPrescaler>:
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800362a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4313      	orrs	r3, r2
 8003632:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_RCC_SetUSARTClockSource>:
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f023 0203 	bic.w	r2, r3, #3
 8003654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_RCC_SetLPUARTClockSource>:
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_RCC_SetI2CClockSource>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80036a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80036b0:	43db      	mvns	r3, r3
 80036b2:	401a      	ands	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80036bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_RCC_SetLPTIMClockSource>:
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80036da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_RCC_SetSAIClockSource>:
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800370e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800371a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <LL_RCC_SetRNGClockSource>:
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800373a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_RCC_SetCLK48ClockSource>:
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <LL_RCC_SetUSBClockSource>:
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ffe3 	bl	800375e <LL_RCC_SetCLK48ClockSource>
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <LL_RCC_SetADCClockSource>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <LL_RCC_SetRTCClockSource>:
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80037d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_RCC_GetRTCClockSource>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_RCC_ForceBackupDomainReset>:
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_RCC_PLLSAI1_Enable>:
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003868:	6013      	str	r3, [r2, #0]
}
 800386a:	bf00      	nop
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_RCC_PLLSAI1_Disable>:
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003882:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003886:	6013      	str	r3, [r2, #0]
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <LL_RCC_PLLSAI1_IsReady>:
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a4:	d101      	bne.n	80038aa <LL_RCC_PLLSAI1_IsReady+0x18>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <LL_RCC_PLLSAI1_IsReady+0x1a>
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b088      	sub	sp, #32
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80038be:	2300      	movs	r3, #0
 80038c0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80038c2:	2300      	movs	r3, #0
 80038c4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d034      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038da:	d021      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80038dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038e0:	d81b      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038e6:	d01d      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80038e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ec:	d815      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x54>
 80038f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f6:	d110      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80038f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003906:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003908:	e00d      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f947 	bl	8003ba2 <RCCEx_PLLSAI1_ConfigNP>
 8003914:	4603      	mov	r3, r0
 8003916:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003918:	e005      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	77fb      	strb	r3, [r7, #31]
        break;
 800391e:	e002      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003920:	bf00      	nop
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003926:	7ffb      	ldrb	r3, [r7, #31]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d105      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff fee8 	bl	8003706 <LL_RCC_SetSAIClockSource>
 8003936:	e001      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	7ffb      	ldrb	r3, [r7, #31]
 800393a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003944:	2b00      	cmp	r3, #0
 8003946:	d046      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003948:	f7ff ff56 	bl	80037f8 <LL_RCC_GetRTCClockSource>
 800394c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	429a      	cmp	r2, r3
 8003956:	d03c      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003958:	f7fe fc90 	bl	800227c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ff30 	bl	80037cc <LL_RCC_SetRTCClockSource>
 800396c:	e02e      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003978:	f7ff ff4b 	bl	8003812 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800397c:	f7ff ff5a 	bl	8003834 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800398e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003998:	f7ff fdf0 	bl	800357c <LL_RCC_LSE_IsEnabled>
 800399c:	4603      	mov	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d114      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039a2:	f7fe f887 	bl	8001ab4 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80039a8:	e00b      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fe f883 	bl	8001ab4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d902      	bls.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	77fb      	strb	r3, [r7, #31]
              break;
 80039c0:	e004      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80039c2:	f7ff fded 	bl	80035a0 <LL_RCC_LSE_IsReady>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d1ee      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80039cc:	7ffb      	ldrb	r3, [r7, #31]
 80039ce:	77bb      	strb	r3, [r7, #30]
 80039d0:	e001      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d2:	7ffb      	ldrb	r3, [r7, #31]
 80039d4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fe2a 	bl	8003640 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fe35 	bl	800366c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fe5d 	bl	80036d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fe52 	bl	80036d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fe2a 	bl	8003698 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fe1f 	bl	8003698 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d022      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fe8d 	bl	800378a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a78:	d107      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a88:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a92:	d10b      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f8dd 	bl	8003c58 <RCCEx_PLLSAI1_ConfigNQ>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003aa2:	7ffb      	ldrb	r3, [r7, #31]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003aa8:	7ffb      	ldrb	r3, [r7, #31]
 8003aaa:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d008      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aca:	d003      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fe2a 	bl	8003732 <LL_RCC_SetRNGClockSource>
 8003ade:	e00a      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	2000      	movs	r0, #0
 8003aec:	f7ff fe21 	bl	8003732 <LL_RCC_SetRNGClockSource>
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff fe34 	bl	800375e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003afe:	d107      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d022      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fe3d 	bl	80037a0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b48:	d10b      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f8dd 	bl	8003d0e <RCCEx_PLLSAI1_ConfigNR>
 8003b54:	4603      	mov	r3, r0
 8003b56:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003b58:	7ffb      	ldrb	r3, [r7, #31]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003b5e:	7ffb      	ldrb	r3, [r7, #31]
 8003b60:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fd26 	bl	80035c4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fd45 	bl	8003618 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fd2c 	bl	80035f0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003b98:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003bae:	f7ff fe61 	bl	8003874 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003bb2:	f7fd ff7f 	bl	8001ab4 <HAL_GetTick>
 8003bb6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003bb8:	e009      	b.n	8003bce <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bba:	f7fd ff7b 	bl	8001ab4 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d902      	bls.n	8003bce <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	e004      	b.n	8003bd8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003bce:	f7ff fe60 	bl	8003892 <LL_RCC_PLLSAI1_IsReady>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d137      	bne.n	8003c4e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003c0c:	f7ff fe23 	bl	8003856 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd ff50 	bl	8001ab4 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c16:	e009      	b.n	8003c2c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c18:	f7fd ff4c 	bl	8001ab4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	73fb      	strb	r3, [r7, #15]
        break;
 8003c2a:	e004      	b.n	8003c36 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c2c:	f7ff fe31 	bl	8003892 <LL_RCC_PLLSAI1_IsReady>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d1f0      	bne.n	8003c18 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c64:	f7ff fe06 	bl	8003874 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c68:	f7fd ff24 	bl	8001ab4 <HAL_GetTick>
 8003c6c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c6e:	e009      	b.n	8003c84 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c70:	f7fd ff20 	bl	8001ab4 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d902      	bls.n	8003c84 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	73fb      	strb	r3, [r7, #15]
      break;
 8003c82:	e004      	b.n	8003c8e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c84:	f7ff fe05 	bl	8003892 <LL_RCC_PLLSAI1_IsReady>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d137      	bne.n	8003d04 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003cc2:	f7ff fdc8 	bl	8003856 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc6:	f7fd fef5 	bl	8001ab4 <HAL_GetTick>
 8003cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ccc:	e009      	b.n	8003ce2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cce:	f7fd fef1 	bl	8001ab4 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d902      	bls.n	8003ce2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	73fb      	strb	r3, [r7, #15]
        break;
 8003ce0:	e004      	b.n	8003cec <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ce2:	f7ff fdd6 	bl	8003892 <LL_RCC_PLLSAI1_IsReady>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d1f0      	bne.n	8003cce <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d00:	4313      	orrs	r3, r2
 8003d02:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003d1a:	f7ff fdab 	bl	8003874 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d1e:	f7fd fec9 	bl	8001ab4 <HAL_GetTick>
 8003d22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d24:	e009      	b.n	8003d3a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d26:	f7fd fec5 	bl	8001ab4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d902      	bls.n	8003d3a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	73fb      	strb	r3, [r7, #15]
      break;
 8003d38:	e004      	b.n	8003d44 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d3a:	f7ff fdaa 	bl	8003892 <LL_RCC_PLLSAI1_IsReady>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d137      	bne.n	8003dba <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d74:	4313      	orrs	r3, r2
 8003d76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003d78:	f7ff fd6d 	bl	8003856 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7c:	f7fd fe9a 	bl	8001ab4 <HAL_GetTick>
 8003d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d82:	e009      	b.n	8003d98 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d84:	f7fd fe96 	bl	8001ab4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d902      	bls.n	8003d98 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	73fb      	strb	r3, [r7, #15]
        break;
 8003d96:	e004      	b.n	8003da2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d98:	f7ff fd7b 	bl	8003892 <LL_RCC_PLLSAI1_IsReady>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d1f0      	bne.n	8003d84 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003db6:	4313      	orrs	r3, r2
 8003db8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e090      	b.n	8003ef8 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd fcf4 	bl	80017d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	22ca      	movs	r2, #202	; 0xca
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2253      	movs	r2, #83	; 0x53
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f89f 	bl	8003f4c <RTC_EnterInitMode>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	22ff      	movs	r2, #255	; 0xff
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e067      	b.n	8003ef8 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6899      	ldr	r1, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68d2      	ldr	r2, [r2, #12]
 8003e62:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6919      	ldr	r1, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	041a      	lsls	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e86:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0203 	bic.w	r2, r2, #3
 8003e96:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d113      	bne.n	8003ee6 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f81e 	bl	8003f00 <HAL_RTC_WaitForSynchro>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	22ff      	movs	r2, #255	; 0xff
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e008      	b.n	8003ef8 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	22ff      	movs	r2, #255	; 0xff
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
  }
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f16:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003f18:	f7fd fdcc 	bl	8001ab4 <HAL_GetTick>
 8003f1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f1e:	e009      	b.n	8003f34 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f20:	f7fd fdc8 	bl	8001ab4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f2e:	d901      	bls.n	8003f34 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e007      	b.n	8003f44 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0ee      	beq.n	8003f20 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d119      	bne.n	8003f96 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f6c:	f7fd fda2 	bl	8001ab4 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f72:	e009      	b.n	8003f88 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f74:	f7fd fd9e 	bl	8001ab4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f82:	d901      	bls.n	8003f88 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e007      	b.n	8003f98 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ee      	beq.n	8003f74 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e0a8      	b.n	800410c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	22ca      	movs	r2, #202	; 0xca
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2253      	movs	r2, #83	; 0x53
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d020      	beq.n	800402a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003fe8:	f7fd fd64 	bl	8001ab4 <HAL_GetTick>
 8003fec:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003fee:	e015      	b.n	800401c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ff0:	f7fd fd60 	bl	8001ab4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ffe:	d90d      	bls.n	800401c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2203      	movs	r2, #3
 800400c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e077      	b.n	800410c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e2      	bne.n	8003ff0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004038:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800404a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800404c:	f7fd fd32 	bl	8001ab4 <HAL_GetTick>
 8004050:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004052:	e015      	b.n	8004080 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004054:	f7fd fd2e 	bl	8001ab4 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004062:	d90d      	bls.n	8004080 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2203      	movs	r2, #3
 8004070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e045      	b.n	800410c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0e2      	beq.n	8004054 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0207 	bic.w	r2, r2, #7
 80040a4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80040b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040bc:	4a15      	ldr	r2, [pc, #84]	; (8004114 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80040be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a12      	ldr	r2, [pc, #72]	; (8004114 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80040cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040d0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040e0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	22ff      	movs	r2, #255	; 0xff
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	58000800 	.word	0x58000800

08004118 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004122:	f107 0308 	add.w	r3, r7, #8
 8004126:	2218      	movs	r2, #24
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f82e 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004130:	233f      	movs	r3, #63	; 0x3f
 8004132:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8004134:	2381      	movs	r3, #129	; 0x81
 8004136:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004138:	1dfb      	adds	r3, r7, #7
 800413a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800413c:	2301      	movs	r3, #1
 800413e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004140:	f107 0308 	add.w	r3, r7, #8
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f001 faaa 	bl	80056a0 <hci_send_req>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	da01      	bge.n	8004156 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004152:	23ff      	movs	r3, #255	; 0xff
 8004154:	e000      	b.n	8004158 <aci_gap_set_non_discoverable+0x40>
  return status;
 8004156:	79fb      	ldrb	r3, [r7, #7]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8004160:	b5b0      	push	{r4, r5, r7, lr}
 8004162:	b0ce      	sub	sp, #312	; 0x138
 8004164:	af00      	add	r7, sp, #0
 8004166:	4605      	mov	r5, r0
 8004168:	460c      	mov	r4, r1
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	1dfb      	adds	r3, r7, #7
 8004170:	462a      	mov	r2, r5
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	4622      	mov	r2, r4
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	1cbb      	adds	r3, r7, #2
 800417c:	4602      	mov	r2, r0
 800417e:	801a      	strh	r2, [r3, #0]
 8004180:	1dbb      	adds	r3, r7, #6
 8004182:	460a      	mov	r2, r1
 8004184:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004186:	f107 0310 	add.w	r3, r7, #16
 800418a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800418e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004192:	3308      	adds	r3, #8
 8004194:	f107 0210 	add.w	r2, r7, #16
 8004198:	4413      	add	r3, r2
 800419a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800419e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80041a2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80041a6:	4413      	add	r3, r2
 80041a8:	3309      	adds	r3, #9
 80041aa:	f107 0210 	add.w	r2, r7, #16
 80041ae:	4413      	add	r3, r2
 80041b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80041b4:	f107 030f 	add.w	r3, r7, #15
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80041c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041c6:	1dfa      	adds	r2, r7, #7
 80041c8:	7812      	ldrb	r2, [r2, #0]
 80041ca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80041cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041d0:	3301      	adds	r3, #1
 80041d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80041d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041da:	1d3a      	adds	r2, r7, #4
 80041dc:	8812      	ldrh	r2, [r2, #0]
 80041de:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80041e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041e6:	3302      	adds	r3, #2
 80041e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80041ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041f0:	1cba      	adds	r2, r7, #2
 80041f2:	8812      	ldrh	r2, [r2, #0]
 80041f4:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80041f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041fc:	3302      	adds	r3, #2
 80041fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8004202:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004206:	1dba      	adds	r2, r7, #6
 8004208:	7812      	ldrb	r2, [r2, #0]
 800420a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800420c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004210:	3301      	adds	r3, #1
 8004212:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8004216:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800421a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800421e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004220:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004224:	3301      	adds	r3, #1
 8004226:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800422a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800422e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004232:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004234:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004238:	3301      	adds	r3, #1
 800423a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800423e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004242:	3308      	adds	r3, #8
 8004244:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004248:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800424c:	4618      	mov	r0, r3
 800424e:	f000 ff8d 	bl	800516c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8004252:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004256:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800425a:	4413      	add	r3, r2
 800425c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004260:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004264:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004268:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800426a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800426e:	3301      	adds	r3, #1
 8004270:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004274:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004278:	3301      	adds	r3, #1
 800427a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800427e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004282:	4618      	mov	r0, r3
 8004284:	f000 ff72 	bl	800516c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004288:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800428c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004290:	4413      	add	r3, r2
 8004292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8004296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800429a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800429e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80042a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042a4:	3302      	adds	r3, #2
 80042a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80042aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042ae:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80042b2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80042b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042b8:	3302      	adds	r3, #2
 80042ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80042be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042c2:	2218      	movs	r2, #24
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 ff60 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 80042cc:	233f      	movs	r3, #63	; 0x3f
 80042ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80042d2:	2383      	movs	r3, #131	; 0x83
 80042d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80042d8:	f107 0310 	add.w	r3, r7, #16
 80042dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80042e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80042e8:	f107 030f 	add.w	r3, r7, #15
 80042ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80042f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f9cf 	bl	80056a0 <hci_send_req>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	da01      	bge.n	800430c <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8004308:	23ff      	movs	r3, #255	; 0xff
 800430a:	e002      	b.n	8004312 <aci_gap_set_discoverable+0x1b2>
  return status;
 800430c:	f107 030f 	add.w	r3, r7, #15
 8004310:	781b      	ldrb	r3, [r3, #0]
}
 8004312:	4618      	mov	r0, r3
 8004314:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004318:	46bd      	mov	sp, r7
 800431a:	bdb0      	pop	{r4, r5, r7, pc}

0800431c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b0cc      	sub	sp, #304	; 0x130
 8004320:	af00      	add	r7, sp, #0
 8004322:	4602      	mov	r2, r0
 8004324:	1dfb      	adds	r3, r7, #7
 8004326:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8004328:	f107 0310 	add.w	r3, r7, #16
 800432c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004330:	f107 030f 	add.w	r3, r7, #15
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800433e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004342:	1dfa      	adds	r2, r7, #7
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800434c:	3301      	adds	r3, #1
 800434e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004352:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004356:	2218      	movs	r2, #24
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f000 ff16 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004360:	233f      	movs	r3, #63	; 0x3f
 8004362:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8004366:	2385      	movs	r3, #133	; 0x85
 8004368:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800436c:	f107 0310 	add.w	r3, r7, #16
 8004370:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004374:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004378:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800437c:	f107 030f 	add.w	r3, r7, #15
 8004380:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004384:	2301      	movs	r3, #1
 8004386:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800438a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f001 f985 	bl	80056a0 <hci_send_req>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	da01      	bge.n	80043a0 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800439c:	23ff      	movs	r3, #255	; 0xff
 800439e:	e002      	b.n	80043a6 <aci_gap_set_io_capability+0x8a>
  return status;
 80043a0:	f107 030f 	add.w	r3, r7, #15
 80043a4:	781b      	ldrb	r3, [r3, #0]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80043b0:	b5b0      	push	{r4, r5, r7, lr}
 80043b2:	b0cc      	sub	sp, #304	; 0x130
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4605      	mov	r5, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	1dfb      	adds	r3, r7, #7
 80043c0:	462a      	mov	r2, r5
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	1dbb      	adds	r3, r7, #6
 80043c6:	4622      	mov	r2, r4
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	1d7b      	adds	r3, r7, #5
 80043cc:	4602      	mov	r2, r0
 80043ce:	701a      	strb	r2, [r3, #0]
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	460a      	mov	r2, r1
 80043d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80043d6:	f107 0310 	add.w	r3, r7, #16
 80043da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80043de:	f107 030f 	add.w	r3, r7, #15
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80043ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043f0:	1dfa      	adds	r2, r7, #7
 80043f2:	7812      	ldrb	r2, [r2, #0]
 80043f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80043f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043fa:	3301      	adds	r3, #1
 80043fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8004400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004404:	1dba      	adds	r2, r7, #6
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800440a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800440e:	3301      	adds	r3, #1
 8004410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8004414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004418:	1d7a      	adds	r2, r7, #5
 800441a:	7812      	ldrb	r2, [r2, #0]
 800441c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800441e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004422:	3301      	adds	r3, #1
 8004424:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8004428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800442c:	1d3a      	adds	r2, r7, #4
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8004432:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004436:	3301      	adds	r3, #1
 8004438:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800443c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004440:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8004444:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800444a:	3301      	adds	r3, #1
 800444c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004454:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8004458:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800445a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800445e:	3301      	adds	r3, #1
 8004460:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8004464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004468:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800446c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800446e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004472:	3301      	adds	r3, #1
 8004474:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8004478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800447c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004480:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8004484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004488:	3304      	adds	r3, #4
 800448a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800448e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004492:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004496:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8004498:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800449c:	3301      	adds	r3, #1
 800449e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80044a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044a6:	2218      	movs	r2, #24
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fe6e 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 80044b0:	233f      	movs	r3, #63	; 0x3f
 80044b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80044b6:	2386      	movs	r3, #134	; 0x86
 80044b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80044bc:	f107 0310 	add.w	r3, r7, #16
 80044c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80044c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80044cc:	f107 030f 	add.w	r3, r7, #15
 80044d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80044da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 f8dd 	bl	80056a0 <hci_send_req>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	da01      	bge.n	80044f0 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 80044ec:	23ff      	movs	r3, #255	; 0xff
 80044ee:	e002      	b.n	80044f6 <aci_gap_set_authentication_requirement+0x146>
  return status;
 80044f0:	f107 030f 	add.w	r3, r7, #15
 80044f4:	781b      	ldrb	r3, [r3, #0]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bdb0      	pop	{r4, r5, r7, pc}

08004500 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b0cc      	sub	sp, #304	; 0x130
 8004504:	af00      	add	r7, sp, #0
 8004506:	4602      	mov	r2, r0
 8004508:	463b      	mov	r3, r7
 800450a:	6019      	str	r1, [r3, #0]
 800450c:	1dbb      	adds	r3, r7, #6
 800450e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004518:	f107 030f 	add.w	r3, r7, #15
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800452a:	1dba      	adds	r2, r7, #6
 800452c:	8812      	ldrh	r2, [r2, #0]
 800452e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004534:	3302      	adds	r3, #2
 8004536:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800453a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800453e:	463a      	mov	r2, r7
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8004546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800454a:	3304      	adds	r3, #4
 800454c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004550:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004554:	2218      	movs	r2, #24
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fe17 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 800455e:	233f      	movs	r3, #63	; 0x3f
 8004560:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8004564:	2388      	movs	r3, #136	; 0x88
 8004566:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800456a:	f107 0310 	add.w	r3, r7, #16
 800456e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004576:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800457a:	f107 030f 	add.w	r3, r7, #15
 800457e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004582:	2301      	movs	r3, #1
 8004584:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004588:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f001 f886 	bl	80056a0 <hci_send_req>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	da01      	bge.n	800459e <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 800459a:	23ff      	movs	r3, #255	; 0xff
 800459c:	e002      	b.n	80045a4 <aci_gap_pass_key_resp+0xa4>
  return status;
 800459e:	f107 030f 	add.w	r3, r7, #15
 80045a2:	781b      	ldrb	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80045ae:	b590      	push	{r4, r7, lr}
 80045b0:	b0cd      	sub	sp, #308	; 0x134
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4604      	mov	r4, r0
 80045b6:	4608      	mov	r0, r1
 80045b8:	4611      	mov	r1, r2
 80045ba:	463a      	mov	r2, r7
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	1dfb      	adds	r3, r7, #7
 80045c0:	4622      	mov	r2, r4
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	1dbb      	adds	r3, r7, #6
 80045c6:	4602      	mov	r2, r0
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	1d7b      	adds	r3, r7, #5
 80045cc:	460a      	mov	r2, r1
 80045ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80045d0:	f107 0310 	add.w	r3, r7, #16
 80045d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	2207      	movs	r2, #7
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fdd3 	bl	800518c <Osal_MemSet>
  int index_input = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80045ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f0:	1dfa      	adds	r2, r7, #7
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80045f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045fa:	3301      	adds	r3, #1
 80045fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004604:	1dba      	adds	r2, r7, #6
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800460a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800460e:	3301      	adds	r3, #1
 8004610:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004618:	1d7a      	adds	r2, r7, #5
 800461a:	7812      	ldrb	r2, [r2, #0]
 800461c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800461e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004622:	3301      	adds	r3, #1
 8004624:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004628:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800462c:	2218      	movs	r2, #24
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fdab 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004636:	233f      	movs	r3, #63	; 0x3f
 8004638:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800463c:	238a      	movs	r3, #138	; 0x8a
 800463e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004642:	f107 0310 	add.w	r3, r7, #16
 8004646:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800464a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800464e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004652:	f107 0308 	add.w	r3, r7, #8
 8004656:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800465a:	2307      	movs	r3, #7
 800465c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004660:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f001 f81a 	bl	80056a0 <hci_send_req>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	da01      	bge.n	8004676 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8004672:	23ff      	movs	r3, #255	; 0xff
 8004674:	e021      	b.n	80046ba <aci_gap_init+0x10c>
  if ( resp.Status )
 8004676:	f107 0308 	add.w	r3, r7, #8
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <aci_gap_init+0xda>
    return resp.Status;
 8004680:	f107 0308 	add.w	r3, r7, #8
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	e018      	b.n	80046ba <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8004688:	f107 0308 	add.w	r3, r7, #8
 800468c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004690:	b29a      	uxth	r2, r3
 8004692:	463b      	mov	r3, r7
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004698:	f107 0308 	add.w	r3, r7, #8
 800469c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80046a6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80046a8:	f107 0308 	add.w	r3, r7, #8
 80046ac:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80046b6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd90      	pop	{r4, r7, pc}

080046c4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b0cc      	sub	sp, #304	; 0x130
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4602      	mov	r2, r0
 80046cc:	463b      	mov	r3, r7
 80046ce:	6019      	str	r1, [r3, #0]
 80046d0:	1dfb      	adds	r3, r7, #7
 80046d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80046d4:	f107 0310 	add.w	r3, r7, #16
 80046d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80046dc:	f107 030f 	add.w	r3, r7, #15
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80046ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ee:	1dfa      	adds	r2, r7, #7
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80046f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046f8:	3301      	adds	r3, #1
 80046fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80046fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004702:	1c58      	adds	r0, r3, #1
 8004704:	1dfb      	adds	r3, r7, #7
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	463b      	mov	r3, r7
 800470a:	6819      	ldr	r1, [r3, #0]
 800470c:	f000 fd2e 	bl	800516c <Osal_MemCpy>
  index_input += AdvDataLen;
 8004710:	1dfb      	adds	r3, r7, #7
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004718:	4413      	add	r3, r2
 800471a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800471e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004722:	2218      	movs	r2, #24
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fd30 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 800472c:	233f      	movs	r3, #63	; 0x3f
 800472e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004732:	238e      	movs	r3, #142	; 0x8e
 8004734:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004738:	f107 0310 	add.w	r3, r7, #16
 800473c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004744:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004748:	f107 030f 	add.w	r3, r7, #15
 800474c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004750:	2301      	movs	r3, #1
 8004752:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004756:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f000 ff9f 	bl	80056a0 <hci_send_req>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	da01      	bge.n	800476c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8004768:	23ff      	movs	r3, #255	; 0xff
 800476a:	e002      	b.n	8004772 <aci_gap_update_adv_data+0xae>
  return status;
 800476c:	f107 030f 	add.w	r3, r7, #15
 8004770:	781b      	ldrb	r3, [r3, #0]
}
 8004772:	4618      	mov	r0, r3
 8004774:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b0cc      	sub	sp, #304	; 0x130
 8004780:	af00      	add	r7, sp, #0
 8004782:	4602      	mov	r2, r0
 8004784:	1dfb      	adds	r3, r7, #7
 8004786:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8004788:	f107 0310 	add.w	r3, r7, #16
 800478c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004790:	f107 030f 	add.w	r3, r7, #15
 8004794:	2200      	movs	r2, #0
 8004796:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 800479e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a2:	1dfa      	adds	r2, r7, #7
 80047a4:	7812      	ldrb	r2, [r2, #0]
 80047a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80047a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047ac:	3301      	adds	r3, #1
 80047ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80047b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047b6:	2218      	movs	r2, #24
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fce6 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 80047c0:	233f      	movs	r3, #63	; 0x3f
 80047c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 80047c6:	238f      	movs	r3, #143	; 0x8f
 80047c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80047cc:	f107 0310 	add.w	r3, r7, #16
 80047d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80047d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80047dc:	f107 030f 	add.w	r3, r7, #15
 80047e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80047ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047ee:	2100      	movs	r1, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 ff55 	bl	80056a0 <hci_send_req>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	da01      	bge.n	8004800 <aci_gap_delete_ad_type+0x84>
    return BLE_STATUS_TIMEOUT;
 80047fc:	23ff      	movs	r3, #255	; 0xff
 80047fe:	e002      	b.n	8004806 <aci_gap_delete_ad_type+0x8a>
  return status;
 8004800:	f107 030f 	add.w	r3, r7, #15
 8004804:	781b      	ldrb	r3, [r3, #0]
}
 8004806:	4618      	mov	r0, r3
 8004808:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	2218      	movs	r2, #24
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fcb2 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004828:	233f      	movs	r3, #63	; 0x3f
 800482a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800482c:	2392      	movs	r3, #146	; 0x92
 800482e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004830:	1dfb      	adds	r3, r7, #7
 8004832:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004834:	2301      	movs	r3, #1
 8004836:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004838:	f107 0308 	add.w	r3, r7, #8
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f000 ff2e 	bl	80056a0 <hci_send_req>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	da01      	bge.n	800484e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800484a:	23ff      	movs	r3, #255	; 0xff
 800484c:	e000      	b.n	8004850 <aci_gap_configure_whitelist+0x40>
  return status;
 800484e:	79fb      	ldrb	r3, [r7, #7]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b0cc      	sub	sp, #304	; 0x130
 800485c:	af00      	add	r7, sp, #0
 800485e:	4602      	mov	r2, r0
 8004860:	1dbb      	adds	r3, r7, #6
 8004862:	801a      	strh	r2, [r3, #0]
 8004864:	1d7b      	adds	r3, r7, #5
 8004866:	460a      	mov	r2, r1
 8004868:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800486a:	f107 0310 	add.w	r3, r7, #16
 800486e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004872:	f107 030f 	add.w	r3, r7, #15
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8004880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004884:	1dba      	adds	r2, r7, #6
 8004886:	8812      	ldrh	r2, [r2, #0]
 8004888:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800488a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800488e:	3302      	adds	r3, #2
 8004890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8004894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004898:	1d7a      	adds	r2, r7, #5
 800489a:	7812      	ldrb	r2, [r2, #0]
 800489c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800489e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048a2:	3301      	adds	r3, #1
 80048a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80048a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048ac:	2218      	movs	r2, #24
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fc6b 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 80048b6:	233f      	movs	r3, #63	; 0x3f
 80048b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80048bc:	23a5      	movs	r3, #165	; 0xa5
 80048be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80048c2:	f107 0310 	add.w	r3, r7, #16
 80048c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80048ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80048d2:	f107 030f 	add.w	r3, r7, #15
 80048d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80048da:	2301      	movs	r3, #1
 80048dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80048e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 feda 	bl	80056a0 <hci_send_req>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da01      	bge.n	80048f6 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80048f2:	23ff      	movs	r3, #255	; 0xff
 80048f4:	e002      	b.n	80048fc <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80048f6:	f107 030f 	add.w	r3, r7, #15
 80048fa:	781b      	ldrb	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b088      	sub	sp, #32
 800490a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004910:	f107 0308 	add.w	r3, r7, #8
 8004914:	2218      	movs	r2, #24
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fc37 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 800491e:	233f      	movs	r3, #63	; 0x3f
 8004920:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004922:	f240 1301 	movw	r3, #257	; 0x101
 8004926:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004928:	1dfb      	adds	r3, r7, #7
 800492a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800492c:	2301      	movs	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004930:	f107 0308 	add.w	r3, r7, #8
 8004934:	2100      	movs	r1, #0
 8004936:	4618      	mov	r0, r3
 8004938:	f000 feb2 	bl	80056a0 <hci_send_req>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	da01      	bge.n	8004946 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004942:	23ff      	movs	r3, #255	; 0xff
 8004944:	e000      	b.n	8004948 <aci_gatt_init+0x42>
  return status;
 8004946:	79fb      	ldrb	r3, [r7, #7]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8004950:	b590      	push	{r4, r7, lr}
 8004952:	b0cf      	sub	sp, #316	; 0x13c
 8004954:	af00      	add	r7, sp, #0
 8004956:	4604      	mov	r4, r0
 8004958:	4638      	mov	r0, r7
 800495a:	6001      	str	r1, [r0, #0]
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	1dfb      	adds	r3, r7, #7
 8004962:	4622      	mov	r2, r4
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	1dbb      	adds	r3, r7, #6
 8004968:	4602      	mov	r2, r0
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	1d7b      	adds	r3, r7, #5
 800496e:	460a      	mov	r2, r1
 8004970:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004972:	f107 0310 	add.w	r3, r7, #16
 8004976:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800497a:	1dfb      	adds	r3, r7, #7
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d007      	beq.n	8004992 <aci_gatt_add_service+0x42>
 8004982:	1dfb      	adds	r3, r7, #7
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d101      	bne.n	800498e <aci_gatt_add_service+0x3e>
 800498a:	2311      	movs	r3, #17
 800498c:	e002      	b.n	8004994 <aci_gatt_add_service+0x44>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <aci_gatt_add_service+0x44>
 8004992:	2303      	movs	r3, #3
 8004994:	f107 0210 	add.w	r2, r7, #16
 8004998:	4413      	add	r3, r2
 800499a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800499e:	f107 030c 	add.w	r3, r7, #12
 80049a2:	2203      	movs	r2, #3
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fbf0 	bl	800518c <Osal_MemSet>
  int index_input = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80049b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049b6:	1dfa      	adds	r2, r7, #7
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80049bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049c0:	3301      	adds	r3, #1
 80049c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80049c6:	1dfb      	adds	r3, r7, #7
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d002      	beq.n	80049d4 <aci_gatt_add_service+0x84>
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d004      	beq.n	80049dc <aci_gatt_add_service+0x8c>
 80049d2:	e007      	b.n	80049e4 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80049d4:	2302      	movs	r3, #2
 80049d6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80049da:	e005      	b.n	80049e8 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80049dc:	2310      	movs	r3, #16
 80049de:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80049e2:	e001      	b.n	80049e8 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80049e4:	2397      	movs	r3, #151	; 0x97
 80049e6:	e05d      	b.n	8004aa4 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80049e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049ec:	1c58      	adds	r0, r3, #1
 80049ee:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80049f2:	463b      	mov	r3, r7
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	f000 fbb9 	bl	800516c <Osal_MemCpy>
    index_input += size;
 80049fa:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80049fe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004a02:	4413      	add	r3, r2
 8004a04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8004a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0c:	1dba      	adds	r2, r7, #6
 8004a0e:	7812      	ldrb	r2, [r2, #0]
 8004a10:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004a12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a16:	3301      	adds	r3, #1
 8004a18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a20:	1d7a      	adds	r2, r7, #5
 8004a22:	7812      	ldrb	r2, [r2, #0]
 8004a24:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004a30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a34:	2218      	movs	r2, #24
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fba7 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a3e:	233f      	movs	r3, #63	; 0x3f
 8004a40:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8004a44:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004a48:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004a4c:	f107 0310 	add.w	r3, r7, #16
 8004a50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004a5c:	f107 030c 	add.w	r3, r7, #12
 8004a60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004a64:	2303      	movs	r3, #3
 8004a66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fe15 	bl	80056a0 <hci_send_req>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da01      	bge.n	8004a80 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8004a7c:	23ff      	movs	r3, #255	; 0xff
 8004a7e:	e011      	b.n	8004aa4 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <aci_gatt_add_service+0x142>
    return resp.Status;
 8004a8a:	f107 030c 	add.w	r3, r7, #12
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	e008      	b.n	8004aa4 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8004a92:	f107 030c 	add.w	r3, r7, #12
 8004a96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004aa0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd90      	pop	{r4, r7, pc}

08004aae <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8004aae:	b590      	push	{r4, r7, lr}
 8004ab0:	b0d1      	sub	sp, #324	; 0x144
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	f107 0108 	add.w	r1, r7, #8
 8004abc:	600a      	str	r2, [r1, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f107 030e 	add.w	r3, r7, #14
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	f107 030d 	add.w	r3, r7, #13
 8004acc:	4602      	mov	r2, r0
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	1dbb      	adds	r3, r7, #6
 8004ad2:	460a      	mov	r2, r1
 8004ad4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004ad6:	f107 0318 	add.w	r3, r7, #24
 8004ada:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004ade:	f107 030d 	add.w	r3, r7, #13
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d008      	beq.n	8004afa <aci_gatt_add_char+0x4c>
 8004ae8:	f107 030d 	add.w	r3, r7, #13
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d101      	bne.n	8004af6 <aci_gatt_add_char+0x48>
 8004af2:	2313      	movs	r3, #19
 8004af4:	e002      	b.n	8004afc <aci_gatt_add_char+0x4e>
 8004af6:	2303      	movs	r3, #3
 8004af8:	e000      	b.n	8004afc <aci_gatt_add_char+0x4e>
 8004afa:	2305      	movs	r3, #5
 8004afc:	f107 0218 	add.w	r2, r7, #24
 8004b00:	4413      	add	r3, r2
 8004b02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004b06:	f107 0314 	add.w	r3, r7, #20
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fb3c 	bl	800518c <Osal_MemSet>
  int index_input = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8004b1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b1e:	f107 020e 	add.w	r2, r7, #14
 8004b22:	8812      	ldrh	r2, [r2, #0]
 8004b24:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8004b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b34:	f107 020d 	add.w	r2, r7, #13
 8004b38:	7812      	ldrb	r2, [r2, #0]
 8004b3a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b40:	3301      	adds	r3, #1
 8004b42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8004b46:	f107 030d 	add.w	r3, r7, #13
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d002      	beq.n	8004b56 <aci_gatt_add_char+0xa8>
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d004      	beq.n	8004b5e <aci_gatt_add_char+0xb0>
 8004b54:	e007      	b.n	8004b66 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8004b56:	2302      	movs	r3, #2
 8004b58:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004b5c:	e005      	b.n	8004b6a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8004b5e:	2310      	movs	r3, #16
 8004b60:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004b64:	e001      	b.n	8004b6a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8004b66:	2397      	movs	r3, #151	; 0x97
 8004b68:	e086      	b.n	8004c78 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8004b6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b6e:	1cd8      	adds	r0, r3, #3
 8004b70:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8004b74:	f107 0308 	add.w	r3, r7, #8
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	f000 faf7 	bl	800516c <Osal_MemCpy>
    index_input += size;
 8004b7e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004b82:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004b86:	4413      	add	r3, r2
 8004b88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004b8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b90:	1dba      	adds	r2, r7, #6
 8004b92:	8812      	ldrh	r2, [r2, #0]
 8004b94:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004b96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8004ba0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ba4:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004ba8:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004baa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8004bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bb8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004bbc:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004bbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004bc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bcc:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004bd0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004bd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004bdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004be0:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8004be4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004be6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bea:	3301      	adds	r3, #1
 8004bec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004bf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bf4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004bf8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004bfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bfe:	3301      	adds	r3, #1
 8004c00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004c04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004c08:	2218      	movs	r2, #24
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fabd 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004c12:	233f      	movs	r3, #63	; 0x3f
 8004c14:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004c18:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004c1c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004c20:	f107 0318 	add.w	r3, r7, #24
 8004c24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004c28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004c38:	2303      	movs	r3, #3
 8004c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004c3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fd2b 	bl	80056a0 <hci_send_req>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da01      	bge.n	8004c54 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8004c50:	23ff      	movs	r3, #255	; 0xff
 8004c52:	e011      	b.n	8004c78 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	e008      	b.n	8004c78 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8004c66:	f107 0314 	add.w	r3, r7, #20
 8004c6a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004c74:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd90      	pop	{r4, r7, pc}

08004c82 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004c82:	b5b0      	push	{r4, r5, r7, lr}
 8004c84:	b0cc      	sub	sp, #304	; 0x130
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	4605      	mov	r5, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	1dbb      	adds	r3, r7, #6
 8004c92:	462a      	mov	r2, r5
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	1d3b      	adds	r3, r7, #4
 8004c98:	4622      	mov	r2, r4
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	1cfb      	adds	r3, r7, #3
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	1cbb      	adds	r3, r7, #2
 8004ca4:	460a      	mov	r2, r1
 8004ca6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004ca8:	f107 0310 	add.w	r3, r7, #16
 8004cac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004cb0:	f107 030f 	add.w	r3, r7, #15
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc2:	1dba      	adds	r2, r7, #6
 8004cc4:	8812      	ldrh	r2, [r2, #0]
 8004cc6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ccc:	3302      	adds	r3, #2
 8004cce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd6:	1d3a      	adds	r2, r7, #4
 8004cd8:	8812      	ldrh	r2, [r2, #0]
 8004cda:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cea:	1cfa      	adds	r2, r7, #3
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfe:	1cba      	adds	r2, r7, #2
 8004d00:	7812      	ldrb	r2, [r2, #0]
 8004d02:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d12:	1d98      	adds	r0, r3, #6
 8004d14:	1cbb      	adds	r3, r7, #2
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004d1e:	f000 fa25 	bl	800516c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004d22:	1cbb      	adds	r3, r7, #2
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d34:	2218      	movs	r2, #24
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fa27 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d3e:	233f      	movs	r3, #63	; 0x3f
 8004d40:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004d44:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004d48:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d4c:	f107 0310 	add.w	r3, r7, #16
 8004d50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004d5c:	f107 030f 	add.w	r3, r7, #15
 8004d60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fc95 	bl	80056a0 <hci_send_req>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	da01      	bge.n	8004d80 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8004d7c:	23ff      	movs	r3, #255	; 0xff
 8004d7e:	e002      	b.n	8004d86 <aci_gatt_update_char_value+0x104>
  return status;
 8004d80:	f107 030f 	add.w	r3, r7, #15
 8004d84:	781b      	ldrb	r3, [r3, #0]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bdb0      	pop	{r4, r5, r7, pc}

08004d90 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b0cc      	sub	sp, #304	; 0x130
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	463b      	mov	r3, r7
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	1dfb      	adds	r3, r7, #7
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	1dbb      	adds	r3, r7, #6
 8004da2:	460a      	mov	r2, r1
 8004da4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004da6:	f107 0310 	add.w	r3, r7, #16
 8004daa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004dae:	f107 030f 	add.w	r3, r7, #15
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc0:	1dfa      	adds	r2, r7, #7
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dca:	3301      	adds	r3, #1
 8004dcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd4:	1dba      	adds	r2, r7, #6
 8004dd6:	7812      	ldrb	r2, [r2, #0]
 8004dd8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dde:	3301      	adds	r3, #1
 8004de0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de8:	1c98      	adds	r0, r3, #2
 8004dea:	1dbb      	adds	r3, r7, #6
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	463b      	mov	r3, r7
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	f000 f9bb 	bl	800516c <Osal_MemCpy>
  index_input += Length;
 8004df6:	1dbb      	adds	r3, r7, #6
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004dfe:	4413      	add	r3, r2
 8004e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004e04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e08:	2218      	movs	r2, #24
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 f9bd 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e12:	233f      	movs	r3, #63	; 0x3f
 8004e14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8004e18:	230c      	movs	r3, #12
 8004e1a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004e1e:	f107 0310 	add.w	r3, r7, #16
 8004e22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004e2e:	f107 030f 	add.w	r3, r7, #15
 8004e32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fc2c 	bl	80056a0 <hci_send_req>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	da01      	bge.n	8004e52 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8004e4e:	23ff      	movs	r3, #255	; 0xff
 8004e50:	e002      	b.n	8004e58 <aci_hal_write_config_data+0xc8>
  return status;
 8004e52:	f107 030f 	add.w	r3, r7, #15
 8004e56:	781b      	ldrb	r3, [r3, #0]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b0cc      	sub	sp, #304	; 0x130
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	4602      	mov	r2, r0
 8004e6a:	1dfb      	adds	r3, r7, #7
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	1dbb      	adds	r3, r7, #6
 8004e70:	460a      	mov	r2, r1
 8004e72:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8004e74:	f107 0310 	add.w	r3, r7, #16
 8004e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e7c:	f107 030f 	add.w	r3, r7, #15
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8004e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e8e:	1dfa      	adds	r2, r7, #7
 8004e90:	7812      	ldrb	r2, [r2, #0]
 8004e92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004e94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8004e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ea2:	1dba      	adds	r2, r7, #6
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004ea8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eac:	3301      	adds	r3, #1
 8004eae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004eb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004eb6:	2218      	movs	r2, #24
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 f966 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ec0:	233f      	movs	r3, #63	; 0x3f
 8004ec2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8004ec6:	230f      	movs	r3, #15
 8004ec8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004ecc:	f107 0310 	add.w	r3, r7, #16
 8004ed0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004edc:	f107 030f 	add.w	r3, r7, #15
 8004ee0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004eea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fbd5 	bl	80056a0 <hci_send_req>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da01      	bge.n	8004f00 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8004efc:	23ff      	movs	r3, #255	; 0xff
 8004efe:	e002      	b.n	8004f06 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8004f00:	f107 030f 	add.w	r3, r7, #15
 8004f04:	781b      	ldrb	r3, [r3, #0]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b0cc      	sub	sp, #304	; 0x130
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4602      	mov	r2, r0
 8004f18:	1dbb      	adds	r3, r7, #6
 8004f1a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8004f1c:	f107 0310 	add.w	r3, r7, #16
 8004f20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004f24:	f107 030f 	add.w	r3, r7, #15
 8004f28:	2200      	movs	r2, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8004f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f36:	1dba      	adds	r2, r7, #6
 8004f38:	8812      	ldrh	r2, [r2, #0]
 8004f3a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004f3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f40:	3302      	adds	r3, #2
 8004f42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004f46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f4a:	2218      	movs	r2, #24
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f91c 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f54:	233f      	movs	r3, #63	; 0x3f
 8004f56:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8004f5a:	2318      	movs	r3, #24
 8004f5c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004f60:	f107 0310 	add.w	r3, r7, #16
 8004f64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004f70:	f107 030f 	add.w	r3, r7, #15
 8004f74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fb8b 	bl	80056a0 <hci_send_req>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da01      	bge.n	8004f94 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8004f90:	23ff      	movs	r3, #255	; 0xff
 8004f92:	e002      	b.n	8004f9a <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8004f94:	f107 030f 	add.w	r3, r7, #15
 8004f98:	781b      	ldrb	r3, [r3, #0]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	2218      	movs	r2, #24
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f8e8 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x03;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004fc4:	1dfb      	adds	r3, r7, #7
 8004fc6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fb64 	bl	80056a0 <hci_send_req>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da01      	bge.n	8004fe2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004fde:	23ff      	movs	r3, #255	; 0xff
 8004fe0:	e000      	b.n	8004fe4 <hci_reset+0x40>
  return status;
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b0cc      	sub	sp, #304	; 0x130
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	6019      	str	r1, [r3, #0]
 8004ff8:	1dfb      	adds	r3, r7, #7
 8004ffa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005004:	f107 030f 	add.w	r3, r7, #15
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8005012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005016:	1dfa      	adds	r2, r7, #7
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800501c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005020:	3301      	adds	r3, #1
 8005022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 8005026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502a:	1c58      	adds	r0, r3, #1
 800502c:	463b      	mov	r3, r7
 800502e:	221f      	movs	r2, #31
 8005030:	6819      	ldr	r1, [r3, #0]
 8005032:	f000 f89b 	bl	800516c <Osal_MemCpy>
  index_input += 31;
 8005036:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800503a:	331f      	adds	r3, #31
 800503c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005040:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005044:	2218      	movs	r2, #24
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f000 f89f 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x08;
 800504e:	2308      	movs	r3, #8
 8005050:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8005054:	2309      	movs	r3, #9
 8005056:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800505a:	f107 0310 	add.w	r3, r7, #16
 800505e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005062:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005066:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800506a:	f107 030f 	add.w	r3, r7, #15
 800506e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005072:	2301      	movs	r3, #1
 8005074:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005078:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fb0e 	bl	80056a0 <hci_send_req>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	da01      	bge.n	800508e <hci_le_set_scan_response_data+0xa2>
    return BLE_STATUS_TIMEOUT;
 800508a:	23ff      	movs	r3, #255	; 0xff
 800508c:	e002      	b.n	8005094 <hci_le_set_scan_response_data+0xa8>
  return status;
 800508e:	f107 030f 	add.w	r3, r7, #15
 8005092:	781b      	ldrb	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800509e:	b590      	push	{r4, r7, lr}
 80050a0:	b0cd      	sub	sp, #308	; 0x134
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	4604      	mov	r4, r0
 80050a6:	4608      	mov	r0, r1
 80050a8:	4611      	mov	r1, r2
 80050aa:	1dfb      	adds	r3, r7, #7
 80050ac:	4622      	mov	r2, r4
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	1dbb      	adds	r3, r7, #6
 80050b2:	4602      	mov	r2, r0
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	1d7b      	adds	r3, r7, #5
 80050b8:	460a      	mov	r2, r1
 80050ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80050bc:	f107 0310 	add.w	r3, r7, #16
 80050c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80050c4:	f107 030f 	add.w	r3, r7, #15
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80050d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d6:	1dfa      	adds	r2, r7, #7
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80050dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050e0:	3301      	adds	r3, #1
 80050e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80050e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ea:	1dba      	adds	r2, r7, #6
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80050f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050f4:	3301      	adds	r3, #1
 80050f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80050fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050fe:	1d7a      	adds	r2, r7, #5
 8005100:	7812      	ldrb	r2, [r2, #0]
 8005102:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005108:	3301      	adds	r3, #1
 800510a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800510e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005112:	2218      	movs	r2, #24
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f838 	bl	800518c <Osal_MemSet>
  rq.ogf = 0x08;
 800511c:	2308      	movs	r3, #8
 800511e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8005122:	2331      	movs	r3, #49	; 0x31
 8005124:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005128:	f107 0310 	add.w	r3, r7, #16
 800512c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005130:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005134:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005138:	f107 030f 	add.w	r3, r7, #15
 800513c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005140:	2301      	movs	r3, #1
 8005142:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005146:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800514a:	2100      	movs	r1, #0
 800514c:	4618      	mov	r0, r3
 800514e:	f000 faa7 	bl	80056a0 <hci_send_req>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	da01      	bge.n	800515c <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8005158:	23ff      	movs	r3, #255	; 0xff
 800515a:	e002      	b.n	8005162 <hci_le_set_default_phy+0xc4>
  return status;
 800515c:	f107 030f 	add.w	r3, r7, #15
 8005160:	781b      	ldrb	r3, [r3, #0]
}
 8005162:	4618      	mov	r0, r3
 8005164:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005168:	46bd      	mov	sp, r7
 800516a:	bd90      	pop	{r4, r7, pc}

0800516c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f002 fcdd 	bl	8007b3c <memcpy>
 8005182:	4603      	mov	r3, r0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f002 fcdb 	bl	8007b58 <memset>
 80051a2:	4603      	mov	r3, r0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return;
 80051b0:	bf00      	nop
}
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <BLS_Init>:

__weak void BLS_Init( void )
{
 80051ba:	b480      	push	{r7}
 80051bc:	af00      	add	r7, sp, #0
  return;
 80051be:	bf00      	nop
}
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return;
 80051cc:	bf00      	nop
}
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <DIS_Init>:
__weak void DIS_Init( void )
{
 80051d6:	b480      	push	{r7}
 80051d8:	af00      	add	r7, sp, #0
  return;
 80051da:	bf00      	nop
}
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  return;
 80051e8:	bf00      	nop
}
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 80051f2:	b480      	push	{r7}
 80051f4:	af00      	add	r7, sp, #0
  return;
 80051f6:	bf00      	nop
}
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HRS_Init>:
__weak void HRS_Init( void )
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return;
 8005204:	bf00      	nop
}
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HTS_Init>:
__weak void HTS_Init( void )
{
 800520e:	b480      	push	{r7}
 8005210:	af00      	add	r7, sp, #0
  return;
 8005212:	bf00      	nop
}
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <IAS_Init>:
__weak void IAS_Init( void )
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  return;
 8005220:	bf00      	nop
}
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <LLS_Init>:
__weak void LLS_Init( void )
{
 800522a:	b480      	push	{r7}
 800522c:	af00      	add	r7, sp, #0
  return;
 800522e:	bf00      	nop
}
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <TPS_Init>:
__weak void TPS_Init( void )
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return;
 800523c:	bf00      	nop
}
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8005246:	b480      	push	{r7}
 8005248:	af00      	add	r7, sp, #0
  return;
 800524a:	bf00      	nop
}
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  return;
 8005258:	bf00      	nop
}
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <ZDD_STM_Init>:
__weak void ZDD_STM_Init( void )
{
 8005262:	b480      	push	{r7}
 8005264:	af00      	add	r7, sp, #0
  return;
 8005266:	bf00      	nop
}
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return;
 8005274:	bf00      	nop
}
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <MESH_Init>:
__weak void MESH_Init( void )
{
 800527e:	b480      	push	{r7}
 8005280:	af00      	add	r7, sp, #0
  return;
 8005282:	bf00      	nop
}
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  return;
 8005290:	bf00      	nop
}
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80052a0:	4b04      	ldr	r3, [pc, #16]	; (80052b4 <SVCCTL_Init+0x18>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80052a6:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <SVCCTL_Init+0x1c>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80052ac:	f000 f806 	bl	80052bc <SVCCTL_SvcInit>

  return;
 80052b0:	bf00      	nop
}
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	200000c8 	.word	0x200000c8
 80052b8:	200000e8 	.word	0x200000e8

080052bc <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  BAS_Init();
 80052c0:	f7ff ff74 	bl	80051ac <BAS_Init>

  BLS_Init();
 80052c4:	f7ff ff79 	bl	80051ba <BLS_Init>

  CRS_STM_Init();
 80052c8:	f7ff ff7e 	bl	80051c8 <CRS_STM_Init>

  DIS_Init();
 80052cc:	f7ff ff83 	bl	80051d6 <DIS_Init>

  EDS_STM_Init();
 80052d0:	f7ff ff88 	bl	80051e4 <EDS_STM_Init>

  HIDS_Init();
 80052d4:	f7ff ff8d 	bl	80051f2 <HIDS_Init>

  HRS_Init();
 80052d8:	f7ff ff92 	bl	8005200 <HRS_Init>

  HTS_Init();
 80052dc:	f7ff ff97 	bl	800520e <HTS_Init>

  IAS_Init();
 80052e0:	f7ff ff9c 	bl	800521c <IAS_Init>

  LLS_Init();
 80052e4:	f7ff ffa1 	bl	800522a <LLS_Init>

  TPS_Init();
 80052e8:	f7ff ffa6 	bl	8005238 <TPS_Init>

  MOTENV_STM_Init();
 80052ec:	f7ff ffab 	bl	8005246 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80052f0:	f7ff ffb0 	bl	8005254 <P2PS_STM_Init>

  ZDD_STM_Init();
 80052f4:	f7ff ffb5 	bl	8005262 <ZDD_STM_Init>

  OTAS_STM_Init();
 80052f8:	f7ff ffba 	bl	8005270 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80052fc:	f7ff ffc6 	bl	800528c <BVOPUS_STM_Init>

  MESH_Init();
 8005300:	f7ff ffbd 	bl	800527e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005304:	f001 fd24 	bl	8006d50 <SVCCTL_InitCustomSvc>
  
  return;
 8005308:	bf00      	nop
}
 800530a:	bd80      	pop	{r7, pc}

0800530c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <SVCCTL_RegisterSvcHandler+0x30>)
 8005316:	7f1b      	ldrb	r3, [r3, #28]
 8005318:	4619      	mov	r1, r3
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <SVCCTL_RegisterSvcHandler+0x30>)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <SVCCTL_RegisterSvcHandler+0x30>)
 8005324:	7f1b      	ldrb	r3, [r3, #28]
 8005326:	3301      	adds	r3, #1
 8005328:	b2da      	uxtb	r2, r3
 800532a:	4b04      	ldr	r3, [pc, #16]	; (800533c <SVCCTL_RegisterSvcHandler+0x30>)
 800532c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800532e:	bf00      	nop
}
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	200000c8 	.word	0x200000c8

08005340 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3301      	adds	r3, #1
 800534c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2bff      	cmp	r3, #255	; 0xff
 8005358:	d125      	bne.n	80053a6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3302      	adds	r3, #2
 800535e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800536a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800536e:	d118      	bne.n	80053a2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005370:	2300      	movs	r3, #0
 8005372:	757b      	strb	r3, [r7, #21]
 8005374:	e00d      	b.n	8005392 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005376:	7d7b      	ldrb	r3, [r7, #21]
 8005378:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <SVCCTL_UserEvtRx+0xa4>)
 800537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
 8005382:	4603      	mov	r3, r0
 8005384:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d108      	bne.n	800539e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800538c:	7d7b      	ldrb	r3, [r7, #21]
 800538e:	3301      	adds	r3, #1
 8005390:	757b      	strb	r3, [r7, #21]
 8005392:	4b14      	ldr	r3, [pc, #80]	; (80053e4 <SVCCTL_UserEvtRx+0xa4>)
 8005394:	7f1b      	ldrb	r3, [r3, #28]
 8005396:	7d7a      	ldrb	r2, [r7, #21]
 8005398:	429a      	cmp	r2, r3
 800539a:	d3ec      	bcc.n	8005376 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800539c:	e002      	b.n	80053a4 <SVCCTL_UserEvtRx+0x64>
              break;
 800539e:	bf00      	nop
          break;
 80053a0:	e000      	b.n	80053a4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80053a2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80053a4:	e000      	b.n	80053a8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80053a6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d00f      	beq.n	80053ce <SVCCTL_UserEvtRx+0x8e>
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	dc10      	bgt.n	80053d4 <SVCCTL_UserEvtRx+0x94>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <SVCCTL_UserEvtRx+0x7c>
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d006      	beq.n	80053c8 <SVCCTL_UserEvtRx+0x88>
 80053ba:	e00b      	b.n	80053d4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 ff6f 	bl	80062a0 <SVCCTL_App_Notification>
 80053c2:	4603      	mov	r3, r0
 80053c4:	75bb      	strb	r3, [r7, #22]
      break;
 80053c6:	e008      	b.n	80053da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75bb      	strb	r3, [r7, #22]
      break;
 80053cc:	e005      	b.n	80053da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75bb      	strb	r3, [r7, #22]
      break;
 80053d2:	e002      	b.n	80053da <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80053d4:	2301      	movs	r3, #1
 80053d6:	75bb      	strb	r3, [r7, #22]
      break;
 80053d8:	bf00      	nop
  }

  return (return_status);
 80053da:	7dbb      	ldrb	r3, [r7, #22]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	200000c8 	.word	0x200000c8

080053e8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80053f0:	f107 030c 	add.w	r3, r7, #12
 80053f4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2125      	movs	r1, #37	; 0x25
 8005400:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8005404:	f000 fae2 	bl	80059cc <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	330b      	adds	r3, #11
 800540c:	78db      	ldrb	r3, [r3, #3]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b088      	sub	sp, #32
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800541e:	f107 030c 	add.w	r3, r7, #12
 8005422:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	210f      	movs	r1, #15
 800542e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8005432:	f000 facb 	bl	80059cc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	330b      	adds	r3, #11
 800543a:	78db      	ldrb	r3, [r3, #3]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800544c:	f107 030c 	add.w	r3, r7, #12
 8005450:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	210e      	movs	r1, #14
 8005458:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800545c:	f000 fab6 	bl	80059cc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	330b      	adds	r3, #11
 8005464:	78db      	ldrb	r3, [r3, #3]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005470:	b480      	push	{r7}
 8005472:	b08b      	sub	sp, #44	; 0x2c
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005498:	4b4a      	ldr	r3, [pc, #296]	; (80055c4 <SHCI_GetWirelessFwInfo+0x154>)
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80054a0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80054aa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a44      	ldr	r2, [pc, #272]	; (80055c8 <SHCI_GetWirelessFwInfo+0x158>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d10f      	bne.n	80054dc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e01a      	b.n	8005512 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80054e4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80054e8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	0e1b      	lsrs	r3, r3, #24
 8005516:	b2da      	uxtb	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	0c1b      	lsrs	r3, r3, #16
 8005520:	b2da      	uxtb	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	0a1b      	lsrs	r3, r3, #8
 800552a:	b2da      	uxtb	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	091b      	lsrs	r3, r3, #4
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	b2da      	uxtb	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	b2da      	uxtb	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	0e1b      	lsrs	r3, r3, #24
 8005552:	b2da      	uxtb	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	0c1b      	lsrs	r3, r3, #16
 800555c:	b2da      	uxtb	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	b2da      	uxtb	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	0e1b      	lsrs	r3, r3, #24
 8005580:	b2da      	uxtb	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	b2da      	uxtb	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	b2da      	uxtb	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	0e1b      	lsrs	r3, r3, #24
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	372c      	adds	r7, #44	; 0x2c
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	58004000 	.word	0x58004000
 80055c8:	a94656b9 	.word	0xa94656b9

080055cc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a08      	ldr	r2, [pc, #32]	; (80055fc <hci_init+0x30>)
 80055dc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80055de:	4a08      	ldr	r2, [pc, #32]	; (8005600 <hci_init+0x34>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80055e4:	4806      	ldr	r0, [pc, #24]	; (8005600 <hci_init+0x34>)
 80055e6:	f000 f973 	bl	80058d0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f8d4 	bl	800579c <TlInit>

  return;
 80055f4:	bf00      	nop
}
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	200001f4 	.word	0x200001f4
 8005600:	200001cc 	.word	0x200001cc

08005604 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800560a:	4822      	ldr	r0, [pc, #136]	; (8005694 <hci_user_evt_proc+0x90>)
 800560c:	f000 fd28 	bl	8006060 <LST_is_empty>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d12b      	bne.n	800566e <hci_user_evt_proc+0x6a>
 8005616:	4b20      	ldr	r3, [pc, #128]	; (8005698 <hci_user_evt_proc+0x94>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d027      	beq.n	800566e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800561e:	f107 030c 	add.w	r3, r7, #12
 8005622:	4619      	mov	r1, r3
 8005624:	481b      	ldr	r0, [pc, #108]	; (8005694 <hci_user_evt_proc+0x90>)
 8005626:	f000 fdaa 	bl	800617e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800562a:	4b1c      	ldr	r3, [pc, #112]	; (800569c <hci_user_evt_proc+0x98>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00c      	beq.n	800564c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005636:	2301      	movs	r3, #1
 8005638:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <hci_user_evt_proc+0x98>)
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	1d3a      	adds	r2, r7, #4
 8005640:	4610      	mov	r0, r2
 8005642:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005644:	793a      	ldrb	r2, [r7, #4]
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <hci_user_evt_proc+0x94>)
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e002      	b.n	8005652 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800564c:	4b12      	ldr	r3, [pc, #72]	; (8005698 <hci_user_evt_proc+0x94>)
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005652:	4b11      	ldr	r3, [pc, #68]	; (8005698 <hci_user_evt_proc+0x94>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d004      	beq.n	8005664 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fc03 	bl	8005e68 <TL_MM_EvtDone>
 8005662:	e004      	b.n	800566e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4619      	mov	r1, r3
 8005668:	480a      	ldr	r0, [pc, #40]	; (8005694 <hci_user_evt_proc+0x90>)
 800566a:	f000 fd1b 	bl	80060a4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800566e:	4809      	ldr	r0, [pc, #36]	; (8005694 <hci_user_evt_proc+0x90>)
 8005670:	f000 fcf6 	bl	8006060 <LST_is_empty>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d107      	bne.n	800568a <hci_user_evt_proc+0x86>
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <hci_user_evt_proc+0x94>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8005682:	4804      	ldr	r0, [pc, #16]	; (8005694 <hci_user_evt_proc+0x90>)
 8005684:	f001 f80a 	bl	800669c <hci_notify_asynch_evt>
  }


  return;
 8005688:	bf00      	nop
 800568a:	bf00      	nop
}
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200000f0 	.word	0x200000f0
 8005698:	200000fc 	.word	0x200000fc
 800569c:	200001cc 	.word	0x200001cc

080056a0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80056ac:	2000      	movs	r0, #0
 80056ae:	f000 f8cb 	bl	8005848 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80056b2:	2300      	movs	r3, #0
 80056b4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	885b      	ldrh	r3, [r3, #2]
 80056ba:	b21b      	sxth	r3, r3
 80056bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c0:	b21a      	sxth	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	029b      	lsls	r3, r3, #10
 80056c8:	b21b      	sxth	r3, r3
 80056ca:	4313      	orrs	r3, r2
 80056cc:	b21b      	sxth	r3, r3
 80056ce:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	b2d9      	uxtb	r1, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	8bbb      	ldrh	r3, [r7, #28]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 f88d 	bl	80057fc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80056e2:	e04e      	b.n	8005782 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80056e4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80056e8:	f000 ffef 	bl	80066ca <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80056ec:	e043      	b.n	8005776 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80056ee:	f107 030c 	add.w	r3, r7, #12
 80056f2:	4619      	mov	r1, r3
 80056f4:	4828      	ldr	r0, [pc, #160]	; (8005798 <hci_send_req+0xf8>)
 80056f6:	f000 fd42 	bl	800617e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	7a5b      	ldrb	r3, [r3, #9]
 80056fe:	2b0f      	cmp	r3, #15
 8005700:	d114      	bne.n	800572c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	330b      	adds	r3, #11
 8005706:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	885b      	ldrh	r3, [r3, #2]
 800570c:	b29b      	uxth	r3, r3
 800570e:	8bba      	ldrh	r2, [r7, #28]
 8005710:	429a      	cmp	r2, r3
 8005712:	d104      	bne.n	800571e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d027      	beq.n	8005776 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005726:	2301      	movs	r3, #1
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e024      	b.n	8005776 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	330b      	adds	r3, #11
 8005730:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005738:	b29b      	uxth	r3, r3
 800573a:	8bba      	ldrh	r2, [r7, #28]
 800573c:	429a      	cmp	r2, r3
 800573e:	d114      	bne.n	800576a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7a9b      	ldrb	r3, [r3, #10]
 8005744:	3b03      	subs	r3, #3
 8005746:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	7dfb      	ldrb	r3, [r7, #23]
 800574e:	429a      	cmp	r2, r3
 8005750:	bfa8      	it	ge
 8005752:	461a      	movge	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6918      	ldr	r0, [r3, #16]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	1cd9      	adds	r1, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	461a      	mov	r2, r3
 8005766:	f002 f9e9 	bl	8007b3c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005772:	2301      	movs	r3, #1
 8005774:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005776:	4808      	ldr	r0, [pc, #32]	; (8005798 <hci_send_req+0xf8>)
 8005778:	f000 fc72 	bl	8006060 <LST_is_empty>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0b5      	beq.n	80056ee <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8005782:	7ffb      	ldrb	r3, [r7, #31]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0ad      	beq.n	80056e4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005788:	2001      	movs	r0, #1
 800578a:	f000 f85d 	bl	8005848 <NotifyCmdStatus>

  return 0;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	200001ec 	.word	0x200001ec

0800579c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80057a4:	480f      	ldr	r0, [pc, #60]	; (80057e4 <TlInit+0x48>)
 80057a6:	f000 fc4b 	bl	8006040 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80057aa:	4a0f      	ldr	r2, [pc, #60]	; (80057e8 <TlInit+0x4c>)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80057b0:	480e      	ldr	r0, [pc, #56]	; (80057ec <TlInit+0x50>)
 80057b2:	f000 fc45 	bl	8006040 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80057b6:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <TlInit+0x54>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <TlInit+0x58>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <TlInit+0x5c>)
 80057ca:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80057cc:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <TlInit+0x58>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f107 0208 	add.w	r2, r7, #8
 80057d4:	4610      	mov	r0, r2
 80057d6:	4798      	blx	r3
  }

  return;
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
}
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	200001ec 	.word	0x200001ec
 80057e8:	200000f8 	.word	0x200000f8
 80057ec:	200000f0 	.word	0x200000f0
 80057f0:	200000fc 	.word	0x200000fc
 80057f4:	200001cc 	.word	0x200001cc
 80057f8:	08005889 	.word	0x08005889

080057fc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	603a      	str	r2, [r7, #0]
 8005806:	80fb      	strh	r3, [r7, #6]
 8005808:	460b      	mov	r3, r1
 800580a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <SendCmd+0x44>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <SendCmd+0x44>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	797a      	ldrb	r2, [r7, #5]
 800581c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <SendCmd+0x44>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	797a      	ldrb	r2, [r7, #5]
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f002 f987 	bl	8007b3c <memcpy>

  hciContext.io.Send(0,0);
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <SendCmd+0x48>)
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2100      	movs	r1, #0
 8005834:	2000      	movs	r0, #0
 8005836:	4798      	blx	r3

  return;
 8005838:	bf00      	nop
}
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200000f8 	.word	0x200000f8
 8005844:	200001cc 	.word	0x200001cc

08005848 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <NotifyCmdStatus+0x3c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00d      	beq.n	800587c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005860:	4b08      	ldr	r3, [pc, #32]	; (8005884 <NotifyCmdStatus+0x3c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2000      	movs	r0, #0
 8005866:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005868:	e008      	b.n	800587c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <NotifyCmdStatus+0x3c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005872:	4b04      	ldr	r3, [pc, #16]	; (8005884 <NotifyCmdStatus+0x3c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2001      	movs	r0, #1
 8005878:	4798      	blx	r3
  return;
 800587a:	bf00      	nop
 800587c:	bf00      	nop
}
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	200001f4 	.word	0x200001f4

08005888 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7a5b      	ldrb	r3, [r3, #9]
 8005894:	2b0f      	cmp	r3, #15
 8005896:	d003      	beq.n	80058a0 <TlEvtReceived+0x18>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	7a5b      	ldrb	r3, [r3, #9]
 800589c:	2b0e      	cmp	r3, #14
 800589e:	d107      	bne.n	80058b0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4809      	ldr	r0, [pc, #36]	; (80058c8 <TlEvtReceived+0x40>)
 80058a4:	f000 fc24 	bl	80060f0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80058a8:	2000      	movs	r0, #0
 80058aa:	f000 ff03 	bl	80066b4 <hci_cmd_resp_release>
 80058ae:	e006      	b.n	80058be <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4806      	ldr	r0, [pc, #24]	; (80058cc <TlEvtReceived+0x44>)
 80058b4:	f000 fc1c 	bl	80060f0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80058b8:	4804      	ldr	r0, [pc, #16]	; (80058cc <TlEvtReceived+0x44>)
 80058ba:	f000 feef 	bl	800669c <hci_notify_asynch_evt>
  }

  return;
 80058be:	bf00      	nop
}
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	200001ec 	.word	0x200001ec
 80058cc:	200000f0 	.word	0x200000f0

080058d0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a05      	ldr	r2, [pc, #20]	; (80058f0 <hci_register_io_bus+0x20>)
 80058dc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <hci_register_io_bus+0x24>)
 80058e2:	611a      	str	r2, [r3, #16]

  return;
 80058e4:	bf00      	nop
}
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	08005be1 	.word	0x08005be1
 80058f4:	08005c49 	.word	0x08005c49

080058f8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4a08      	ldr	r2, [pc, #32]	; (8005928 <shci_init+0x30>)
 8005908:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800590a:	4a08      	ldr	r2, [pc, #32]	; (800592c <shci_init+0x34>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005910:	4806      	ldr	r0, [pc, #24]	; (800592c <shci_init+0x34>)
 8005912:	f000 f911 	bl	8005b38 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f894 	bl	8005a48 <TlInit>

  return;
 8005920:	bf00      	nop
}
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000218 	.word	0x20000218
 800592c:	200001f8 	.word	0x200001f8

08005930 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005936:	4822      	ldr	r0, [pc, #136]	; (80059c0 <shci_user_evt_proc+0x90>)
 8005938:	f000 fb92 	bl	8006060 <LST_is_empty>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d12b      	bne.n	800599a <shci_user_evt_proc+0x6a>
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <shci_user_evt_proc+0x94>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d027      	beq.n	800599a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	4619      	mov	r1, r3
 8005950:	481b      	ldr	r0, [pc, #108]	; (80059c0 <shci_user_evt_proc+0x90>)
 8005952:	f000 fc14 	bl	800617e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <shci_user_evt_proc+0x98>)
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00c      	beq.n	8005978 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005962:	2301      	movs	r3, #1
 8005964:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005966:	4b18      	ldr	r3, [pc, #96]	; (80059c8 <shci_user_evt_proc+0x98>)
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	1d3a      	adds	r2, r7, #4
 800596c:	4610      	mov	r0, r2
 800596e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005970:	793a      	ldrb	r2, [r7, #4]
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <shci_user_evt_proc+0x94>)
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	e002      	b.n	800597e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005978:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <shci_user_evt_proc+0x94>)
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800597e:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <shci_user_evt_proc+0x94>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fa6d 	bl	8005e68 <TL_MM_EvtDone>
 800598e:	e004      	b.n	800599a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4619      	mov	r1, r3
 8005994:	480a      	ldr	r0, [pc, #40]	; (80059c0 <shci_user_evt_proc+0x90>)
 8005996:	f000 fb85 	bl	80060a4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800599a:	4809      	ldr	r0, [pc, #36]	; (80059c0 <shci_user_evt_proc+0x90>)
 800599c:	f000 fb60 	bl	8006060 <LST_is_empty>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d107      	bne.n	80059b6 <shci_user_evt_proc+0x86>
 80059a6:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <shci_user_evt_proc+0x94>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80059ae:	4804      	ldr	r0, [pc, #16]	; (80059c0 <shci_user_evt_proc+0x90>)
 80059b0:	f7fa fef1 	bl	8000796 <shci_notify_asynch_evt>
  }


  return;
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
}
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	2000010c 	.word	0x2000010c
 80059c4:	2000011c 	.word	0x2000011c
 80059c8:	200001f8 	.word	0x200001f8

080059cc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60ba      	str	r2, [r7, #8]
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	4603      	mov	r3, r0
 80059d8:	81fb      	strh	r3, [r7, #14]
 80059da:	460b      	mov	r3, r1
 80059dc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80059de:	2000      	movs	r0, #0
 80059e0:	f000 f864 	bl	8005aac <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80059e4:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <shci_send+0x74>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	89fa      	ldrh	r2, [r7, #14]
 80059ea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80059ee:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <shci_send+0x74>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	7b7a      	ldrb	r2, [r7, #13]
 80059f4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80059f6:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <shci_send+0x74>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	7b7a      	ldrb	r2, [r7, #13]
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f002 f89b 	bl	8007b3c <memcpy>

  shciContext.io.Send(0,0);
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <shci_send+0x78>)
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005a10:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005a14:	f7fa fed6 	bl	80007c4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f103 0008 	add.w	r0, r3, #8
 8005a1e:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <shci_send+0x74>)
 8005a20:	6819      	ldr	r1, [r3, #0]
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <shci_send+0x74>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	789b      	ldrb	r3, [r3, #2]
 8005a28:	3303      	adds	r3, #3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f002 f886 	bl	8007b3c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005a30:	2001      	movs	r0, #1
 8005a32:	f000 f83b 	bl	8005aac <Cmd_SetStatus>

  return;
 8005a36:	bf00      	nop
}
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000118 	.word	0x20000118
 8005a44:	200001f8 	.word	0x200001f8

08005a48 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005a50:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <TlInit+0x4c>)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005a56:	4810      	ldr	r0, [pc, #64]	; (8005a98 <TlInit+0x50>)
 8005a58:	f000 faf2 	bl	8006040 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	f000 f825 	bl	8005aac <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005a62:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <TlInit+0x54>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005a68:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <TlInit+0x58>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00c      	beq.n	8005a8a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <TlInit+0x5c>)
 8005a76:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <TlInit+0x60>)
 8005a7a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005a7c:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <TlInit+0x58>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f107 020c 	add.w	r2, r7, #12
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
  }

  return;
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
}
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000118 	.word	0x20000118
 8005a98:	2000010c 	.word	0x2000010c
 8005a9c:	2000011c 	.word	0x2000011c
 8005aa0:	200001f8 	.word	0x200001f8
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005b15 	.word	0x08005b15

08005aac <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10b      	bne.n	8005ad4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <Cmd_SetStatus+0x48>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <Cmd_SetStatus+0x48>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2000      	movs	r0, #0
 8005aca:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <Cmd_SetStatus+0x4c>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005ad2:	e00b      	b.n	8005aec <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005ad4:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <Cmd_SetStatus+0x4c>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <Cmd_SetStatus+0x48>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005ae2:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <Cmd_SetStatus+0x48>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	4798      	blx	r3
  return;
 8005aea:	bf00      	nop
 8005aec:	bf00      	nop
}
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000218 	.word	0x20000218
 8005af8:	20000114 	.word	0x20000114

08005afc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005b04:	2000      	movs	r0, #0
 8005b06:	f7fa fe52 	bl	80007ae <shci_cmd_resp_release>

  return;
 8005b0a:	bf00      	nop
}
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4805      	ldr	r0, [pc, #20]	; (8005b34 <TlUserEvtReceived+0x20>)
 8005b20:	f000 fae6 	bl	80060f0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005b24:	4803      	ldr	r0, [pc, #12]	; (8005b34 <TlUserEvtReceived+0x20>)
 8005b26:	f7fa fe36 	bl	8000796 <shci_notify_asynch_evt>

  return;
 8005b2a:	bf00      	nop
}
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2000010c 	.word	0x2000010c

08005b38 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a05      	ldr	r2, [pc, #20]	; (8005b58 <shci_register_io_bus+0x20>)
 8005b44:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <shci_register_io_bus+0x24>)
 8005b4a:	611a      	str	r2, [r3, #16]

  return;
 8005b4c:	bf00      	nop
}
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	08005cf5 	.word	0x08005cf5
 8005b5c:	08005d49 	.word	0x08005d49

08005b60 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005b64:	f001 fc84 	bl	8007470 <HW_IPCC_Enable>

  return;
 8005b68:	bf00      	nop
}
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <TL_Init>:


void TL_Init( void )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005b70:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <TL_Init+0x48>)
 8005b72:	4a11      	ldr	r2, [pc, #68]	; (8005bb8 <TL_Init+0x4c>)
 8005b74:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <TL_Init+0x48>)
 8005b78:	4a10      	ldr	r2, [pc, #64]	; (8005bbc <TL_Init+0x50>)
 8005b7a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <TL_Init+0x48>)
 8005b7e:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <TL_Init+0x54>)
 8005b80:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <TL_Init+0x48>)
 8005b84:	4a0f      	ldr	r2, [pc, #60]	; (8005bc4 <TL_Init+0x58>)
 8005b86:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005b88:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <TL_Init+0x48>)
 8005b8a:	4a0f      	ldr	r2, [pc, #60]	; (8005bc8 <TL_Init+0x5c>)
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <TL_Init+0x48>)
 8005b90:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <TL_Init+0x60>)
 8005b92:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <TL_Init+0x48>)
 8005b96:	4a0e      	ldr	r2, [pc, #56]	; (8005bd0 <TL_Init+0x64>)
 8005b98:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <TL_Init+0x48>)
 8005b9c:	4a0d      	ldr	r2, [pc, #52]	; (8005bd4 <TL_Init+0x68>)
 8005b9e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005ba0:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <TL_Init+0x48>)
 8005ba2:	4a0d      	ldr	r2, [pc, #52]	; (8005bd8 <TL_Init+0x6c>)
 8005ba4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005ba6:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <TL_Init+0x48>)
 8005ba8:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <TL_Init+0x70>)
 8005baa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005bac:	f001 fc74 	bl	8007498 <HW_IPCC_Init>

  return;
 8005bb0:	bf00      	nop
}
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20030000 	.word	0x20030000
 8005bb8:	20030028 	.word	0x20030028
 8005bbc:	20030048 	.word	0x20030048
 8005bc0:	20030058 	.word	0x20030058
 8005bc4:	20030064 	.word	0x20030064
 8005bc8:	2003006c 	.word	0x2003006c
 8005bcc:	20030074 	.word	0x20030074
 8005bd0:	2003007c 	.word	0x2003007c
 8005bd4:	20030098 	.word	0x20030098
 8005bd8:	2003009c 	.word	0x2003009c
 8005bdc:	200300a8 	.word	0x200300a8

08005be0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005bec:	4811      	ldr	r0, [pc, #68]	; (8005c34 <TL_BLE_Init+0x54>)
 8005bee:	f000 fa27 	bl	8006040 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005bf2:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <TL_BLE_Init+0x58>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4a0c      	ldr	r2, [pc, #48]	; (8005c3c <TL_BLE_Init+0x5c>)
 8005c0c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a08      	ldr	r2, [pc, #32]	; (8005c34 <TL_BLE_Init+0x54>)
 8005c12:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005c14:	f001 fc56 	bl	80074c4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <TL_BLE_Init+0x60>)
 8005c1e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a07      	ldr	r2, [pc, #28]	; (8005c44 <TL_BLE_Init+0x64>)
 8005c26:	6013      	str	r3, [r2, #0]

  return 0;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200300c4 	.word	0x200300c4
 8005c38:	20030000 	.word	0x20030000
 8005c3c:	20030a48 	.word	0x20030a48
 8005c40:	20000224 	.word	0x20000224
 8005c44:	20000228 	.word	0x20000228

08005c48 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <TL_BLE_SendCmd+0x34>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <TL_BLE_SendCmd+0x34>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4619      	mov	r1, r3
 8005c66:	2001      	movs	r0, #1
 8005c68:	f000 f96c 	bl	8005f44 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005c6c:	f001 fc34 	bl	80074d8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20030000 	.word	0x20030000

08005c80 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005c86:	e01c      	b.n	8005cc2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4812      	ldr	r0, [pc, #72]	; (8005cd8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005c8e:	f000 fa76 	bl	800617e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	7a5b      	ldrb	r3, [r3, #9]
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	d003      	beq.n	8005ca2 <HW_IPCC_BLE_RxEvtNot+0x22>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	7a5b      	ldrb	r3, [r3, #9]
 8005c9e:	2b0e      	cmp	r3, #14
 8005ca0:	d105      	bne.n	8005cae <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	2002      	movs	r0, #2
 8005ca8:	f000 f94c 	bl	8005f44 <OutputDbgTrace>
 8005cac:	e004      	b.n	8005cb8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	2003      	movs	r0, #3
 8005cb4:	f000 f946 	bl	8005f44 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005cb8:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005cc2:	4805      	ldr	r0, [pc, #20]	; (8005cd8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005cc4:	f000 f9cc 	bl	8006060 <LST_is_empty>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0dc      	beq.n	8005c88 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005cce:	bf00      	nop
}
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	200300c4 	.word	0x200300c4
 8005cdc:	20000224 	.word	0x20000224

08005ce0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4798      	blx	r3

  return;
 8005cea:	bf00      	nop
}
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000228 	.word	0x20000228

08005cf4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005d00:	480d      	ldr	r0, [pc, #52]	; (8005d38 <TL_SYS_Init+0x44>)
 8005d02:	f000 f99d 	bl	8006040 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005d06:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <TL_SYS_Init+0x48>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <TL_SYS_Init+0x44>)
 8005d18:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005d1a:	f001 fbff 	bl	800751c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <TL_SYS_Init+0x4c>)
 8005d24:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	4a06      	ldr	r2, [pc, #24]	; (8005d44 <TL_SYS_Init+0x50>)
 8005d2c:	6013      	str	r3, [r2, #0]

  return 0;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	200300cc 	.word	0x200300cc
 8005d3c:	20030000 	.word	0x20030000
 8005d40:	2000022c 	.word	0x2000022c
 8005d44:	20000230 	.word	0x20000230

08005d48 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <TL_SYS_SendCmd+0x34>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <TL_SYS_SendCmd+0x34>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	2004      	movs	r0, #4
 8005d68:	f000 f8ec 	bl	8005f44 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005d6c:	f001 fbe0 	bl	8007530 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20030000 	.word	0x20030000

08005d80 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005d84:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	2005      	movs	r0, #5
 8005d8e:	f000 f8d9 	bl	8005f44 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a03      	ldr	r2, [pc, #12]	; (8005da4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005d98:	68d2      	ldr	r2, [r2, #12]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3

  return;
 8005da0:	bf00      	nop
}
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20030000 	.word	0x20030000
 8005da8:	2000022c 	.word	0x2000022c

08005dac <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005db2:	e00e      	b.n	8005dd2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005db4:	1d3b      	adds	r3, r7, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	480b      	ldr	r0, [pc, #44]	; (8005de8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005dba:	f000 f9e0 	bl	800617e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	2006      	movs	r0, #6
 8005dc4:	f000 f8be 	bl	8005f44 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <HW_IPCC_SYS_EvtNot+0x40>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005dd2:	4805      	ldr	r0, [pc, #20]	; (8005de8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005dd4:	f000 f944 	bl	8006060 <LST_is_empty>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0ea      	beq.n	8005db4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005dde:	bf00      	nop
}
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200300cc 	.word	0x200300cc
 8005dec:	20000230 	.word	0x20000230

08005df0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005df8:	4817      	ldr	r0, [pc, #92]	; (8005e58 <TL_MM_Init+0x68>)
 8005dfa:	f000 f921 	bl	8006040 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005dfe:	4817      	ldr	r0, [pc, #92]	; (8005e5c <TL_MM_Init+0x6c>)
 8005e00:	f000 f91e 	bl	8006040 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005e04:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <TL_MM_Init+0x70>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <TL_MM_Init+0x74>)
 8005e0a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005e0c:	4b15      	ldr	r3, [pc, #84]	; (8005e64 <TL_MM_Init+0x74>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6892      	ldr	r2, [r2, #8]
 8005e14:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005e16:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <TL_MM_Init+0x74>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	68d2      	ldr	r2, [r2, #12]
 8005e1e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005e20:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <TL_MM_Init+0x74>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <TL_MM_Init+0x68>)
 8005e26:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005e28:	4b0e      	ldr	r3, [pc, #56]	; (8005e64 <TL_MM_Init+0x74>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <TL_MM_Init+0x74>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6852      	ldr	r2, [r2, #4]
 8005e3a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <TL_MM_Init+0x74>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6912      	ldr	r2, [r2, #16]
 8005e44:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005e46:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <TL_MM_Init+0x74>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6952      	ldr	r2, [r2, #20]
 8005e4e:	619a      	str	r2, [r3, #24]

  return;
 8005e50:	bf00      	nop
}
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	200300b4 	.word	0x200300b4
 8005e5c:	2000021c 	.word	0x2000021c
 8005e60:	20030000 	.word	0x20030000
 8005e64:	20000234 	.word	0x20000234

08005e68 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4807      	ldr	r0, [pc, #28]	; (8005e90 <TL_MM_EvtDone+0x28>)
 8005e74:	f000 f93c 	bl	80060f0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	f000 f862 	bl	8005f44 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005e80:	4804      	ldr	r0, [pc, #16]	; (8005e94 <TL_MM_EvtDone+0x2c>)
 8005e82:	f001 fb7b 	bl	800757c <HW_IPCC_MM_SendFreeBuf>

  return;
 8005e86:	bf00      	nop
}
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	2000021c 	.word	0x2000021c
 8005e94:	08005e99 	.word	0x08005e99

08005e98 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005e9e:	e00c      	b.n	8005eba <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	480a      	ldr	r0, [pc, #40]	; (8005ed0 <SendFreeBuf+0x38>)
 8005ea6:	f000 f96a 	bl	800617e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <SendFreeBuf+0x3c>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 f91b 	bl	80060f0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005eba:	4805      	ldr	r0, [pc, #20]	; (8005ed0 <SendFreeBuf+0x38>)
 8005ebc:	f000 f8d0 	bl	8006060 <LST_is_empty>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0ec      	beq.n	8005ea0 <SendFreeBuf+0x8>
  }

  return;
 8005ec6:	bf00      	nop
}
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	2000021c 	.word	0x2000021c
 8005ed4:	20030000 	.word	0x20030000

08005ed8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005edc:	4805      	ldr	r0, [pc, #20]	; (8005ef4 <TL_TRACES_Init+0x1c>)
 8005ede:	f000 f8af 	bl	8006040 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <TL_TRACES_Init+0x20>)
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	4a03      	ldr	r2, [pc, #12]	; (8005ef4 <TL_TRACES_Init+0x1c>)
 8005ee8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005eea:	f001 fb7d 	bl	80075e8 <HW_IPCC_TRACES_Init>

  return;
 8005eee:	bf00      	nop
}
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	200300bc 	.word	0x200300bc
 8005ef8:	20030000 	.word	0x20030000

08005efc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005f02:	e008      	b.n	8005f16 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005f04:	1d3b      	adds	r3, r7, #4
 8005f06:	4619      	mov	r1, r3
 8005f08:	4808      	ldr	r0, [pc, #32]	; (8005f2c <HW_IPCC_TRACES_EvtNot+0x30>)
 8005f0a:	f000 f938 	bl	800617e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 f80d 	bl	8005f30 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005f16:	4805      	ldr	r0, [pc, #20]	; (8005f2c <HW_IPCC_TRACES_EvtNot+0x30>)
 8005f18:	f000 f8a2 	bl	8006060 <LST_is_empty>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005f22:	bf00      	nop
}
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200300bc 	.word	0x200300bc

08005f30 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	2b06      	cmp	r3, #6
 8005f54:	d845      	bhi.n	8005fe2 <OutputDbgTrace+0x9e>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <OutputDbgTrace+0x18>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f79 	.word	0x08005f79
 8005f60:	08005f9d 	.word	0x08005f9d
 8005f64:	08005fa3 	.word	0x08005fa3
 8005f68:	08005fb7 	.word	0x08005fb7
 8005f6c:	08005fc3 	.word	0x08005fc3
 8005f70:	08005fc9 	.word	0x08005fc9
 8005f74:	08005fd7 	.word	0x08005fd7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	7a5b      	ldrb	r3, [r3, #9]
 8005f80:	2bff      	cmp	r3, #255	; 0xff
 8005f82:	d005      	beq.n	8005f90 <OutputDbgTrace+0x4c>
 8005f84:	2bff      	cmp	r3, #255	; 0xff
 8005f86:	dc05      	bgt.n	8005f94 <OutputDbgTrace+0x50>
 8005f88:	2b0e      	cmp	r3, #14
 8005f8a:	d005      	beq.n	8005f98 <OutputDbgTrace+0x54>
 8005f8c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8005f8e:	e001      	b.n	8005f94 <OutputDbgTrace+0x50>
          break;
 8005f90:	bf00      	nop
 8005f92:	e027      	b.n	8005fe4 <OutputDbgTrace+0xa0>
          break;
 8005f94:	bf00      	nop
 8005f96:	e025      	b.n	8005fe4 <OutputDbgTrace+0xa0>
          break;
 8005f98:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8005f9a:	e023      	b.n	8005fe4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005fa0:	e020      	b.n	8005fe4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	7a5b      	ldrb	r3, [r3, #9]
 8005faa:	2b0e      	cmp	r3, #14
 8005fac:	d001      	beq.n	8005fb2 <OutputDbgTrace+0x6e>
 8005fae:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005fb0:	e000      	b.n	8005fb4 <OutputDbgTrace+0x70>
          break;
 8005fb2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005fb4:	e016      	b.n	8005fe4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	7a5b      	ldrb	r3, [r3, #9]
 8005fbe:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005fc0:	e010      	b.n	8005fe4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005fc6:	e00d      	b.n	8005fe4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	7a5b      	ldrb	r3, [r3, #9]
 8005fd0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005fd2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005fd4:	e006      	b.n	8005fe4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	7a5b      	ldrb	r3, [r3, #9]
 8005fde:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005fe0:	e000      	b.n	8005fe4 <OutputDbgTrace+0xa0>

    default:
      break;
 8005fe2:	bf00      	nop
  }

  return;
 8005fe4:	bf00      	nop
}
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8005ffa:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <OTP_Read+0x48>)
 8005ffc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005ffe:	e002      	b.n	8006006 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3b08      	subs	r3, #8
 8006004:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3307      	adds	r3, #7
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	79fa      	ldrb	r2, [r7, #7]
 800600e:	429a      	cmp	r2, r3
 8006010:	d003      	beq.n	800601a <OTP_Read+0x2a>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4a09      	ldr	r2, [pc, #36]	; (800603c <OTP_Read+0x4c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d1f2      	bne.n	8006000 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3307      	adds	r3, #7
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	79fa      	ldrb	r2, [r7, #7]
 8006022:	429a      	cmp	r2, r3
 8006024:	d001      	beq.n	800602a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800602a:	68fb      	ldr	r3, [r7, #12]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	1fff73f8 	.word	0x1fff73f8
 800603c:	1fff7000 	.word	0x1fff7000

08006040 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	605a      	str	r2, [r3, #4]
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006068:	f3ef 8310 	mrs	r3, PRIMASK
 800606c:	60fb      	str	r3, [r7, #12]
  return(result);
 800606e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006072:	b672      	cpsid	i
}
 8006074:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d102      	bne.n	8006086 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006080:	2301      	movs	r3, #1
 8006082:	75fb      	strb	r3, [r7, #23]
 8006084:	e001      	b.n	800608a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f383 8810 	msr	PRIMASK, r3
}
 8006094:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006096:	7dfb      	ldrb	r3, [r7, #23]
}
 8006098:	4618      	mov	r0, r3
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ae:	f3ef 8310 	mrs	r3, PRIMASK
 80060b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80060b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80060b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80060b8:	b672      	cpsid	i
}
 80060ba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	605a      	str	r2, [r3, #4]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f383 8810 	msr	PRIMASK, r3
}
 80060e2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060fa:	f3ef 8310 	mrs	r3, PRIMASK
 80060fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006100:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006104:	b672      	cpsid	i
}
 8006106:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f383 8810 	msr	PRIMASK, r3
}
 800612e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006144:	f3ef 8310 	mrs	r3, PRIMASK
 8006148:	60fb      	str	r3, [r7, #12]
  return(result);
 800614a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800614c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800614e:	b672      	cpsid	i
}
 8006150:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6852      	ldr	r2, [r2, #4]
 8006164:	605a      	str	r2, [r3, #4]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f383 8810 	msr	PRIMASK, r3
}
 8006170:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006188:	f3ef 8310 	mrs	r3, PRIMASK
 800618c:	60fb      	str	r3, [r7, #12]
  return(result);
 800618e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006192:	b672      	cpsid	i
}
 8006194:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff ffca 	bl	800613c <LST_remove_node>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f383 8810 	msr	PRIMASK, r3
}
 80061b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80061b4:	bf00      	nop
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80061c0:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <LL_FLASH_GetUDN+0x14>)
 80061c2:	681b      	ldr	r3, [r3, #0]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	1fff7580 	.word	0x1fff7580

080061d4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80061d8:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <LL_FLASH_GetDeviceID+0x14>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
}
 80061de:	4618      	mov	r0, r3
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	1fff7584 	.word	0x1fff7584

080061ec <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <LL_FLASH_GetSTCompanyID+0x14>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	0a1b      	lsrs	r3, r3, #8
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	1fff7584 	.word	0x1fff7584

08006204 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8006204:	b5b0      	push	{r4, r5, r7, lr}
 8006206:	b08e      	sub	sp, #56	; 0x38
 8006208:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800620a:	4b21      	ldr	r3, [pc, #132]	; (8006290 <APP_BLE_Init+0x8c>)
 800620c:	1d3c      	adds	r4, r7, #4
 800620e:	461d      	mov	r5, r3
 8006210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800621a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8006220:	f000 f8fe 	bl	8006420 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8006224:	2101      	movs	r1, #1
 8006226:	2002      	movs	r0, #2
 8006228:	f001 fa06 	bl	8007638 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800622c:	4a19      	ldr	r2, [pc, #100]	; (8006294 <APP_BLE_Init+0x90>)
 800622e:	2100      	movs	r1, #0
 8006230:	2002      	movs	r0, #2
 8006232:	f001 fb1b 	bl	800786c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff f8d5 	bl	80053e8 <SHCI_C2_BLE_Init>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8006244:	f7fb fa4c 	bl	80016e0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006248:	f000 f900 	bl	800644c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800624c:	f7ff f826 	bl	800529c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006250:	4b11      	ldr	r3, [pc, #68]	; (8006298 <APP_BLE_Init+0x94>)
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8006258:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <APP_BLE_Init+0x94>)
 800625a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800625e:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8006260:	4a0e      	ldr	r2, [pc, #56]	; (800629c <APP_BLE_Init+0x98>)
 8006262:	2100      	movs	r1, #0
 8006264:	2001      	movs	r0, #1
 8006266:	f001 fb01 	bl	800786c <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800626a:	2006      	movs	r0, #6
 800626c:	f7fe fe50 	bl	8004f10 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8006270:	f000 fa81 	bl	8006776 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <APP_BLE_Init+0x94>)
 8006276:	2200      	movs	r2, #0
 8006278:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <APP_BLE_Init+0x94>)
 800627c:	2200      	movs	r2, #0
 800627e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8006280:	2001      	movs	r0, #1
 8006282:	f000 f97d 	bl	8006580 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8006286:	bf00      	nop
}
 8006288:	3738      	adds	r7, #56	; 0x38
 800628a:	46bd      	mov	sp, r7
 800628c:	bdb0      	pop	{r4, r5, r7, pc}
 800628e:	bf00      	nop
 8006290:	08007bc8 	.word	0x08007bc8
 8006294:	08005605 	.word	0x08005605
 8006298:	20000120 	.word	0x20000120
 800629c:	08006669 	.word	0x08006669

080062a0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3301      	adds	r3, #1
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2bff      	cmp	r3, #255	; 0xff
 80062b4:	d053      	beq.n	800635e <SVCCTL_App_Notification+0xbe>
 80062b6:	2bff      	cmp	r3, #255	; 0xff
 80062b8:	f300 80a3 	bgt.w	8006402 <SVCCTL_App_Notification+0x162>
 80062bc:	2b05      	cmp	r3, #5
 80062be:	d002      	beq.n	80062c6 <SVCCTL_App_Notification+0x26>
 80062c0:	2b3e      	cmp	r3, #62	; 0x3e
 80062c2:	d020      	beq.n	8006306 <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80062c4:	e09d      	b.n	8006402 <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	3302      	adds	r3, #2
 80062ca:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	4b4f      	ldr	r3, [pc, #316]	; (8006414 <SVCCTL_App_Notification+0x174>)
 80062d6:	8adb      	ldrh	r3, [r3, #22]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d106      	bne.n	80062ea <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80062dc:	4b4d      	ldr	r3, [pc, #308]	; (8006414 <SVCCTL_App_Notification+0x174>)
 80062de:	2200      	movs	r2, #0
 80062e0:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80062e2:	4b4c      	ldr	r3, [pc, #304]	; (8006414 <SVCCTL_App_Notification+0x174>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80062ea:	2001      	movs	r0, #1
 80062ec:	f000 f948 	bl	8006580 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80062f0:	4b49      	ldr	r3, [pc, #292]	; (8006418 <SVCCTL_App_Notification+0x178>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80062f6:	4b47      	ldr	r3, [pc, #284]	; (8006414 <SVCCTL_App_Notification+0x174>)
 80062f8:	8ada      	ldrh	r2, [r3, #22]
 80062fa:	4b47      	ldr	r3, [pc, #284]	; (8006418 <SVCCTL_App_Notification+0x178>)
 80062fc:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 80062fe:	4846      	ldr	r0, [pc, #280]	; (8006418 <SVCCTL_App_Notification+0x178>)
 8006300:	f000 fa25 	bl	800674e <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8006304:	e080      	b.n	8006408 <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	3302      	adds	r3, #2
 800630a:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d001      	beq.n	8006318 <SVCCTL_App_Notification+0x78>
 8006314:	2b03      	cmp	r3, #3
          break;
 8006316:	e021      	b.n	800635c <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800631e:	4b3d      	ldr	r3, [pc, #244]	; (8006414 <SVCCTL_App_Notification+0x174>)
 8006320:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006324:	2b04      	cmp	r3, #4
 8006326:	d104      	bne.n	8006332 <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8006328:	4b3a      	ldr	r3, [pc, #232]	; (8006414 <SVCCTL_App_Notification+0x174>)
 800632a:	2206      	movs	r2, #6
 800632c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8006330:	e003      	b.n	800633a <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8006332:	4b38      	ldr	r3, [pc, #224]	; (8006414 <SVCCTL_App_Notification+0x174>)
 8006334:	2205      	movs	r2, #5
 8006336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006340:	b29a      	uxth	r2, r3
 8006342:	4b34      	ldr	r3, [pc, #208]	; (8006414 <SVCCTL_App_Notification+0x174>)
 8006344:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8006346:	4b34      	ldr	r3, [pc, #208]	; (8006418 <SVCCTL_App_Notification+0x178>)
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800634c:	4b31      	ldr	r3, [pc, #196]	; (8006414 <SVCCTL_App_Notification+0x174>)
 800634e:	8ada      	ldrh	r2, [r3, #22]
 8006350:	4b31      	ldr	r3, [pc, #196]	; (8006418 <SVCCTL_App_Notification+0x178>)
 8006352:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 8006354:	4830      	ldr	r0, [pc, #192]	; (8006418 <SVCCTL_App_Notification+0x178>)
 8006356:	f000 f9fa 	bl	800674e <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800635a:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800635c:	e054      	b.n	8006408 <SVCCTL_App_Notification+0x168>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	3302      	adds	r3, #2
 8006362:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636e:	d042      	beq.n	80063f6 <SVCCTL_App_Notification+0x156>
 8006370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006374:	dc47      	bgt.n	8006406 <SVCCTL_App_Notification+0x166>
 8006376:	2b04      	cmp	r3, #4
 8006378:	d03f      	beq.n	80063fa <SVCCTL_App_Notification+0x15a>
 800637a:	2b04      	cmp	r3, #4
 800637c:	db43      	blt.n	8006406 <SVCCTL_App_Notification+0x166>
 800637e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006382:	4293      	cmp	r3, r2
 8006384:	dc3f      	bgt.n	8006406 <SVCCTL_App_Notification+0x166>
 8006386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800638a:	dd3c      	ble.n	8006406 <SVCCTL_App_Notification+0x166>
 800638c:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8006390:	2b09      	cmp	r3, #9
 8006392:	d838      	bhi.n	8006406 <SVCCTL_App_Notification+0x166>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <SVCCTL_App_Notification+0xfc>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063ef 	.word	0x080063ef
 80063a0:	080063c5 	.word	0x080063c5
 80063a4:	08006407 	.word	0x08006407
 80063a8:	08006407 	.word	0x08006407
 80063ac:	08006407 	.word	0x08006407
 80063b0:	08006407 	.word	0x08006407
 80063b4:	080063ff 	.word	0x080063ff
 80063b8:	08006407 	.word	0x08006407
 80063bc:	080063d3 	.word	0x080063d3
 80063c0:	080063ff 	.word	0x080063ff
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80063c4:	4b13      	ldr	r3, [pc, #76]	; (8006414 <SVCCTL_App_Notification+0x174>)
 80063c6:	8adb      	ldrh	r3, [r3, #22]
 80063c8:	4914      	ldr	r1, [pc, #80]	; (800641c <SVCCTL_App_Notification+0x17c>)
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe f898 	bl	8004500 <aci_gap_pass_key_resp>
        break;
 80063d0:	e016      	b.n	8006400 <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	3302      	adds	r3, #2
 80063d6:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80063de:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80063e0:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <SVCCTL_App_Notification+0x174>)
 80063e2:	8adb      	ldrh	r3, [r3, #22]
 80063e4:	2101      	movs	r1, #1
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fa36 	bl	8004858 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 80063ec:	e008      	b.n	8006400 <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	3302      	adds	r3, #2
 80063f2:	617b      	str	r3, [r7, #20]
        break;
 80063f4:	e004      	b.n	8006400 <SVCCTL_App_Notification+0x160>
      break;
 80063f6:	bf00      	nop
 80063f8:	e005      	b.n	8006406 <SVCCTL_App_Notification+0x166>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80063fa:	bf00      	nop
 80063fc:	e003      	b.n	8006406 <SVCCTL_App_Notification+0x166>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80063fe:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006400:	e001      	b.n	8006406 <SVCCTL_App_Notification+0x166>
      break;
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <SVCCTL_App_Notification+0x168>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006406:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006408:	2301      	movs	r3, #1
}
 800640a:	4618      	mov	r0, r3
 800640c:	3728      	adds	r7, #40	; 0x28
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000120 	.word	0x20000120
 8006418:	2000035c 	.word	0x2000035c
 800641c:	0001b207 	.word	0x0001b207

08006420 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <Ble_Tl_Init+0x20>)
 8006428:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800642a:	4b06      	ldr	r3, [pc, #24]	; (8006444 <Ble_Tl_Init+0x24>)
 800642c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800642e:	463b      	mov	r3, r7
 8006430:	4619      	mov	r1, r3
 8006432:	4805      	ldr	r0, [pc, #20]	; (8006448 <Ble_Tl_Init+0x28>)
 8006434:	f7ff f8ca 	bl	80055cc <hci_init>

  return;
 8006438:	bf00      	nop
}
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	200300d4 	.word	0x200300d4
 8006444:	08006719 	.word	0x08006719
 8006448:	080066e1 	.word	0x080066e1

0800644c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800644c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800644e:	b08d      	sub	sp, #52	; 0x34
 8006450:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8006452:	2300      	movs	r3, #0
 8006454:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8006456:	f7fe fda5 	bl	8004fa4 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800645a:	f000 f8c1 	bl	80065e0 <BleGetBdAddress>
 800645e:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	2106      	movs	r1, #6
 8006464:	2000      	movs	r0, #0
 8006466:	f7fe fc93 	bl	8004d90 <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800646a:	4a40      	ldr	r2, [pc, #256]	; (800656c <Ble_Hci_Gap_Gatt_Init+0x120>)
 800646c:	2110      	movs	r1, #16
 800646e:	2018      	movs	r0, #24
 8006470:	f7fe fc8e 	bl	8004d90 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8006474:	4a3e      	ldr	r2, [pc, #248]	; (8006570 <Ble_Hci_Gap_Gatt_Init+0x124>)
 8006476:	2110      	movs	r1, #16
 8006478:	2008      	movs	r0, #8
 800647a:	f7fe fc89 	bl	8004d90 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800647e:	2118      	movs	r1, #24
 8006480:	2001      	movs	r0, #1
 8006482:	f7fe fcee 	bl	8004e62 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8006486:	f7fe fa3e 	bl	8004906 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800648e:	7cfb      	ldrb	r3, [r7, #19]
 8006490:	f043 0301 	orr.w	r3, r3, #1
 8006494:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8006496:	7cfb      	ldrb	r3, [r7, #19]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01d      	beq.n	80064d8 <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800649c:	4b35      	ldr	r3, [pc, #212]	; (8006574 <Ble_Hci_Gap_Gatt_Init+0x128>)
 800649e:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 80064a0:	f107 020a 	add.w	r2, r7, #10
 80064a4:	7cf8      	ldrb	r0, [r7, #19]
 80064a6:	1dbb      	adds	r3, r7, #6
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	f107 0308 	add.w	r3, r7, #8
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	2209      	movs	r2, #9
 80064b4:	2100      	movs	r1, #0
 80064b6:	f7fe f87a 	bl	80045ae <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80064ba:	897c      	ldrh	r4, [r7, #10]
 80064bc:	893d      	ldrh	r5, [r7, #8]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7f9 fe5c 	bl	800017c <strlen>
 80064c4:	4603      	mov	r3, r0
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	2200      	movs	r2, #0
 80064d0:	4629      	mov	r1, r5
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7fe fbd5 	bl	8004c82 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80064d8:	8978      	ldrh	r0, [r7, #10]
 80064da:	88f9      	ldrh	r1, [r7, #6]
 80064dc:	1d3b      	adds	r3, r7, #4
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	2302      	movs	r3, #2
 80064e2:	2200      	movs	r2, #0
 80064e4:	f7fe fbcd 	bl	8004c82 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80064e8:	2202      	movs	r2, #2
 80064ea:	2102      	movs	r1, #2
 80064ec:	2000      	movs	r0, #0
 80064ee:	f7fe fdd6 	bl	800509e <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80064f2:	4b21      	ldr	r3, [pc, #132]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80064f8:	4b1f      	ldr	r3, [pc, #124]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fd ff0d 	bl	800431c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8006502:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006504:	2201      	movs	r2, #1
 8006506:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8006508:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800650a:	2208      	movs	r2, #8
 800650c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800650e:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006510:	2210      	movs	r2, #16
 8006512:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8006514:	4b18      	ldr	r3, [pc, #96]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006516:	2200      	movs	r2, #0
 8006518:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800651a:	4b17      	ldr	r3, [pc, #92]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800651c:	4a17      	ldr	r2, [pc, #92]	; (800657c <Ble_Hci_Gap_Gatt_Init+0x130>)
 800651e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8006520:	4b15      	ldr	r3, [pc, #84]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006522:	2200      	movs	r2, #0
 8006524:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006528:	789c      	ldrb	r4, [r3, #2]
 800652a:	4b13      	ldr	r3, [pc, #76]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800652c:	785d      	ldrb	r5, [r3, #1]
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006530:	791b      	ldrb	r3, [r3, #4]
 8006532:	4a11      	ldr	r2, [pc, #68]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006534:	7952      	ldrb	r2, [r2, #5]
 8006536:	4910      	ldr	r1, [pc, #64]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006538:	78c9      	ldrb	r1, [r1, #3]
 800653a:	480f      	ldr	r0, [pc, #60]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800653c:	6880      	ldr	r0, [r0, #8]
 800653e:	2600      	movs	r6, #0
 8006540:	9604      	str	r6, [sp, #16]
 8006542:	9003      	str	r0, [sp, #12]
 8006544:	9102      	str	r1, [sp, #8]
 8006546:	9201      	str	r2, [sp, #4]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	2300      	movs	r3, #0
 800654c:	2201      	movs	r2, #1
 800654e:	4629      	mov	r1, r5
 8006550:	4620      	mov	r0, r4
 8006552:	f7fd ff2d 	bl	80043b0 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006558:	789b      	ldrb	r3, [r3, #2]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 800655e:	f7fe f957 	bl	8004810 <aci_gap_configure_whitelist>
   }
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800656a:	bf00      	nop
 800656c:	08007dd4 	.word	0x08007dd4
 8006570:	08007de4 	.word	0x08007de4
 8006574:	08007bfc 	.word	0x08007bfc
 8006578:	20000120 	.word	0x20000120
 800657c:	0001b207 	.word	0x0001b207

08006580 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08c      	sub	sp, #48	; 0x30
 8006584:	af08      	add	r7, sp, #32
 8006586:	4603      	mov	r3, r0
 8006588:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800658a:	2392      	movs	r3, #146	; 0x92
 800658c:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 800658e:	4a12      	ldr	r2, [pc, #72]	; (80065d8 <Adv_Request+0x58>)
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8006596:	2300      	movs	r3, #0
 8006598:	9306      	str	r3, [sp, #24]
 800659a:	2300      	movs	r3, #0
 800659c:	9305      	str	r3, [sp, #20]
 800659e:	2300      	movs	r3, #0
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	2300      	movs	r3, #0
 80065a4:	9303      	str	r3, [sp, #12]
 80065a6:	2300      	movs	r3, #0
 80065a8:	9302      	str	r3, [sp, #8]
 80065aa:	2300      	movs	r3, #0
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	2300      	movs	r3, #0
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	22a0      	movs	r2, #160	; 0xa0
 80065b6:	2180      	movs	r1, #128	; 0x80
 80065b8:	2000      	movs	r0, #0
 80065ba:	f7fd fdd1 	bl	8004160 <aci_gap_set_discoverable>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 80065c2:	4906      	ldr	r1, [pc, #24]	; (80065dc <Adv_Request+0x5c>)
 80065c4:	200b      	movs	r0, #11
 80065c6:	f7fe f87d 	bl	80046c4 <aci_gap_update_adv_data>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 80065ce:	bf00      	nop
}
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000120 	.word	0x20000120
 80065dc:	20000010 	.word	0x20000010

080065e0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80065e6:	f7ff fde9 	bl	80061bc <LL_FLASH_GetUDN>
 80065ea:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d023      	beq.n	800663c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80065f4:	f7ff fdfa 	bl	80061ec <LL_FLASH_GetSTCompanyID>
 80065f8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80065fa:	f7ff fdeb 	bl	80061d4 <LL_FLASH_GetDeviceID>
 80065fe:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	b2da      	uxtb	r2, r3
 8006604:	4b16      	ldr	r3, [pc, #88]	; (8006660 <BleGetBdAddress+0x80>)
 8006606:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	0a1b      	lsrs	r3, r3, #8
 800660c:	b2da      	uxtb	r2, r3
 800660e:	4b14      	ldr	r3, [pc, #80]	; (8006660 <BleGetBdAddress+0x80>)
 8006610:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	4b12      	ldr	r3, [pc, #72]	; (8006660 <BleGetBdAddress+0x80>)
 8006618:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <BleGetBdAddress+0x80>)
 8006620:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	0a1b      	lsrs	r3, r3, #8
 8006626:	b2da      	uxtb	r2, r3
 8006628:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <BleGetBdAddress+0x80>)
 800662a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	0c1b      	lsrs	r3, r3, #16
 8006630:	b2da      	uxtb	r2, r3
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <BleGetBdAddress+0x80>)
 8006634:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8006636:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <BleGetBdAddress+0x80>)
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e00b      	b.n	8006654 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800663c:	2000      	movs	r0, #0
 800663e:	f7ff fcd7 	bl	8005ff0 <OTP_Read>
 8006642:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	e001      	b.n	8006654 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <BleGetBdAddress+0x84>)
 8006652:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8006654:	697b      	ldr	r3, [r7, #20]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000238 	.word	0x20000238
 8006664:	08007dcc 	.word	0x08007dcc

08006668 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <Adv_Cancel+0x30>)
 8006670:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006674:	2b05      	cmp	r3, #5
 8006676:	d00a      	beq.n	800668e <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8006678:	2300      	movs	r3, #0
 800667a:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800667c:	f7fd fd4c 	bl	8004118 <aci_gap_set_non_discoverable>
 8006680:	4603      	mov	r3, r0
 8006682:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <Adv_Cancel+0x30>)
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800668c:	bf00      	nop
 800668e:	bf00      	nop
}
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20000120 	.word	0x20000120

0800669c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80066a4:	2100      	movs	r1, #0
 80066a6:	2002      	movs	r0, #2
 80066a8:	f001 f902 	bl	80078b0 <UTIL_SEQ_SetTask>
  return;
 80066ac:	bf00      	nop
}
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80066bc:	2001      	movs	r0, #1
 80066be:	f001 f963 	bl	8007988 <UTIL_SEQ_SetEvt>
  return;
 80066c2:	bf00      	nop
}
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80066d2:	2001      	movs	r0, #1
 80066d4:	f001 f978 	bl	80079c8 <UTIL_SEQ_WaitEvt>
  return;
 80066d8:	bf00      	nop
}
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	3308      	adds	r3, #8
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fe24 	bl	8005340 <SVCCTL_UserEvtRx>
 80066f8:	4603      	mov	r3, r0
 80066fa:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006708:	e003      	b.n	8006712 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	701a      	strb	r2, [r3, #0]
  return;
 8006710:	bf00      	nop
}
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <BLE_StatusNot+0x16>
 8006728:	2b01      	cmp	r3, #1
 800672a:	d006      	beq.n	800673a <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800672c:	e00b      	b.n	8006746 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800672e:	2303      	movs	r3, #3
 8006730:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f001 f8e8 	bl	8007908 <UTIL_SEQ_PauseTask>
      break;
 8006738:	e005      	b.n	8006746 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800673a:	2303      	movs	r3, #3
 800673c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f001 f902 	bl	8007948 <UTIL_SEQ_ResumeTask>
      break;
 8006744:	bf00      	nop
  }
  return;
 8006746:	bf00      	nop
}
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <Custom_APP_Notification+0x16>
 800675e:	2b01      	cmp	r3, #1
 8006760:	d002      	beq.n	8006768 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8006762:	e002      	b.n	800676a <Custom_APP_Notification+0x1c>
      break;
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <Custom_APP_Notification+0x1c>
      break;
 8006768:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800676a:	bf00      	nop
}
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8006776:	b480      	push	{r7}
 8006778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800677a:	bf00      	nop
}
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b092      	sub	sp, #72	; 0x48
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800678c:	2300      	movs	r3, #0
 800678e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3301      	adds	r3, #1
 8006796:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 8006798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2bff      	cmp	r3, #255	; 0xff
 800679e:	f040 82c1 	bne.w	8006d24 <Custom_STM_Event_Handler+0x5a0>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80067a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a4:	3302      	adds	r3, #2
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 80067a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f640 4214 	movw	r2, #3092	; 0xc14
 80067b2:	4293      	cmp	r3, r2
 80067b4:	f000 82b0 	beq.w	8006d18 <Custom_STM_Event_Handler+0x594>
 80067b8:	f640 4214 	movw	r2, #3092	; 0xc14
 80067bc:	4293      	cmp	r3, r2
 80067be:	f300 82ad 	bgt.w	8006d1c <Custom_STM_Event_Handler+0x598>
 80067c2:	f640 4201 	movw	r2, #3073	; 0xc01
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <Custom_STM_Event_Handler+0x4e>
 80067ca:	f640 4213 	movw	r2, #3091	; 0xc13
 80067ce:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80067d0:	e2a7      	b.n	8006d22 <Custom_STM_Event_Handler+0x59e>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80067d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d4:	3302      	adds	r3, #2
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
          if(attribute_modified->Attr_Handle == (CustomContext.CustomPowerHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	885b      	ldrh	r3, [r3, #2]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	4baa      	ldr	r3, [pc, #680]	; (8006a8c <Custom_STM_Event_Handler+0x308>)
 80067e2:	885b      	ldrh	r3, [r3, #2]
 80067e4:	3301      	adds	r3, #1
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d110      	bne.n	800680c <Custom_STM_Event_Handler+0x88>
            return_value = SVCCTL_EvtAckFlowEnable;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            indexPower = (attribute_modified->Attr_Data[0]) - 48;
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	7a1b      	ldrb	r3, [r3, #8]
 80067f4:	3b30      	subs	r3, #48	; 0x30
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	4ba5      	ldr	r3, [pc, #660]	; (8006a90 <Custom_STM_Event_Handler+0x30c>)
 80067fa:	701a      	strb	r2, [r3, #0]
            memset(attribute_modified->Attr_Data,0,sizeof(attribute_modified->Attr_Data));
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	3308      	adds	r3, #8
 8006800:	22f5      	movs	r2, #245	; 0xf5
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f001 f9a7 	bl	8007b58 <memset>
          break;
 800680a:	e289      	b.n	8006d20 <Custom_STM_Event_Handler+0x59c>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMajorHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	885b      	ldrh	r3, [r3, #2]
 8006810:	b29b      	uxth	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	4b9d      	ldr	r3, [pc, #628]	; (8006a8c <Custom_STM_Event_Handler+0x308>)
 8006816:	889b      	ldrh	r3, [r3, #4]
 8006818:	3301      	adds	r3, #1
 800681a:	429a      	cmp	r2, r3
 800681c:	f040 80fe 	bne.w	8006a1c <Custom_STM_Event_Handler+0x298>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            uint8_t length_major = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            while(attribute_modified->Attr_Data[length_major]!=(uint8_t)0){
 800682c:	e004      	b.n	8006838 <Custom_STM_Event_Handler+0xb4>
            	length_major++;
 800682e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006832:	3301      	adds	r3, #1
 8006834:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            while(attribute_modified->Attr_Data[length_major]!=(uint8_t)0){
 8006838:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800683c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800683e:	4413      	add	r3, r2
 8006840:	7a1b      	ldrb	r3, [r3, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f3      	bne.n	800682e <Custom_STM_Event_Handler+0xaa>
            switch (length_major){
 8006846:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800684a:	3b01      	subs	r3, #1
 800684c:	2b04      	cmp	r3, #4
 800684e:	f200 80dd 	bhi.w	8006a0c <Custom_STM_Event_Handler+0x288>
 8006852:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <Custom_STM_Event_Handler+0xd4>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	0800686d 	.word	0x0800686d
 800685c:	0800687b 	.word	0x0800687b
 8006860:	0800689b 	.word	0x0800689b
 8006864:	080068f9 	.word	0x080068f9
 8006868:	08006971 	.word	0x08006971
					major[1] = (attribute_modified->Attr_Data[0])-48;
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	7a1b      	ldrb	r3, [r3, #8]
 8006870:	3b30      	subs	r3, #48	; 0x30
 8006872:	b2da      	uxtb	r2, r3
 8006874:	4b87      	ldr	r3, [pc, #540]	; (8006a94 <Custom_STM_Event_Handler+0x310>)
 8006876:	705a      	strb	r2, [r3, #1]
					break;
 8006878:	e0c8      	b.n	8006a0c <Custom_STM_Event_Handler+0x288>
					major[1] = (attribute_modified->Attr_Data[1])-48 + ((attribute_modified->Attr_Data[2])-48)*10;
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	7a5a      	ldrb	r2, [r3, #9]
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	7a9b      	ldrb	r3, [r3, #10]
 8006882:	4619      	mov	r1, r3
 8006884:	0089      	lsls	r1, r1, #2
 8006886:	440b      	add	r3, r1
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	b2db      	uxtb	r3, r3
 800688c:	4413      	add	r3, r2
 800688e:	b2db      	uxtb	r3, r3
 8006890:	3b10      	subs	r3, #16
 8006892:	b2da      	uxtb	r2, r3
 8006894:	4b7f      	ldr	r3, [pc, #508]	; (8006a94 <Custom_STM_Event_Handler+0x310>)
 8006896:	705a      	strb	r2, [r3, #1]
					break;
 8006898:	e0b8      	b.n	8006a0c <Custom_STM_Event_Handler+0x288>
					data_major = (attribute_modified->Attr_Data[2])-48 + ((attribute_modified->Attr_Data[1])-48)*10 + ((attribute_modified->Attr_Data[0])-48)*100;
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	7a9b      	ldrb	r3, [r3, #10]
 800689e:	b29a      	uxth	r2, r3
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	7a5b      	ldrb	r3, [r3, #9]
 80068a4:	3b30      	subs	r3, #48	; 0x30
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	4619      	mov	r1, r3
 80068aa:	0089      	lsls	r1, r1, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	7a1b      	ldrb	r3, [r3, #8]
 80068ba:	3b30      	subs	r3, #48	; 0x30
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4619      	mov	r1, r3
 80068c0:	0089      	lsls	r1, r1, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	4619      	mov	r1, r3
 80068c6:	0088      	lsls	r0, r1, #2
 80068c8:	4619      	mov	r1, r3
 80068ca:	4603      	mov	r3, r0
 80068cc:	440b      	add	r3, r1
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4413      	add	r3, r2
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b30      	subs	r3, #48	; 0x30
 80068d8:	b29a      	uxth	r2, r3
 80068da:	4b6f      	ldr	r3, [pc, #444]	; (8006a98 <Custom_STM_Event_Handler+0x314>)
 80068dc:	801a      	strh	r2, [r3, #0]
					major[1]= data_major;
 80068de:	4b6e      	ldr	r3, [pc, #440]	; (8006a98 <Custom_STM_Event_Handler+0x314>)
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	4b6b      	ldr	r3, [pc, #428]	; (8006a94 <Custom_STM_Event_Handler+0x310>)
 80068e6:	705a      	strb	r2, [r3, #1]
					major[0]=data_major>>8;
 80068e8:	4b6b      	ldr	r3, [pc, #428]	; (8006a98 <Custom_STM_Event_Handler+0x314>)
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	0a1b      	lsrs	r3, r3, #8
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	4b68      	ldr	r3, [pc, #416]	; (8006a94 <Custom_STM_Event_Handler+0x310>)
 80068f4:	701a      	strb	r2, [r3, #0]
					break;
 80068f6:	e089      	b.n	8006a0c <Custom_STM_Event_Handler+0x288>
					data_major = (attribute_modified->Attr_Data[3])-48 + ((attribute_modified->Attr_Data[2])-48)*10 + ((attribute_modified->Attr_Data[1])-48)*100+((attribute_modified->Attr_Data[0])-48)*1000;
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	7adb      	ldrb	r3, [r3, #11]
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	7a9b      	ldrb	r3, [r3, #10]
 8006902:	3b30      	subs	r3, #48	; 0x30
 8006904:	b29b      	uxth	r3, r3
 8006906:	4619      	mov	r1, r3
 8006908:	0089      	lsls	r1, r1, #2
 800690a:	440b      	add	r3, r1
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	b29b      	uxth	r3, r3
 8006910:	4413      	add	r3, r2
 8006912:	b29a      	uxth	r2, r3
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	7a5b      	ldrb	r3, [r3, #9]
 8006918:	3b30      	subs	r3, #48	; 0x30
 800691a:	b29b      	uxth	r3, r3
 800691c:	4619      	mov	r1, r3
 800691e:	0089      	lsls	r1, r1, #2
 8006920:	440b      	add	r3, r1
 8006922:	4619      	mov	r1, r3
 8006924:	0088      	lsls	r0, r1, #2
 8006926:	4619      	mov	r1, r3
 8006928:	4603      	mov	r3, r0
 800692a:	440b      	add	r3, r1
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	b29b      	uxth	r3, r3
 8006930:	4413      	add	r3, r2
 8006932:	b29a      	uxth	r2, r3
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	7a1b      	ldrb	r3, [r3, #8]
 8006938:	3b30      	subs	r3, #48	; 0x30
 800693a:	b29b      	uxth	r3, r3
 800693c:	4619      	mov	r1, r3
 800693e:	0149      	lsls	r1, r1, #5
 8006940:	1ac9      	subs	r1, r1, r3
 8006942:	0089      	lsls	r1, r1, #2
 8006944:	440b      	add	r3, r1
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	b29b      	uxth	r3, r3
 800694a:	4413      	add	r3, r2
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b30      	subs	r3, #48	; 0x30
 8006950:	b29a      	uxth	r2, r3
 8006952:	4b51      	ldr	r3, [pc, #324]	; (8006a98 <Custom_STM_Event_Handler+0x314>)
 8006954:	801a      	strh	r2, [r3, #0]
					major[1]= data_major;
 8006956:	4b50      	ldr	r3, [pc, #320]	; (8006a98 <Custom_STM_Event_Handler+0x314>)
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b2da      	uxtb	r2, r3
 800695c:	4b4d      	ldr	r3, [pc, #308]	; (8006a94 <Custom_STM_Event_Handler+0x310>)
 800695e:	705a      	strb	r2, [r3, #1]
					major[0]=data_major>>8;
 8006960:	4b4d      	ldr	r3, [pc, #308]	; (8006a98 <Custom_STM_Event_Handler+0x314>)
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	b29b      	uxth	r3, r3
 8006968:	b2da      	uxtb	r2, r3
 800696a:	4b4a      	ldr	r3, [pc, #296]	; (8006a94 <Custom_STM_Event_Handler+0x310>)
 800696c:	701a      	strb	r2, [r3, #0]
					break;
 800696e:	e04d      	b.n	8006a0c <Custom_STM_Event_Handler+0x288>
					data_major = (attribute_modified->Attr_Data[4])-48 + ((attribute_modified->Attr_Data[3])-48)*10 + ((attribute_modified->Attr_Data[2])-48)*100+((attribute_modified->Attr_Data[1])-48)*1000+((attribute_modified->Attr_Data[0])-48)*10000;
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	7b1b      	ldrb	r3, [r3, #12]
 8006974:	b29a      	uxth	r2, r3
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	7adb      	ldrb	r3, [r3, #11]
 800697a:	3b30      	subs	r3, #48	; 0x30
 800697c:	b29b      	uxth	r3, r3
 800697e:	4619      	mov	r1, r3
 8006980:	0089      	lsls	r1, r1, #2
 8006982:	440b      	add	r3, r1
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	b29b      	uxth	r3, r3
 8006988:	4413      	add	r3, r2
 800698a:	b29a      	uxth	r2, r3
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	7a9b      	ldrb	r3, [r3, #10]
 8006990:	3b30      	subs	r3, #48	; 0x30
 8006992:	b29b      	uxth	r3, r3
 8006994:	4619      	mov	r1, r3
 8006996:	0089      	lsls	r1, r1, #2
 8006998:	440b      	add	r3, r1
 800699a:	4619      	mov	r1, r3
 800699c:	0088      	lsls	r0, r1, #2
 800699e:	4619      	mov	r1, r3
 80069a0:	4603      	mov	r3, r0
 80069a2:	440b      	add	r3, r1
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	7a5b      	ldrb	r3, [r3, #9]
 80069b0:	3b30      	subs	r3, #48	; 0x30
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4619      	mov	r1, r3
 80069b6:	0149      	lsls	r1, r1, #5
 80069b8:	1ac9      	subs	r1, r1, r3
 80069ba:	0089      	lsls	r1, r1, #2
 80069bc:	440b      	add	r3, r1
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	7a1b      	ldrb	r3, [r3, #8]
 80069ca:	3b30      	subs	r3, #48	; 0x30
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	4619      	mov	r1, r3
 80069d0:	0149      	lsls	r1, r1, #5
 80069d2:	1ac9      	subs	r1, r1, r3
 80069d4:	0089      	lsls	r1, r1, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	4619      	mov	r1, r3
 80069da:	0088      	lsls	r0, r1, #2
 80069dc:	4619      	mov	r1, r3
 80069de:	4603      	mov	r3, r0
 80069e0:	440b      	add	r3, r1
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b30      	subs	r3, #48	; 0x30
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	4b2a      	ldr	r3, [pc, #168]	; (8006a98 <Custom_STM_Event_Handler+0x314>)
 80069f0:	801a      	strh	r2, [r3, #0]
					major[1]= data_major;
 80069f2:	4b29      	ldr	r3, [pc, #164]	; (8006a98 <Custom_STM_Event_Handler+0x314>)
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	4b26      	ldr	r3, [pc, #152]	; (8006a94 <Custom_STM_Event_Handler+0x310>)
 80069fa:	705a      	strb	r2, [r3, #1]
					major[0]=data_major>>8;
 80069fc:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <Custom_STM_Event_Handler+0x314>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	0a1b      	lsrs	r3, r3, #8
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4b23      	ldr	r3, [pc, #140]	; (8006a94 <Custom_STM_Event_Handler+0x310>)
 8006a08:	701a      	strb	r2, [r3, #0]
					break;
 8006a0a:	bf00      	nop
            memset(attribute_modified->Attr_Data,0,sizeof(attribute_modified->Attr_Data));
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	3308      	adds	r3, #8
 8006a10:	22f5      	movs	r2, #245	; 0xf5
 8006a12:	2100      	movs	r1, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 f89f 	bl	8007b58 <memset>
          break;
 8006a1a:	e181      	b.n	8006d20 <Custom_STM_Event_Handler+0x59c>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMinorHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	885b      	ldrh	r3, [r3, #2]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	4b19      	ldr	r3, [pc, #100]	; (8006a8c <Custom_STM_Event_Handler+0x308>)
 8006a26:	88db      	ldrh	r3, [r3, #6]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	f040 8109 	bne.w	8006c42 <Custom_STM_Event_Handler+0x4be>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            uint8_t length_minor = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            while(attribute_modified->Attr_Data[length_minor]!=(uint8_t)0){
 8006a3c:	e004      	b.n	8006a48 <Custom_STM_Event_Handler+0x2c4>
                  length_minor++;
 8006a3e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006a42:	3301      	adds	r3, #1
 8006a44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            while(attribute_modified->Attr_Data[length_minor]!=(uint8_t)0){
 8006a48:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a4e:	4413      	add	r3, r2
 8006a50:	7a1b      	ldrb	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f3      	bne.n	8006a3e <Custom_STM_Event_Handler+0x2ba>
			switch (length_minor){
 8006a56:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	f200 80e8 	bhi.w	8006c32 <Custom_STM_Event_Handler+0x4ae>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <Custom_STM_Event_Handler+0x2e4>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a7d 	.word	0x08006a7d
 8006a6c:	08006aa1 	.word	0x08006aa1
 8006a70:	08006ac1 	.word	0x08006ac1
 8006a74:	08006b1f 	.word	0x08006b1f
 8006a78:	08006b97 	.word	0x08006b97
					minor[1] = (attribute_modified->Attr_Data[0])-48;
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	7a1b      	ldrb	r3, [r3, #8]
 8006a80:	3b30      	subs	r3, #48	; 0x30
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <Custom_STM_Event_Handler+0x318>)
 8006a86:	705a      	strb	r2, [r3, #1]
					break;
 8006a88:	e0d3      	b.n	8006c32 <Custom_STM_Event_Handler+0x4ae>
 8006a8a:	bf00      	nop
 8006a8c:	20000100 	.word	0x20000100
 8006a90:	2000023e 	.word	0x2000023e
 8006a94:	20000240 	.word	0x20000240
 8006a98:	20000246 	.word	0x20000246
 8006a9c:	20000244 	.word	0x20000244
					minor[1] = (attribute_modified->Attr_Data[1])-48 + ((attribute_modified->Attr_Data[0])-48)*10;
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	7a5a      	ldrb	r2, [r3, #9]
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	7a1b      	ldrb	r3, [r3, #8]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	0089      	lsls	r1, r1, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	3b10      	subs	r3, #16
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	4b9e      	ldr	r3, [pc, #632]	; (8006d34 <Custom_STM_Event_Handler+0x5b0>)
 8006abc:	705a      	strb	r2, [r3, #1]
					break;
 8006abe:	e0b8      	b.n	8006c32 <Custom_STM_Event_Handler+0x4ae>
					data_minor = (attribute_modified->Attr_Data[2])-48 + ((attribute_modified->Attr_Data[1])-48)*10 + ((attribute_modified->Attr_Data[0])-48)*100;
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	7a9b      	ldrb	r3, [r3, #10]
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	7a5b      	ldrb	r3, [r3, #9]
 8006aca:	3b30      	subs	r3, #48	; 0x30
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	4619      	mov	r1, r3
 8006ad0:	0089      	lsls	r1, r1, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	7a1b      	ldrb	r3, [r3, #8]
 8006ae0:	3b30      	subs	r3, #48	; 0x30
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	0089      	lsls	r1, r1, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	4619      	mov	r1, r3
 8006aec:	0088      	lsls	r0, r1, #2
 8006aee:	4619      	mov	r1, r3
 8006af0:	4603      	mov	r3, r0
 8006af2:	440b      	add	r3, r1
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	4413      	add	r3, r2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b30      	subs	r3, #48	; 0x30
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	4b8d      	ldr	r3, [pc, #564]	; (8006d38 <Custom_STM_Event_Handler+0x5b4>)
 8006b02:	801a      	strh	r2, [r3, #0]
					minor[1]= data_minor;
 8006b04:	4b8c      	ldr	r3, [pc, #560]	; (8006d38 <Custom_STM_Event_Handler+0x5b4>)
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	4b8a      	ldr	r3, [pc, #552]	; (8006d34 <Custom_STM_Event_Handler+0x5b0>)
 8006b0c:	705a      	strb	r2, [r3, #1]
					minor[0]=data_minor>>8;
 8006b0e:	4b8a      	ldr	r3, [pc, #552]	; (8006d38 <Custom_STM_Event_Handler+0x5b4>)
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	4b86      	ldr	r3, [pc, #536]	; (8006d34 <Custom_STM_Event_Handler+0x5b0>)
 8006b1a:	701a      	strb	r2, [r3, #0]
					break;
 8006b1c:	e089      	b.n	8006c32 <Custom_STM_Event_Handler+0x4ae>
					data_minor = (attribute_modified->Attr_Data[3])-48 + ((attribute_modified->Attr_Data[2])-48)*10 + ((attribute_modified->Attr_Data[1])-48)*100+((attribute_modified->Attr_Data[0])-48)*1000;
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	7adb      	ldrb	r3, [r3, #11]
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	7a9b      	ldrb	r3, [r3, #10]
 8006b28:	3b30      	subs	r3, #48	; 0x30
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	0089      	lsls	r1, r1, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	4413      	add	r3, r2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	7a5b      	ldrb	r3, [r3, #9]
 8006b3e:	3b30      	subs	r3, #48	; 0x30
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	4619      	mov	r1, r3
 8006b44:	0089      	lsls	r1, r1, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	4619      	mov	r1, r3
 8006b4a:	0088      	lsls	r0, r1, #2
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	440b      	add	r3, r1
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	7a1b      	ldrb	r3, [r3, #8]
 8006b5e:	3b30      	subs	r3, #48	; 0x30
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	4619      	mov	r1, r3
 8006b64:	0149      	lsls	r1, r1, #5
 8006b66:	1ac9      	subs	r1, r1, r3
 8006b68:	0089      	lsls	r1, r1, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b30      	subs	r3, #48	; 0x30
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	4b6f      	ldr	r3, [pc, #444]	; (8006d38 <Custom_STM_Event_Handler+0x5b4>)
 8006b7a:	801a      	strh	r2, [r3, #0]
					minor[1]= data_minor;
 8006b7c:	4b6e      	ldr	r3, [pc, #440]	; (8006d38 <Custom_STM_Event_Handler+0x5b4>)
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	4b6c      	ldr	r3, [pc, #432]	; (8006d34 <Custom_STM_Event_Handler+0x5b0>)
 8006b84:	705a      	strb	r2, [r3, #1]
					minor[0]=data_minor>>8;
 8006b86:	4b6c      	ldr	r3, [pc, #432]	; (8006d38 <Custom_STM_Event_Handler+0x5b4>)
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	0a1b      	lsrs	r3, r3, #8
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	4b68      	ldr	r3, [pc, #416]	; (8006d34 <Custom_STM_Event_Handler+0x5b0>)
 8006b92:	701a      	strb	r2, [r3, #0]
					break;
 8006b94:	e04d      	b.n	8006c32 <Custom_STM_Event_Handler+0x4ae>
					data_minor = (attribute_modified->Attr_Data[4])-48 + ((attribute_modified->Attr_Data[3])-48)*10 + ((attribute_modified->Attr_Data[2])-48)*100+((attribute_modified->Attr_Data[1])-48)*1000+((attribute_modified->Attr_Data[0])-48)*10000;
 8006b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b98:	7b1b      	ldrb	r3, [r3, #12]
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	7adb      	ldrb	r3, [r3, #11]
 8006ba0:	3b30      	subs	r3, #48	; 0x30
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	0089      	lsls	r1, r1, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	4413      	add	r3, r2
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	7a9b      	ldrb	r3, [r3, #10]
 8006bb6:	3b30      	subs	r3, #48	; 0x30
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	4619      	mov	r1, r3
 8006bbc:	0089      	lsls	r1, r1, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	0088      	lsls	r0, r1, #2
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	440b      	add	r3, r1
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	7a5b      	ldrb	r3, [r3, #9]
 8006bd6:	3b30      	subs	r3, #48	; 0x30
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4619      	mov	r1, r3
 8006bdc:	0149      	lsls	r1, r1, #5
 8006bde:	1ac9      	subs	r1, r1, r3
 8006be0:	0089      	lsls	r1, r1, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4413      	add	r3, r2
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	7a1b      	ldrb	r3, [r3, #8]
 8006bf0:	3b30      	subs	r3, #48	; 0x30
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	0149      	lsls	r1, r1, #5
 8006bf8:	1ac9      	subs	r1, r1, r3
 8006bfa:	0089      	lsls	r1, r1, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	4619      	mov	r1, r3
 8006c00:	0088      	lsls	r0, r1, #2
 8006c02:	4619      	mov	r1, r3
 8006c04:	4603      	mov	r3, r0
 8006c06:	440b      	add	r3, r1
 8006c08:	011b      	lsls	r3, r3, #4
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b30      	subs	r3, #48	; 0x30
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	4b48      	ldr	r3, [pc, #288]	; (8006d38 <Custom_STM_Event_Handler+0x5b4>)
 8006c16:	801a      	strh	r2, [r3, #0]
					minor[1]= data_minor;
 8006c18:	4b47      	ldr	r3, [pc, #284]	; (8006d38 <Custom_STM_Event_Handler+0x5b4>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	4b45      	ldr	r3, [pc, #276]	; (8006d34 <Custom_STM_Event_Handler+0x5b0>)
 8006c20:	705a      	strb	r2, [r3, #1]
					minor[0]=data_minor>>8;
 8006c22:	4b45      	ldr	r3, [pc, #276]	; (8006d38 <Custom_STM_Event_Handler+0x5b4>)
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	0a1b      	lsrs	r3, r3, #8
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	4b41      	ldr	r3, [pc, #260]	; (8006d34 <Custom_STM_Event_Handler+0x5b0>)
 8006c2e:	701a      	strb	r2, [r3, #0]
					break;
 8006c30:	bf00      	nop
			memset(attribute_modified->Attr_Data,0,sizeof(attribute_modified->Attr_Data));
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	3308      	adds	r3, #8
 8006c36:	22f5      	movs	r2, #245	; 0xf5
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 ff8c 	bl	8007b58 <memset>
          break;
 8006c40:	e06e      	b.n	8006d20 <Custom_STM_Event_Handler+0x59c>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomValidateHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	885b      	ldrh	r3, [r3, #2]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4b3c      	ldr	r3, [pc, #240]	; (8006d3c <Custom_STM_Event_Handler+0x5b8>)
 8006c4c:	891b      	ldrh	r3, [r3, #8]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d165      	bne.n	8006d20 <Custom_STM_Event_Handler+0x59c>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			IBeacon_Process();
 8006c5a:	f000 fa65 	bl	8007128 <IBeacon_Process>
			uint8_t service_data[] =
 8006c5e:	231a      	movs	r3, #26
 8006c60:	733b      	strb	r3, [r7, #12]
 8006c62:	23ff      	movs	r3, #255	; 0xff
 8006c64:	737b      	strb	r3, [r7, #13]
 8006c66:	234c      	movs	r3, #76	; 0x4c
 8006c68:	73bb      	strb	r3, [r7, #14]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]
 8006c6e:	2302      	movs	r3, #2
 8006c70:	743b      	strb	r3, [r7, #16]
 8006c72:	2315      	movs	r3, #21
 8006c74:	747b      	strb	r3, [r7, #17]
 8006c76:	2300      	movs	r3, #0
 8006c78:	74bb      	strb	r3, [r7, #18]
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	74fb      	strb	r3, [r7, #19]
 8006c7e:	2302      	movs	r3, #2
 8006c80:	753b      	strb	r3, [r7, #20]
 8006c82:	2303      	movs	r3, #3
 8006c84:	757b      	strb	r3, [r7, #21]
 8006c86:	2304      	movs	r3, #4
 8006c88:	75bb      	strb	r3, [r7, #22]
 8006c8a:	2305      	movs	r3, #5
 8006c8c:	75fb      	strb	r3, [r7, #23]
 8006c8e:	2306      	movs	r3, #6
 8006c90:	763b      	strb	r3, [r7, #24]
 8006c92:	2307      	movs	r3, #7
 8006c94:	767b      	strb	r3, [r7, #25]
 8006c96:	2308      	movs	r3, #8
 8006c98:	76bb      	strb	r3, [r7, #26]
 8006c9a:	2309      	movs	r3, #9
 8006c9c:	76fb      	strb	r3, [r7, #27]
 8006c9e:	230a      	movs	r3, #10
 8006ca0:	773b      	strb	r3, [r7, #28]
 8006ca2:	230b      	movs	r3, #11
 8006ca4:	777b      	strb	r3, [r7, #29]
 8006ca6:	230c      	movs	r3, #12
 8006ca8:	77bb      	strb	r3, [r7, #30]
 8006caa:	230d      	movs	r3, #13
 8006cac:	77fb      	strb	r3, [r7, #31]
 8006cae:	230e      	movs	r3, #14
 8006cb0:	f887 3020 	strb.w	r3, [r7, #32]
 8006cb4:	230f      	movs	r3, #15
 8006cb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				major[0], major[1], // Major number
 8006cba:	4b21      	ldr	r3, [pc, #132]	; (8006d40 <Custom_STM_Event_Handler+0x5bc>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
			uint8_t service_data[] =
 8006cbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				major[0], major[1], // Major number
 8006cc2:	4b1f      	ldr	r3, [pc, #124]	; (8006d40 <Custom_STM_Event_Handler+0x5bc>)
 8006cc4:	785b      	ldrb	r3, [r3, #1]
			uint8_t service_data[] =
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				minor[0], minor[1], // Minor number
 8006cca:	4b1a      	ldr	r3, [pc, #104]	; (8006d34 <Custom_STM_Event_Handler+0x5b0>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
			uint8_t service_data[] =
 8006cce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				minor[0], minor[1], // Minor number
 8006cd2:	4b18      	ldr	r3, [pc, #96]	; (8006d34 <Custom_STM_Event_Handler+0x5b0>)
 8006cd4:	785b      	ldrb	r3, [r3, #1]
			uint8_t service_data[] =
 8006cd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				tx_power[indexPower] //2's complement of the Tx power (-56dB)};                                      /*< Ranging data. */
 8006cda:	4b1a      	ldr	r3, [pc, #104]	; (8006d44 <Custom_STM_Event_Handler+0x5c0>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4b19      	ldr	r3, [pc, #100]	; (8006d48 <Custom_STM_Event_Handler+0x5c4>)
 8006ce2:	5c9b      	ldrb	r3, [r3, r2]
			uint8_t service_data[] =
 8006ce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			aci_hal_set_tx_power_level(1, Power[indexPower]);
 8006ce8:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <Custom_STM_Event_Handler+0x5c0>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <Custom_STM_Event_Handler+0x5c8>)
 8006cf0:	569b      	ldrsb	r3, [r3, r2]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	f7fe f8b3 	bl	8004e62 <aci_hal_set_tx_power_level>
			aci_gap_update_adv_data(sizeof(service_data), service_data);
 8006cfc:	f107 030c 	add.w	r3, r7, #12
 8006d00:	4619      	mov	r1, r3
 8006d02:	201b      	movs	r0, #27
 8006d04:	f7fd fcde 	bl	80046c4 <aci_gap_update_adv_data>
			memset(attribute_modified->Attr_Data,0,sizeof(attribute_modified->Attr_Data));
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	22f5      	movs	r2, #245	; 0xf5
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 ff21 	bl	8007b58 <memset>
          break;
 8006d16:	e003      	b.n	8006d20 <Custom_STM_Event_Handler+0x59c>
          break;
 8006d18:	bf00      	nop
 8006d1a:	e004      	b.n	8006d26 <Custom_STM_Event_Handler+0x5a2>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8006d1c:	bf00      	nop
 8006d1e:	e002      	b.n	8006d26 <Custom_STM_Event_Handler+0x5a2>
          break;
 8006d20:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006d22:	e000      	b.n	8006d26 <Custom_STM_Event_Handler+0x5a2>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8006d24:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8006d26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}/* end Custom_STM_Event_Handler */
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3748      	adds	r7, #72	; 0x48
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000244 	.word	0x20000244
 8006d38:	20000248 	.word	0x20000248
 8006d3c:	20000100 	.word	0x20000100
 8006d40:	20000240 	.word	0x20000240
 8006d44:	2000023e 	.word	0x2000023e
 8006d48:	20000020 	.word	0x20000020
 8006d4c:	2000001c 	.word	0x2000001c

08006d50 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8006d56:	487f      	ldr	r0, [pc, #508]	; (8006f54 <SVCCTL_InitCustomSvc+0x204>)
 8006d58:	f7fe fad8 	bl	800530c <SVCCTL_RegisterSvcHandler>
   *                                2 for Minor +
   *                                2 for Validate +
   *                              = 9
   */

  COPY_MYSERVICE_UUID(uuid.Char_UUID_128);
 8006d5c:	238f      	movs	r3, #143	; 0x8f
 8006d5e:	703b      	strb	r3, [r7, #0]
 8006d60:	23e5      	movs	r3, #229	; 0xe5
 8006d62:	707b      	strb	r3, [r7, #1]
 8006d64:	23b3      	movs	r3, #179	; 0xb3
 8006d66:	70bb      	strb	r3, [r7, #2]
 8006d68:	23d5      	movs	r3, #213	; 0xd5
 8006d6a:	70fb      	strb	r3, [r7, #3]
 8006d6c:	232e      	movs	r3, #46	; 0x2e
 8006d6e:	713b      	strb	r3, [r7, #4]
 8006d70:	237f      	movs	r3, #127	; 0x7f
 8006d72:	717b      	strb	r3, [r7, #5]
 8006d74:	234a      	movs	r3, #74	; 0x4a
 8006d76:	71bb      	strb	r3, [r7, #6]
 8006d78:	2398      	movs	r3, #152	; 0x98
 8006d7a:	71fb      	strb	r3, [r7, #7]
 8006d7c:	232a      	movs	r3, #42	; 0x2a
 8006d7e:	723b      	strb	r3, [r7, #8]
 8006d80:	2348      	movs	r3, #72	; 0x48
 8006d82:	727b      	strb	r3, [r7, #9]
 8006d84:	237a      	movs	r3, #122	; 0x7a
 8006d86:	72bb      	strb	r3, [r7, #10]
 8006d88:	23cc      	movs	r3, #204	; 0xcc
 8006d8a:	72fb      	strb	r3, [r7, #11]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	733b      	strb	r3, [r7, #12]
 8006d90:	2300      	movs	r3, #0
 8006d92:	737b      	strb	r3, [r7, #13]
 8006d94:	2300      	movs	r3, #0
 8006d96:	73bb      	strb	r3, [r7, #14]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4b6e      	ldr	r3, [pc, #440]	; (8006f58 <SVCCTL_InitCustomSvc+0x208>)
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	2309      	movs	r3, #9
 8006da4:	2201      	movs	r2, #1
 8006da6:	2002      	movs	r0, #2
 8006da8:	f7fd fdd2 	bl	8004950 <aci_gatt_add_service>
                       &(CustomContext.CustomMyserviceHdle));

  /**
   *  Power
   */
  COPY_POWER_UUID(uuid.Char_UUID_128);
 8006dac:	2319      	movs	r3, #25
 8006dae:	703b      	strb	r3, [r7, #0]
 8006db0:	23ed      	movs	r3, #237	; 0xed
 8006db2:	707b      	strb	r3, [r7, #1]
 8006db4:	2382      	movs	r3, #130	; 0x82
 8006db6:	70bb      	strb	r3, [r7, #2]
 8006db8:	23ae      	movs	r3, #174	; 0xae
 8006dba:	70fb      	strb	r3, [r7, #3]
 8006dbc:	23ed      	movs	r3, #237	; 0xed
 8006dbe:	713b      	strb	r3, [r7, #4]
 8006dc0:	2321      	movs	r3, #33	; 0x21
 8006dc2:	717b      	strb	r3, [r7, #5]
 8006dc4:	234c      	movs	r3, #76	; 0x4c
 8006dc6:	71bb      	strb	r3, [r7, #6]
 8006dc8:	239d      	movs	r3, #157	; 0x9d
 8006dca:	71fb      	strb	r3, [r7, #7]
 8006dcc:	2341      	movs	r3, #65	; 0x41
 8006dce:	723b      	strb	r3, [r7, #8]
 8006dd0:	2345      	movs	r3, #69	; 0x45
 8006dd2:	727b      	strb	r3, [r7, #9]
 8006dd4:	2322      	movs	r3, #34	; 0x22
 8006dd6:	72bb      	strb	r3, [r7, #10]
 8006dd8:	238e      	movs	r3, #142	; 0x8e
 8006dda:	72fb      	strb	r3, [r7, #11]
 8006ddc:	2301      	movs	r3, #1
 8006dde:	733b      	strb	r3, [r7, #12]
 8006de0:	2300      	movs	r3, #0
 8006de2:	737b      	strb	r3, [r7, #13]
 8006de4:	2300      	movs	r3, #0
 8006de6:	73bb      	strb	r3, [r7, #14]
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMyserviceHdle,
 8006dec:	4b5a      	ldr	r3, [pc, #360]	; (8006f58 <SVCCTL_InitCustomSvc+0x208>)
 8006dee:	8818      	ldrh	r0, [r3, #0]
 8006df0:	2301      	movs	r3, #1
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	463a      	mov	r2, r7
 8006df6:	4959      	ldr	r1, [pc, #356]	; (8006f5c <SVCCTL_InitCustomSvc+0x20c>)
 8006df8:	9105      	str	r1, [sp, #20]
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	9104      	str	r1, [sp, #16]
 8006dfe:	2110      	movs	r1, #16
 8006e00:	9103      	str	r1, [sp, #12]
 8006e02:	2101      	movs	r1, #1
 8006e04:	9102      	str	r1, [sp, #8]
 8006e06:	2100      	movs	r1, #0
 8006e08:	9101      	str	r1, [sp, #4]
 8006e0a:	2108      	movs	r1, #8
 8006e0c:	9100      	str	r1, [sp, #0]
 8006e0e:	2102      	movs	r1, #2
 8006e10:	f7fd fe4d 	bl	8004aae <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomPowerHdle));
  /**
   *  Major
   */
  COPY_MAJOR_UUID(uuid.Char_UUID_128);
 8006e14:	2319      	movs	r3, #25
 8006e16:	703b      	strb	r3, [r7, #0]
 8006e18:	23ed      	movs	r3, #237	; 0xed
 8006e1a:	707b      	strb	r3, [r7, #1]
 8006e1c:	2382      	movs	r3, #130	; 0x82
 8006e1e:	70bb      	strb	r3, [r7, #2]
 8006e20:	23ae      	movs	r3, #174	; 0xae
 8006e22:	70fb      	strb	r3, [r7, #3]
 8006e24:	23ed      	movs	r3, #237	; 0xed
 8006e26:	713b      	strb	r3, [r7, #4]
 8006e28:	2321      	movs	r3, #33	; 0x21
 8006e2a:	717b      	strb	r3, [r7, #5]
 8006e2c:	234c      	movs	r3, #76	; 0x4c
 8006e2e:	71bb      	strb	r3, [r7, #6]
 8006e30:	239d      	movs	r3, #157	; 0x9d
 8006e32:	71fb      	strb	r3, [r7, #7]
 8006e34:	2341      	movs	r3, #65	; 0x41
 8006e36:	723b      	strb	r3, [r7, #8]
 8006e38:	2345      	movs	r3, #69	; 0x45
 8006e3a:	727b      	strb	r3, [r7, #9]
 8006e3c:	2322      	movs	r3, #34	; 0x22
 8006e3e:	72bb      	strb	r3, [r7, #10]
 8006e40:	238e      	movs	r3, #142	; 0x8e
 8006e42:	72fb      	strb	r3, [r7, #11]
 8006e44:	2302      	movs	r3, #2
 8006e46:	733b      	strb	r3, [r7, #12]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	737b      	strb	r3, [r7, #13]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73bb      	strb	r3, [r7, #14]
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMyserviceHdle,
 8006e54:	4b40      	ldr	r3, [pc, #256]	; (8006f58 <SVCCTL_InitCustomSvc+0x208>)
 8006e56:	8818      	ldrh	r0, [r3, #0]
 8006e58:	2305      	movs	r3, #5
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	463a      	mov	r2, r7
 8006e5e:	4940      	ldr	r1, [pc, #256]	; (8006f60 <SVCCTL_InitCustomSvc+0x210>)
 8006e60:	9105      	str	r1, [sp, #20]
 8006e62:	2101      	movs	r1, #1
 8006e64:	9104      	str	r1, [sp, #16]
 8006e66:	2110      	movs	r1, #16
 8006e68:	9103      	str	r1, [sp, #12]
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	9102      	str	r1, [sp, #8]
 8006e6e:	2100      	movs	r1, #0
 8006e70:	9101      	str	r1, [sp, #4]
 8006e72:	2108      	movs	r1, #8
 8006e74:	9100      	str	r1, [sp, #0]
 8006e76:	2102      	movs	r1, #2
 8006e78:	f7fd fe19 	bl	8004aae <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomMajorHdle));
  /**
   *  Minor
   */
  COPY_MINOR_UUID(uuid.Char_UUID_128);
 8006e7c:	2319      	movs	r3, #25
 8006e7e:	703b      	strb	r3, [r7, #0]
 8006e80:	23ed      	movs	r3, #237	; 0xed
 8006e82:	707b      	strb	r3, [r7, #1]
 8006e84:	2382      	movs	r3, #130	; 0x82
 8006e86:	70bb      	strb	r3, [r7, #2]
 8006e88:	23ae      	movs	r3, #174	; 0xae
 8006e8a:	70fb      	strb	r3, [r7, #3]
 8006e8c:	23ed      	movs	r3, #237	; 0xed
 8006e8e:	713b      	strb	r3, [r7, #4]
 8006e90:	2321      	movs	r3, #33	; 0x21
 8006e92:	717b      	strb	r3, [r7, #5]
 8006e94:	234c      	movs	r3, #76	; 0x4c
 8006e96:	71bb      	strb	r3, [r7, #6]
 8006e98:	239d      	movs	r3, #157	; 0x9d
 8006e9a:	71fb      	strb	r3, [r7, #7]
 8006e9c:	2341      	movs	r3, #65	; 0x41
 8006e9e:	723b      	strb	r3, [r7, #8]
 8006ea0:	2345      	movs	r3, #69	; 0x45
 8006ea2:	727b      	strb	r3, [r7, #9]
 8006ea4:	2322      	movs	r3, #34	; 0x22
 8006ea6:	72bb      	strb	r3, [r7, #10]
 8006ea8:	238e      	movs	r3, #142	; 0x8e
 8006eaa:	72fb      	strb	r3, [r7, #11]
 8006eac:	2303      	movs	r3, #3
 8006eae:	733b      	strb	r3, [r7, #12]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	737b      	strb	r3, [r7, #13]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73bb      	strb	r3, [r7, #14]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMyserviceHdle,
 8006ebc:	4b26      	ldr	r3, [pc, #152]	; (8006f58 <SVCCTL_InitCustomSvc+0x208>)
 8006ebe:	8818      	ldrh	r0, [r3, #0]
 8006ec0:	2305      	movs	r3, #5
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	463a      	mov	r2, r7
 8006ec6:	4927      	ldr	r1, [pc, #156]	; (8006f64 <SVCCTL_InitCustomSvc+0x214>)
 8006ec8:	9105      	str	r1, [sp, #20]
 8006eca:	2101      	movs	r1, #1
 8006ecc:	9104      	str	r1, [sp, #16]
 8006ece:	2110      	movs	r1, #16
 8006ed0:	9103      	str	r1, [sp, #12]
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	9102      	str	r1, [sp, #8]
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	9101      	str	r1, [sp, #4]
 8006eda:	2108      	movs	r1, #8
 8006edc:	9100      	str	r1, [sp, #0]
 8006ede:	2102      	movs	r1, #2
 8006ee0:	f7fd fde5 	bl	8004aae <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomMinorHdle));
  /**
   *  Validate
   */
  COPY_VALIDATE_UUID(uuid.Char_UUID_128);
 8006ee4:	2319      	movs	r3, #25
 8006ee6:	703b      	strb	r3, [r7, #0]
 8006ee8:	23ed      	movs	r3, #237	; 0xed
 8006eea:	707b      	strb	r3, [r7, #1]
 8006eec:	2382      	movs	r3, #130	; 0x82
 8006eee:	70bb      	strb	r3, [r7, #2]
 8006ef0:	23ae      	movs	r3, #174	; 0xae
 8006ef2:	70fb      	strb	r3, [r7, #3]
 8006ef4:	23ed      	movs	r3, #237	; 0xed
 8006ef6:	713b      	strb	r3, [r7, #4]
 8006ef8:	2321      	movs	r3, #33	; 0x21
 8006efa:	717b      	strb	r3, [r7, #5]
 8006efc:	234c      	movs	r3, #76	; 0x4c
 8006efe:	71bb      	strb	r3, [r7, #6]
 8006f00:	239d      	movs	r3, #157	; 0x9d
 8006f02:	71fb      	strb	r3, [r7, #7]
 8006f04:	2341      	movs	r3, #65	; 0x41
 8006f06:	723b      	strb	r3, [r7, #8]
 8006f08:	2345      	movs	r3, #69	; 0x45
 8006f0a:	727b      	strb	r3, [r7, #9]
 8006f0c:	2322      	movs	r3, #34	; 0x22
 8006f0e:	72bb      	strb	r3, [r7, #10]
 8006f10:	238e      	movs	r3, #142	; 0x8e
 8006f12:	72fb      	strb	r3, [r7, #11]
 8006f14:	2304      	movs	r3, #4
 8006f16:	733b      	strb	r3, [r7, #12]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	737b      	strb	r3, [r7, #13]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73bb      	strb	r3, [r7, #14]
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMyserviceHdle,
 8006f24:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <SVCCTL_InitCustomSvc+0x208>)
 8006f26:	8818      	ldrh	r0, [r3, #0]
 8006f28:	2301      	movs	r3, #1
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	463a      	mov	r2, r7
 8006f2e:	490e      	ldr	r1, [pc, #56]	; (8006f68 <SVCCTL_InitCustomSvc+0x218>)
 8006f30:	9105      	str	r1, [sp, #20]
 8006f32:	2100      	movs	r1, #0
 8006f34:	9104      	str	r1, [sp, #16]
 8006f36:	2110      	movs	r1, #16
 8006f38:	9103      	str	r1, [sp, #12]
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	9102      	str	r1, [sp, #8]
 8006f3e:	2100      	movs	r1, #0
 8006f40:	9101      	str	r1, [sp, #4]
 8006f42:	2108      	movs	r1, #8
 8006f44:	9100      	str	r1, [sp, #0]
 8006f46:	2102      	movs	r1, #2
 8006f48:	f7fd fdb1 	bl	8004aae <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8006f4c:	bf00      	nop
}
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	08006785 	.word	0x08006785
 8006f58:	20000100 	.word	0x20000100
 8006f5c:	20000102 	.word	0x20000102
 8006f60:	20000104 	.word	0x20000104
 8006f64:	20000106 	.word	0x20000106
 8006f68:	20000108 	.word	0x20000108

08006f6c <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b094      	sub	sp, #80	; 0x50
 8006f70:	af08      	add	r7, sp, #32
 8006f72:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	4a67      	ldr	r2, [pc, #412]	; (8007120 <IBeacon_Init+0x1b4>)
 8006f82:	fb82 1203 	smull	r1, r2, r2, r3
 8006f86:	1092      	asrs	r2, r2, #2
 8006f88:	17db      	asrs	r3, r3, #31
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 8006f8e:	2100      	movs	r1, #0
 8006f90:	2000      	movs	r0, #0
 8006f92:	f7fe f82b 	bl	8004fec <hci_le_set_scan_response_data>
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )*/
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 8006f96:	2300      	movs	r3, #0
 8006f98:	9306      	str	r3, [sp, #24]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9305      	str	r3, [sp, #20]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	9303      	str	r3, [sp, #12]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	9302      	str	r3, [sp, #8]
 8006faa:	2300      	movs	r3, #0
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006fb8:	2164      	movs	r1, #100	; 0x64
 8006fba:	2003      	movs	r0, #3
 8006fbc:	f7fd f8d0 	bl	8004160 <aci_gap_set_discoverable>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8006fc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <IBeacon_Init+0x68>
  {
    return ret;
 8006fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fd2:	e0a1      	b.n	8007118 <IBeacon_Init+0x1ac>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8006fd4:	200a      	movs	r0, #10
 8006fd6:	f7fd fbd1 	bl	800477c <aci_gap_delete_ad_type>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8006fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <IBeacon_Init+0x82>
  {
    return ret;
 8006fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fec:	e094      	b.n	8007118 <IBeacon_Init+0x1ac>
  }

  uint8_t service_data[] =
 8006fee:	231a      	movs	r3, #26
 8006ff0:	743b      	strb	r3, [r7, #16]
 8006ff2:	23ff      	movs	r3, #255	; 0xff
 8006ff4:	747b      	strb	r3, [r7, #17]
 8006ff6:	234c      	movs	r3, #76	; 0x4c
 8006ff8:	74bb      	strb	r3, [r7, #18]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	74fb      	strb	r3, [r7, #19]
 8006ffe:	2302      	movs	r3, #2
 8007000:	753b      	strb	r3, [r7, #20]
 8007002:	2315      	movs	r3, #21
 8007004:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 800700c:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800701a:	789b      	ldrb	r3, [r3, #2]
 800701c:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007022:	78db      	ldrb	r3, [r3, #3]
 8007024:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800702a:	791b      	ldrb	r3, [r3, #4]
 800702c:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007032:	795b      	ldrb	r3, [r3, #5]
 8007034:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800703a:	799b      	ldrb	r3, [r3, #6]
 800703c:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007042:	79db      	ldrb	r3, [r3, #7]
 8007044:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800704a:	7a1b      	ldrb	r3, [r3, #8]
 800704c:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007052:	7a5b      	ldrb	r3, [r3, #9]
 8007054:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800705a:	7a9b      	ldrb	r3, [r3, #10]
 800705c:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007064:	7adb      	ldrb	r3, [r3, #11]
 8007066:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    IBeacon_Init->UuID[12],
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800706e:	7b1b      	ldrb	r3, [r3, #12]
 8007070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    IBeacon_Init->UuID[13],
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007078:	7b5b      	ldrb	r3, [r3, #13]
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    IBeacon_Init->UuID[14],
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007082:	7b9b      	ldrb	r3, [r3, #14]
 8007084:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    IBeacon_Init->UuID[15],
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800708c:	7bdb      	ldrb	r3, [r3, #15]
 800708e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8007098:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    IBeacon_Init->MajorID[1],
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 80070ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    IBeacon_Init->MinorID[1],
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 80070be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  };

  uint8_t flags[] =
 80070c2:	4a18      	ldr	r2, [pc, #96]	; (8007124 <IBeacon_Init+0x1b8>)
 80070c4:	f107 030c 	add.w	r3, r7, #12
 80070c8:	6812      	ldr	r2, [r2, #0]
 80070ca:	4611      	mov	r1, r2
 80070cc:	8019      	strh	r1, [r3, #0]
 80070ce:	3302      	adds	r3, #2
 80070d0:	0c12      	lsrs	r2, r2, #16
 80070d2:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 80070d4:	f107 0310 	add.w	r3, r7, #16
 80070d8:	4619      	mov	r1, r3
 80070da:	201b      	movs	r0, #27
 80070dc:	f7fd faf2 	bl	80046c4 <aci_gap_update_adv_data>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80070e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <IBeacon_Init+0x188>
  {
    return ret;
 80070ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070f2:	e011      	b.n	8007118 <IBeacon_Init+0x1ac>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 80070f4:	f107 030c 	add.w	r3, r7, #12
 80070f8:	4619      	mov	r1, r3
 80070fa:	2003      	movs	r0, #3
 80070fc:	f7fd fae2 	bl	80046c4 <aci_gap_update_adv_data>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8007106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <IBeacon_Init+0x1a8>
  {
    return ret;
 800710e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007112:	e001      	b.n	8007118 <IBeacon_Init+0x1ac>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 8007114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007118:	4618      	mov	r0, r3
 800711a:	3730      	adds	r7, #48	; 0x30
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	66666667 	.word	0x66666667
 8007124:	08007c08 	.word	0x08007c08

08007128 <IBeacon_Process>:

void IBeacon_Process(void)
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b08d      	sub	sp, #52	; 0x34
 800712c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 800712e:	4b11      	ldr	r3, [pc, #68]	; (8007174 <IBeacon_Process+0x4c>)
 8007130:	f107 0420 	add.w	r4, r7, #32
 8007134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007136:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 800713a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800713e:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 8007140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007144:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 8007146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800714a:	80bb      	strh	r3, [r7, #4]
 800714c:	f107 0320 	add.w	r3, r7, #32
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	f107 031c 	add.w	r3, r7, #28
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	f107 0318 	add.w	r3, r7, #24
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	23c1      	movs	r3, #193	; 0xc1
 8007160:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 8007162:	1d3b      	adds	r3, r7, #4
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff ff01 	bl	8006f6c <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 800716a:	bf00      	nop
 800716c:	3734      	adds	r7, #52	; 0x34
 800716e:	46bd      	mov	sp, r7
 8007170:	bd90      	pop	{r4, r7, pc}
 8007172:	bf00      	nop
 8007174:	08007c0c 	.word	0x08007c0c

08007178 <LL_PWR_EnableBootC2>:
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800717c:	4b05      	ldr	r3, [pc, #20]	; (8007194 <LL_PWR_EnableBootC2+0x1c>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4a04      	ldr	r2, [pc, #16]	; (8007194 <LL_PWR_EnableBootC2+0x1c>)
 8007182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007186:	60d3      	str	r3, [r2, #12]
}
 8007188:	bf00      	nop
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	58000400 	.word	0x58000400

08007198 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80071a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80071a6:	4905      	ldr	r1, [pc, #20]	; (80071bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	58000800 	.word	0x58000800

080071c0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80071c8:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	4904      	ldr	r1, [pc, #16]	; (80071e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	620b      	str	r3, [r1, #32]
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	58000800 	.word	0x58000800

080071e4 <LL_AHB3_GRP1_EnableClock>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80071ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80071fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4013      	ands	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007208:	68fb      	ldr	r3, [r7, #12]
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800721e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007222:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007236:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4013      	ands	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007240:	68fb      	ldr	r3, [r7, #12]
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <LL_C1_IPCC_EnableIT_TXF>:
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <LL_C1_IPCC_EnableIT_RXO>:
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f043 0201 	orr.w	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	041b      	lsls	r3, r3, #16
 80072a0:	43db      	mvns	r3, r3
 80072a2:	401a      	ands	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	605a      	str	r2, [r3, #4]
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	605a      	str	r2, [r3, #4]
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	43db      	mvns	r3, r3
 80072ea:	401a      	ands	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	605a      	str	r2, [r3, #4]
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <LL_C1_IPCC_ClearFlag_CHx>:
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	609a      	str	r2, [r3, #8]
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <LL_C1_IPCC_SetFlag_CHx>:
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	041a      	lsls	r2, r3, #16
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	609a      	str	r2, [r3, #8]
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	4013      	ands	r3, r2
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d101      	bne.n	8007352 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69da      	ldr	r2, [r3, #28]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	4013      	ands	r3, r2
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d101      	bne.n	800737c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007390:	2102      	movs	r1, #2
 8007392:	4819      	ldr	r0, [pc, #100]	; (80073f8 <HW_IPCC_Rx_Handler+0x6c>)
 8007394:	f7ff ffe4 	bl	8007360 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <HW_IPCC_Rx_Handler+0x26>
 800739e:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <HW_IPCC_Rx_Handler+0x6c>)
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	43db      	mvns	r3, r3
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80073ac:	f000 f8da 	bl	8007564 <HW_IPCC_SYS_EvtHandler>
 80073b0:	e01f      	b.n	80073f2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80073b2:	2101      	movs	r1, #1
 80073b4:	4810      	ldr	r0, [pc, #64]	; (80073f8 <HW_IPCC_Rx_Handler+0x6c>)
 80073b6:	f7ff ffd3 	bl	8007360 <LL_C2_IPCC_IsActiveFlag_CHx>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <HW_IPCC_Rx_Handler+0x46>
 80073c0:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <HW_IPCC_Rx_Handler+0x6c>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d102      	bne.n	80073d2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80073cc:	f000 f88e 	bl	80074ec <HW_IPCC_BLE_EvtHandler>
 80073d0:	e00f      	b.n	80073f2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80073d2:	2108      	movs	r1, #8
 80073d4:	4808      	ldr	r0, [pc, #32]	; (80073f8 <HW_IPCC_Rx_Handler+0x6c>)
 80073d6:	f7ff ffc3 	bl	8007360 <LL_C2_IPCC_IsActiveFlag_CHx>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d009      	beq.n	80073f4 <HW_IPCC_Rx_Handler+0x68>
 80073e0:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <HW_IPCC_Rx_Handler+0x6c>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	43db      	mvns	r3, r3
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80073ee:	f000 f905 	bl	80075fc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80073f2:	bf00      	nop
 80073f4:	bf00      	nop
}
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	58000c00 	.word	0x58000c00

080073fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007400:	2102      	movs	r1, #2
 8007402:	481a      	ldr	r0, [pc, #104]	; (800746c <HW_IPCC_Tx_Handler+0x70>)
 8007404:	f7ff ff97 	bl	8007336 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HW_IPCC_Tx_Handler+0x26>
 800740e:	4b17      	ldr	r3, [pc, #92]	; (800746c <HW_IPCC_Tx_Handler+0x70>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	43db      	mvns	r3, r3
 8007414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800741c:	f000 f896 	bl	800754c <HW_IPCC_SYS_CmdEvtHandler>
 8007420:	e020      	b.n	8007464 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007422:	2108      	movs	r1, #8
 8007424:	4811      	ldr	r0, [pc, #68]	; (800746c <HW_IPCC_Tx_Handler+0x70>)
 8007426:	f7ff ff86 	bl	8007336 <LL_C1_IPCC_IsActiveFlag_CHx>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d109      	bne.n	8007444 <HW_IPCC_Tx_Handler+0x48>
 8007430:	4b0e      	ldr	r3, [pc, #56]	; (800746c <HW_IPCC_Tx_Handler+0x70>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	43db      	mvns	r3, r3
 8007436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800743e:	f000 f8bf 	bl	80075c0 <HW_IPCC_MM_FreeBufHandler>
 8007442:	e00f      	b.n	8007464 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007444:	2120      	movs	r1, #32
 8007446:	4809      	ldr	r0, [pc, #36]	; (800746c <HW_IPCC_Tx_Handler+0x70>)
 8007448:	f7ff ff75 	bl	8007336 <LL_C1_IPCC_IsActiveFlag_CHx>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d109      	bne.n	8007466 <HW_IPCC_Tx_Handler+0x6a>
 8007452:	4b06      	ldr	r3, [pc, #24]	; (800746c <HW_IPCC_Tx_Handler+0x70>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	43db      	mvns	r3, r3
 8007458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007460:	f000 f850 	bl	8007504 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007464:	bf00      	nop
 8007466:	bf00      	nop
}
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	58000c00 	.word	0x58000c00

08007470 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007474:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007478:	f7ff fecd 	bl	8007216 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800747c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007480:	f7ff fe8a 	bl	8007198 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8007484:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007488:	f7ff fe9a 	bl	80071c0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800748c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800748e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007490:	f7ff fe72 	bl	8007178 <LL_PWR_EnableBootC2>

  return;
 8007494:	bf00      	nop
}
 8007496:	bd80      	pop	{r7, pc}

08007498 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800749c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80074a0:	f7ff fea0 	bl	80071e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80074a4:	4806      	ldr	r0, [pc, #24]	; (80074c0 <HW_IPCC_Init+0x28>)
 80074a6:	f7ff fee2 	bl	800726e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80074aa:	4805      	ldr	r0, [pc, #20]	; (80074c0 <HW_IPCC_Init+0x28>)
 80074ac:	f7ff fecf 	bl	800724e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80074b0:	202c      	movs	r0, #44	; 0x2c
 80074b2:	f7fa fc6c 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80074b6:	202d      	movs	r0, #45	; 0x2d
 80074b8:	f7fa fc69 	bl	8001d8e <HAL_NVIC_EnableIRQ>

  return;
 80074bc:	bf00      	nop
}
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	58000c00 	.word	0x58000c00

080074c4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80074c8:	2101      	movs	r1, #1
 80074ca:	4802      	ldr	r0, [pc, #8]	; (80074d4 <HW_IPCC_BLE_Init+0x10>)
 80074cc:	f7ff ff04 	bl	80072d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80074d0:	bf00      	nop
}
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	58000c00 	.word	0x58000c00

080074d8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80074dc:	2101      	movs	r1, #1
 80074de:	4802      	ldr	r0, [pc, #8]	; (80074e8 <HW_IPCC_BLE_SendCmd+0x10>)
 80074e0:	f7ff ff1a 	bl	8007318 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80074e4:	bf00      	nop
}
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	58000c00 	.word	0x58000c00

080074ec <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80074f0:	f7fe fbc6 	bl	8005c80 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80074f4:	2101      	movs	r1, #1
 80074f6:	4802      	ldr	r0, [pc, #8]	; (8007500 <HW_IPCC_BLE_EvtHandler+0x14>)
 80074f8:	f7ff ff00 	bl	80072fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80074fc:	bf00      	nop
}
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	58000c00 	.word	0x58000c00

08007504 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007508:	2120      	movs	r1, #32
 800750a:	4803      	ldr	r0, [pc, #12]	; (8007518 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800750c:	f7ff fed2 	bl	80072b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007510:	f7fe fbe6 	bl	8005ce0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007514:	bf00      	nop
}
 8007516:	bd80      	pop	{r7, pc}
 8007518:	58000c00 	.word	0x58000c00

0800751c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007520:	2102      	movs	r1, #2
 8007522:	4802      	ldr	r0, [pc, #8]	; (800752c <HW_IPCC_SYS_Init+0x10>)
 8007524:	f7ff fed8 	bl	80072d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007528:	bf00      	nop
}
 800752a:	bd80      	pop	{r7, pc}
 800752c:	58000c00 	.word	0x58000c00

08007530 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007534:	2102      	movs	r1, #2
 8007536:	4804      	ldr	r0, [pc, #16]	; (8007548 <HW_IPCC_SYS_SendCmd+0x18>)
 8007538:	f7ff feee 	bl	8007318 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800753c:	2102      	movs	r1, #2
 800753e:	4802      	ldr	r0, [pc, #8]	; (8007548 <HW_IPCC_SYS_SendCmd+0x18>)
 8007540:	f7ff fea5 	bl	800728e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007544:	bf00      	nop
}
 8007546:	bd80      	pop	{r7, pc}
 8007548:	58000c00 	.word	0x58000c00

0800754c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007550:	2102      	movs	r1, #2
 8007552:	4803      	ldr	r0, [pc, #12]	; (8007560 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007554:	f7ff feae 	bl	80072b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007558:	f7fe fc12 	bl	8005d80 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800755c:	bf00      	nop
}
 800755e:	bd80      	pop	{r7, pc}
 8007560:	58000c00 	.word	0x58000c00

08007564 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007568:	f7fe fc20 	bl	8005dac <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800756c:	2102      	movs	r1, #2
 800756e:	4802      	ldr	r0, [pc, #8]	; (8007578 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007570:	f7ff fec4 	bl	80072fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007574:	bf00      	nop
}
 8007576:	bd80      	pop	{r7, pc}
 8007578:	58000c00 	.word	0x58000c00

0800757c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007584:	2108      	movs	r1, #8
 8007586:	480c      	ldr	r0, [pc, #48]	; (80075b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007588:	f7ff fed5 	bl	8007336 <LL_C1_IPCC_IsActiveFlag_CHx>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8007592:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007598:	2108      	movs	r1, #8
 800759a:	4807      	ldr	r0, [pc, #28]	; (80075b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800759c:	f7ff fe77 	bl	800728e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80075a0:	e006      	b.n	80075b0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80075a6:	2108      	movs	r1, #8
 80075a8:	4803      	ldr	r0, [pc, #12]	; (80075b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80075aa:	f7ff feb5 	bl	8007318 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80075ae:	bf00      	nop
}
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	58000c00 	.word	0x58000c00
 80075bc:	2000024c 	.word	0x2000024c

080075c0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80075c4:	2108      	movs	r1, #8
 80075c6:	4806      	ldr	r0, [pc, #24]	; (80075e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80075c8:	f7ff fe74 	bl	80072b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80075d2:	2108      	movs	r1, #8
 80075d4:	4802      	ldr	r0, [pc, #8]	; (80075e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80075d6:	f7ff fe9f 	bl	8007318 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80075da:	bf00      	nop
}
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	58000c00 	.word	0x58000c00
 80075e4:	2000024c 	.word	0x2000024c

080075e8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80075ec:	2108      	movs	r1, #8
 80075ee:	4802      	ldr	r0, [pc, #8]	; (80075f8 <HW_IPCC_TRACES_Init+0x10>)
 80075f0:	f7ff fe72 	bl	80072d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80075f4:	bf00      	nop
}
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	58000c00 	.word	0x58000c00

080075fc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007600:	f7fe fc7c 	bl	8005efc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007604:	2108      	movs	r1, #8
 8007606:	4802      	ldr	r0, [pc, #8]	; (8007610 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007608:	f7ff fe78 	bl	80072fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800760c:	bf00      	nop
}
 800760e:	bd80      	pop	{r7, pc}
 8007610:	58000c00 	.word	0x58000c00

08007614 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007618:	4b05      	ldr	r3, [pc, #20]	; (8007630 <UTIL_LPM_Init+0x1c>)
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <UTIL_LPM_Init+0x20>)
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007624:	bf00      	nop
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	20000250 	.word	0x20000250
 8007634:	20000254 	.word	0x20000254

08007638 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007644:	f3ef 8310 	mrs	r3, PRIMASK
 8007648:	613b      	str	r3, [r7, #16]
  return(result);
 800764a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800764c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800764e:	b672      	cpsid	i
}
 8007650:	bf00      	nop
  
  switch(state)
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d008      	beq.n	800766a <UTIL_LPM_SetOffMode+0x32>
 8007658:	2b01      	cmp	r3, #1
 800765a:	d10e      	bne.n	800767a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800765c:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <UTIL_LPM_SetOffMode+0x5c>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4313      	orrs	r3, r2
 8007664:	4a0b      	ldr	r2, [pc, #44]	; (8007694 <UTIL_LPM_SetOffMode+0x5c>)
 8007666:	6013      	str	r3, [r2, #0]
      break;
 8007668:	e008      	b.n	800767c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	43da      	mvns	r2, r3
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <UTIL_LPM_SetOffMode+0x5c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4013      	ands	r3, r2
 8007674:	4a07      	ldr	r2, [pc, #28]	; (8007694 <UTIL_LPM_SetOffMode+0x5c>)
 8007676:	6013      	str	r3, [r2, #0]
      break;
 8007678:	e000      	b.n	800767c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800767a:	bf00      	nop
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f383 8810 	msr	PRIMASK, r3
}
 8007686:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007688:	bf00      	nop
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	20000254 	.word	0x20000254

08007698 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08c      	sub	sp, #48	; 0x30
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80076a0:	4b6a      	ldr	r3, [pc, #424]	; (800784c <UTIL_SEQ_Run+0x1b4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 80076a6:	4b69      	ldr	r3, [pc, #420]	; (800784c <UTIL_SEQ_Run+0x1b4>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4013      	ands	r3, r2
 80076ae:	4a67      	ldr	r2, [pc, #412]	; (800784c <UTIL_SEQ_Run+0x1b4>)
 80076b0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80076b2:	4b67      	ldr	r3, [pc, #412]	; (8007850 <UTIL_SEQ_Run+0x1b8>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80076b8:	e086      	b.n	80077c8 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80076be:	e002      	b.n	80076c6 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	3301      	adds	r3, #1
 80076c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80076c6:	4a63      	ldr	r2, [pc, #396]	; (8007854 <UTIL_SEQ_Run+0x1bc>)
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80076ce:	4b62      	ldr	r3, [pc, #392]	; (8007858 <UTIL_SEQ_Run+0x1c0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	401a      	ands	r2, r3
 80076d4:	4b5d      	ldr	r3, [pc, #372]	; (800784c <UTIL_SEQ_Run+0x1b4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4013      	ands	r3, r2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80076de:	4a5d      	ldr	r2, [pc, #372]	; (8007854 <UTIL_SEQ_Run+0x1bc>)
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80076e6:	4b5c      	ldr	r3, [pc, #368]	; (8007858 <UTIL_SEQ_Run+0x1c0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	401a      	ands	r2, r3
 80076ec:	4b57      	ldr	r3, [pc, #348]	; (800784c <UTIL_SEQ_Run+0x1b4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4013      	ands	r3, r2
 80076f2:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80076f4:	4a57      	ldr	r2, [pc, #348]	; (8007854 <UTIL_SEQ_Run+0x1bc>)
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	4413      	add	r3, r2
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	4013      	ands	r3, r2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007706:	4a53      	ldr	r2, [pc, #332]	; (8007854 <UTIL_SEQ_Run+0x1bc>)
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4413      	add	r3, r2
 800770e:	f04f 32ff 	mov.w	r2, #4294967295
 8007712:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007714:	4a4f      	ldr	r2, [pc, #316]	; (8007854 <UTIL_SEQ_Run+0x1bc>)
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4413      	add	r3, r2
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	4013      	ands	r3, r2
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f9ac 	bl	8007a80 <SEQ_BitPosition>
 8007728:	4603      	mov	r3, r0
 800772a:	461a      	mov	r2, r3
 800772c:	4b4b      	ldr	r3, [pc, #300]	; (800785c <UTIL_SEQ_Run+0x1c4>)
 800772e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8007730:	4a48      	ldr	r2, [pc, #288]	; (8007854 <UTIL_SEQ_Run+0x1bc>)
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	4413      	add	r3, r2
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	4b48      	ldr	r3, [pc, #288]	; (800785c <UTIL_SEQ_Run+0x1c4>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2101      	movs	r1, #1
 8007740:	fa01 f303 	lsl.w	r3, r1, r3
 8007744:	43db      	mvns	r3, r3
 8007746:	401a      	ands	r2, r3
 8007748:	4942      	ldr	r1, [pc, #264]	; (8007854 <UTIL_SEQ_Run+0x1bc>)
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	440b      	add	r3, r1
 8007750:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007752:	f3ef 8310 	mrs	r3, PRIMASK
 8007756:	617b      	str	r3, [r7, #20]
  return(result);
 8007758:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800775a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800775c:	b672      	cpsid	i
}
 800775e:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8007760:	4b3e      	ldr	r3, [pc, #248]	; (800785c <UTIL_SEQ_Run+0x1c4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2201      	movs	r2, #1
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	43da      	mvns	r2, r3
 800776c:	4b38      	ldr	r3, [pc, #224]	; (8007850 <UTIL_SEQ_Run+0x1b8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4013      	ands	r3, r2
 8007772:	4a37      	ldr	r2, [pc, #220]	; (8007850 <UTIL_SEQ_Run+0x1b8>)
 8007774:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007776:	2302      	movs	r3, #2
 8007778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800777a:	e013      	b.n	80077a4 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	3b01      	subs	r3, #1
 8007780:	4a34      	ldr	r2, [pc, #208]	; (8007854 <UTIL_SEQ_Run+0x1bc>)
 8007782:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007786:	4b35      	ldr	r3, [pc, #212]	; (800785c <UTIL_SEQ_Run+0x1c4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2201      	movs	r2, #1
 800778c:	fa02 f303 	lsl.w	r3, r2, r3
 8007790:	43da      	mvns	r2, r3
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	3b01      	subs	r3, #1
 8007796:	400a      	ands	r2, r1
 8007798:	492e      	ldr	r1, [pc, #184]	; (8007854 <UTIL_SEQ_Run+0x1bc>)
 800779a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	3b01      	subs	r3, #1
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e8      	bne.n	800777c <UTIL_SEQ_Run+0xe4>
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f383 8810 	msr	PRIMASK, r3
}
 80077b4:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80077b6:	4b29      	ldr	r3, [pc, #164]	; (800785c <UTIL_SEQ_Run+0x1c4>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a29      	ldr	r2, [pc, #164]	; (8007860 <UTIL_SEQ_Run+0x1c8>)
 80077bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c0:	4798      	blx	r3
    
    local_taskset = TaskSet;
 80077c2:	4b23      	ldr	r3, [pc, #140]	; (8007850 <UTIL_SEQ_Run+0x1b8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80077c8:	4b23      	ldr	r3, [pc, #140]	; (8007858 <UTIL_SEQ_Run+0x1c0>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	401a      	ands	r2, r3
 80077d0:	4b1e      	ldr	r3, [pc, #120]	; (800784c <UTIL_SEQ_Run+0x1b4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <UTIL_SEQ_Run+0x152>
 80077da:	4b22      	ldr	r3, [pc, #136]	; (8007864 <UTIL_SEQ_Run+0x1cc>)
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b22      	ldr	r3, [pc, #136]	; (8007868 <UTIL_SEQ_Run+0x1d0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4013      	ands	r3, r2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f43f af68 	beq.w	80076ba <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80077ea:	4b1c      	ldr	r3, [pc, #112]	; (800785c <UTIL_SEQ_Run+0x1c4>)
 80077ec:	f04f 32ff 	mov.w	r2, #4294967295
 80077f0:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80077f2:	f000 f937 	bl	8007a64 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f6:	f3ef 8310 	mrs	r3, PRIMASK
 80077fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80077fc:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80077fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8007800:	b672      	cpsid	i
}
 8007802:	bf00      	nop
  local_taskset = TaskSet;
 8007804:	4b12      	ldr	r3, [pc, #72]	; (8007850 <UTIL_SEQ_Run+0x1b8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800780a:	4b13      	ldr	r3, [pc, #76]	; (8007858 <UTIL_SEQ_Run+0x1c0>)
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	401a      	ands	r2, r3
 8007812:	4b0e      	ldr	r3, [pc, #56]	; (800784c <UTIL_SEQ_Run+0x1b4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d108      	bne.n	800782e <UTIL_SEQ_Run+0x196>
 800781c:	4b11      	ldr	r3, [pc, #68]	; (8007864 <UTIL_SEQ_Run+0x1cc>)
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	4b11      	ldr	r3, [pc, #68]	; (8007868 <UTIL_SEQ_Run+0x1d0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4013      	ands	r3, r2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800782a:	f7f8 ffa0 	bl	800076e <UTIL_SEQ_Idle>
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f383 8810 	msr	PRIMASK, r3
}
 8007838:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800783a:	f000 f91a 	bl	8007a72 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800783e:	4a03      	ldr	r2, [pc, #12]	; (800784c <UTIL_SEQ_Run+0x1b4>)
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	6013      	str	r3, [r2, #0]

  return;
 8007844:	bf00      	nop
}
 8007846:	3730      	adds	r7, #48	; 0x30
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000028 	.word	0x20000028
 8007850:	20000258 	.word	0x20000258
 8007854:	200002e8 	.word	0x200002e8
 8007858:	20000024 	.word	0x20000024
 800785c:	20000264 	.word	0x20000264
 8007860:	20000268 	.word	0x20000268
 8007864:	2000025c 	.word	0x2000025c
 8007868:	20000260 	.word	0x20000260

0800786c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007878:	f3ef 8310 	mrs	r3, PRIMASK
 800787c:	617b      	str	r3, [r7, #20]
  return(result);
 800787e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007882:	b672      	cpsid	i
}
 8007884:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 f8fa 	bl	8007a80 <SEQ_BitPosition>
 800788c:	4603      	mov	r3, r0
 800788e:	4619      	mov	r1, r3
 8007890:	4a06      	ldr	r2, [pc, #24]	; (80078ac <UTIL_SEQ_RegTask+0x40>)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	f383 8810 	msr	PRIMASK, r3
}
 80078a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80078a4:	bf00      	nop
}
 80078a6:	3720      	adds	r7, #32
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000268 	.word	0x20000268

080078b0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ba:	f3ef 8310 	mrs	r3, PRIMASK
 80078be:	60fb      	str	r3, [r7, #12]
  return(result);
 80078c0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80078c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80078c4:	b672      	cpsid	i
}
 80078c6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80078c8:	4b0d      	ldr	r3, [pc, #52]	; (8007900 <UTIL_SEQ_SetTask+0x50>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	4a0b      	ldr	r2, [pc, #44]	; (8007900 <UTIL_SEQ_SetTask+0x50>)
 80078d2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80078d4:	4a0b      	ldr	r2, [pc, #44]	; (8007904 <UTIL_SEQ_SetTask+0x54>)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	431a      	orrs	r2, r3
 80078e0:	4908      	ldr	r1, [pc, #32]	; (8007904 <UTIL_SEQ_SetTask+0x54>)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f383 8810 	msr	PRIMASK, r3
}
 80078f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80078f4:	bf00      	nop
}
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20000258 	.word	0x20000258
 8007904:	200002e8 	.word	0x200002e8

08007908 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007910:	f3ef 8310 	mrs	r3, PRIMASK
 8007914:	60fb      	str	r3, [r7, #12]
  return(result);
 8007916:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800791a:	b672      	cpsid	i
}
 800791c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	43da      	mvns	r2, r3
 8007922:	4b08      	ldr	r3, [pc, #32]	; (8007944 <UTIL_SEQ_PauseTask+0x3c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4013      	ands	r3, r2
 8007928:	4a06      	ldr	r2, [pc, #24]	; (8007944 <UTIL_SEQ_PauseTask+0x3c>)
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f383 8810 	msr	PRIMASK, r3
}
 8007936:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007938:	bf00      	nop
}
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	20000024 	.word	0x20000024

08007948 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007950:	f3ef 8310 	mrs	r3, PRIMASK
 8007954:	60fb      	str	r3, [r7, #12]
  return(result);
 8007956:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800795a:	b672      	cpsid	i
}
 800795c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800795e:	4b09      	ldr	r3, [pc, #36]	; (8007984 <UTIL_SEQ_ResumeTask+0x3c>)
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4313      	orrs	r3, r2
 8007966:	4a07      	ldr	r2, [pc, #28]	; (8007984 <UTIL_SEQ_ResumeTask+0x3c>)
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f383 8810 	msr	PRIMASK, r3
}
 8007974:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007976:	bf00      	nop
}
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000024 	.word	0x20000024

08007988 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007990:	f3ef 8310 	mrs	r3, PRIMASK
 8007994:	60fb      	str	r3, [r7, #12]
  return(result);
 8007996:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007998:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800799a:	b672      	cpsid	i
}
 800799c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800799e:	4b09      	ldr	r3, [pc, #36]	; (80079c4 <UTIL_SEQ_SetEvt+0x3c>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <UTIL_SEQ_SetEvt+0x3c>)
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f383 8810 	msr	PRIMASK, r3
}
 80079b4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80079b6:	bf00      	nop
}
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	2000025c 	.word	0x2000025c

080079c8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80079d0:	4b21      	ldr	r3, [pc, #132]	; (8007a58 <UTIL_SEQ_WaitEvt+0x90>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80079d6:	4b20      	ldr	r3, [pc, #128]	; (8007a58 <UTIL_SEQ_WaitEvt+0x90>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079de:	d102      	bne.n	80079e6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
 80079e4:	e005      	b.n	80079f2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80079e6:	4b1c      	ldr	r3, [pc, #112]	; (8007a58 <UTIL_SEQ_WaitEvt+0x90>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2201      	movs	r2, #1
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80079f2:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <UTIL_SEQ_WaitEvt+0x94>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80079f8:	4a18      	ldr	r2, [pc, #96]	; (8007a5c <UTIL_SEQ_WaitEvt+0x94>)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80079fe:	e005      	b.n	8007a0c <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8007a00:	4b16      	ldr	r3, [pc, #88]	; (8007a5c <UTIL_SEQ_WaitEvt+0x94>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4619      	mov	r1, r3
 8007a06:	69f8      	ldr	r0, [r7, #28]
 8007a08:	f7f8 feb8 	bl	800077c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8007a0c:	4b14      	ldr	r3, [pc, #80]	; (8007a60 <UTIL_SEQ_WaitEvt+0x98>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <UTIL_SEQ_WaitEvt+0x94>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4013      	ands	r3, r2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0f2      	beq.n	8007a00 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8007a1a:	4a0f      	ldr	r2, [pc, #60]	; (8007a58 <UTIL_SEQ_WaitEvt+0x90>)
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a20:	f3ef 8310 	mrs	r3, PRIMASK
 8007a24:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a26:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007a28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a2a:	b672      	cpsid	i
}
 8007a2c:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <UTIL_SEQ_WaitEvt+0x94>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	43da      	mvns	r2, r3
 8007a34:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <UTIL_SEQ_WaitEvt+0x98>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <UTIL_SEQ_WaitEvt+0x98>)
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f383 8810 	msr	PRIMASK, r3
}
 8007a48:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8007a4a:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <UTIL_SEQ_WaitEvt+0x94>)
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	6013      	str	r3, [r2, #0]

  return;
 8007a50:	bf00      	nop
}
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000264 	.word	0x20000264
 8007a5c:	20000260 	.word	0x20000260
 8007a60:	2000025c 	.word	0x2000025c

08007a64 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007a68:	bf00      	nop
}
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8007a72:	b480      	push	{r7}
 8007a74:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007a76:	bf00      	nop
}
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	0c1b      	lsrs	r3, r3, #16
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <SEQ_BitPosition+0x20>
 8007a96:	2310      	movs	r3, #16
 8007a98:	73fb      	strb	r3, [r7, #15]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	041b      	lsls	r3, r3, #16
 8007a9e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d105      	bne.n	8007ab6 <SEQ_BitPosition+0x36>
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	3308      	adds	r3, #8
 8007aae:	73fb      	strb	r3, [r7, #15]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d105      	bne.n	8007acc <SEQ_BitPosition+0x4c>
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	73fb      	strb	r3, [r7, #15]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	0f1b      	lsrs	r3, r3, #28
 8007ad0:	4a07      	ldr	r2, [pc, #28]	; (8007af0 <SEQ_BitPosition+0x70>)
 8007ad2:	5cd2      	ldrb	r2, [r2, r3]
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	f1c3 031f 	rsb	r3, r3, #31
 8007ae0:	b2db      	uxtb	r3, r3
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	08007df4 	.word	0x08007df4

08007af4 <__libc_init_array>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4d0d      	ldr	r5, [pc, #52]	; (8007b2c <__libc_init_array+0x38>)
 8007af8:	4c0d      	ldr	r4, [pc, #52]	; (8007b30 <__libc_init_array+0x3c>)
 8007afa:	1b64      	subs	r4, r4, r5
 8007afc:	10a4      	asrs	r4, r4, #2
 8007afe:	2600      	movs	r6, #0
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	d109      	bne.n	8007b18 <__libc_init_array+0x24>
 8007b04:	4d0b      	ldr	r5, [pc, #44]	; (8007b34 <__libc_init_array+0x40>)
 8007b06:	4c0c      	ldr	r4, [pc, #48]	; (8007b38 <__libc_init_array+0x44>)
 8007b08:	f000 f82e 	bl	8007b68 <_init>
 8007b0c:	1b64      	subs	r4, r4, r5
 8007b0e:	10a4      	asrs	r4, r4, #2
 8007b10:	2600      	movs	r6, #0
 8007b12:	42a6      	cmp	r6, r4
 8007b14:	d105      	bne.n	8007b22 <__libc_init_array+0x2e>
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1c:	4798      	blx	r3
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7ee      	b.n	8007b00 <__libc_init_array+0xc>
 8007b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b26:	4798      	blx	r3
 8007b28:	3601      	adds	r6, #1
 8007b2a:	e7f2      	b.n	8007b12 <__libc_init_array+0x1e>
 8007b2c:	08007e04 	.word	0x08007e04
 8007b30:	08007e04 	.word	0x08007e04
 8007b34:	08007e04 	.word	0x08007e04
 8007b38:	08007e08 	.word	0x08007e08

08007b3c <memcpy>:
 8007b3c:	440a      	add	r2, r1
 8007b3e:	4291      	cmp	r1, r2
 8007b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b44:	d100      	bne.n	8007b48 <memcpy+0xc>
 8007b46:	4770      	bx	lr
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b52:	4291      	cmp	r1, r2
 8007b54:	d1f9      	bne.n	8007b4a <memcpy+0xe>
 8007b56:	bd10      	pop	{r4, pc}

08007b58 <memset>:
 8007b58:	4402      	add	r2, r0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d100      	bne.n	8007b62 <memset+0xa>
 8007b60:	4770      	bx	lr
 8007b62:	f803 1b01 	strb.w	r1, [r3], #1
 8007b66:	e7f9      	b.n	8007b5c <memset+0x4>

08007b68 <_init>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	bf00      	nop
 8007b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6e:	bc08      	pop	{r3}
 8007b70:	469e      	mov	lr, r3
 8007b72:	4770      	bx	lr

08007b74 <_fini>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr
